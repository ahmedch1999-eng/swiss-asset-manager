from flask import Flask, render_template_string, send_from_directory, request, jsonify, make_response
from flask_socketio import SocketIO, emit
import os
import sqlite3
import json
import time
import random
import math
from datetime import datetime, timedelta
import requests
import yfinance as yf
import numpy as np
import pandas as pd
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
from scipy.optimize import minimize
import warnings
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
# Simple in-memory cache implementation
class SimpleCache:
    def __init__(self):
        self._cache = {}
    
    def get(self, key):
        if key in self._cache:
            data, timestamp, ttl = self._cache[key]
            if time.time() - timestamp < ttl:
                return data
            else:
                del self._cache[key]
        return None
    
    def set(self, key, value, ttl=300):
        self._cache[key] = (value, time.time(), ttl)
    
    def touch(self, key):
        if key in self._cache:
            data, _, ttl = self._cache[key]
            self._cache[key] = (data, time.time(), ttl)
from reportlab.lib.units import inch
import io
import base64
import matplotlib.pyplot as plt
import seaborn as sns
warnings.filterwarnings('ignore')

# Swiss-specific constants
SWISS_STAMP_TAX_RATE = 0.0015  # 0.15% stamp tax on Swiss securities
SWISS_WITHHOLDING_TAX = 0.35   # 35% withholding tax on dividends
SWISS_CAPITAL_GAINS_TAX = 0.0  # No capital gains tax in Switzerland
SWISS_INCOME_TAX_RATE = 0.25   # Average income tax rate

# Asset classification lists
CRYPTO = ['BTC-USD', 'ETH-USD', 'ADA-USD', 'DOT-USD', 'LINK-USD', 'UNI-USD']
COMMODITIES = ['GC=F', 'SI=F', 'CL=F', 'NG=F', 'PL=F', 'HG=F', 'PA=F']
BONDS = ['BND', 'AGG', 'LQD', 'HYG', 'TLT', 'IEF', 'SHY']
SWISS_STOCKS = ['NESN.SW', 'NOVN.SW', 'ROG.SW', 'UBSG.SW', 'ZURN.SW', 'ABBN.SW', 'CSGN.SW']
SWISS_INDICES = ['^SSMI', '^SLI', '^SPI']

# SSL context workaround for certain environments (yfinance/requests)
try:
    import ssl
    ssl._create_default_https_context = ssl._create_unverified_context
except Exception:
    pass

app = Flask(__name__)
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0
app.config['SECRET_KEY'] = 'swiss_asset_manager_secret_key_2025'
socketio = SocketIO(app, cors_allowed_origins="*")
app_start_time = time.time()

# Initialize cache
cache = SimpleCache()

# Database initialization
def init_database():
    """Initialize SQLite database for persistent data storage"""
    conn = sqlite3.connect('swiss_asset_manager.db')
    cursor = conn.cursor()
    
    # Portfolio holdings table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS portfolio_holdings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            symbol TEXT NOT NULL,
            quantity REAL NOT NULL,
            purchase_price REAL NOT NULL,
            purchase_date TEXT NOT NULL,
            current_price REAL,
            last_updated TEXT,
            asset_class TEXT,
            is_swiss BOOLEAN DEFAULT 0
        )
    ''')
    
    # Market data cache table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS market_data_cache (
            symbol TEXT PRIMARY KEY,
            data TEXT NOT NULL,
            timestamp TEXT NOT NULL,
            source TEXT NOT NULL
        )
    ''')
    
    # User preferences table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_preferences (
            key TEXT PRIMARY KEY,
            value TEXT NOT NULL,
            updated_at TEXT NOT NULL
        )
    ''')
    
    # Performance metrics table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS performance_metrics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT NOT NULL,
            portfolio_value REAL NOT NULL,
            daily_return REAL,
            cumulative_return REAL,
            volatility REAL,
            sharpe_ratio REAL,
            max_drawdown REAL,
            var_95 REAL
        )
    ''')
    
    # Swiss tax calculations table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tax_calculations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            symbol TEXT NOT NULL,
            transaction_type TEXT NOT NULL,
            amount REAL NOT NULL,
            stamp_tax REAL,
            withholding_tax REAL,
            net_amount REAL,
            calculation_date TEXT NOT NULL
        )
    ''')
    
    conn.commit()
    conn.close()

# Initialize database on startup
init_database()

# Swiss Tax Calculation Functions
def calculate_swiss_stamp_tax(transaction_value, is_swiss_security=True):
    """Calculate Swiss stamp tax (Stempelsteuer)"""
    if is_swiss_security:
        return transaction_value * SWISS_STAMP_TAX_RATE
    return 0.0

def calculate_swiss_withholding_tax(dividend_amount, is_swiss_security=True):
    """Calculate Swiss withholding tax (Verrechnungssteuer)"""
    if is_swiss_security:
        return dividend_amount * SWISS_WITHHOLDING_TAX
    return 0.0

def calculate_net_return(gross_return, transaction_costs, taxes):
    """Calculate net return after all costs and taxes"""
    return gross_return - transaction_costs - taxes

def calculate_swiss_tax_optimization(portfolio_data):
    """Optimize portfolio for Swiss tax efficiency"""
    optimized_weights = {}
    total_value = sum(portfolio_data.values())
    
    for symbol, value in portfolio_data.items():
        weight = value / total_value
        is_swiss = symbol in SWISS_STOCKS or symbol in SWISS_INDICES
        
        # Swiss securities get slight preference due to no capital gains tax
        if is_swiss:
            weight *= 1.05  # 5% preference for Swiss securities
        
        optimized_weights[symbol] = weight
    
    # Normalize weights
    total_weight = sum(optimized_weights.values())
    for symbol in optimized_weights:
        optimized_weights[symbol] /= total_weight
    
    return optimized_weights

# Advanced Portfolio Analysis Functions
def calculate_stress_test_scenarios(portfolio_data, market_data):
    """Calculate portfolio performance under various stress scenarios"""
    scenarios = {
        '2008_financial_crisis': {'equity_shock': -0.4, 'bond_boost': 0.1},
        'covid_2020': {'equity_shock': -0.3, 'bond_boost': 0.05},
        'interest_rate_shock': {'bond_shock': -0.15, 'equity_impact': -0.1},
        'swiss_franc_strength': {'swiss_equity_boost': 0.1, 'export_impact': -0.2},
        'inflation_shock': {'real_assets_boost': 0.2, 'bonds_shock': -0.25}
    }
    
    results = {}
    for scenario_name, shocks in scenarios.items():
        scenario_value = 0
        for symbol, value in portfolio_data.items():
            shock_multiplier = 1.0
            
            if symbol in SWISS_STOCKS and 'swiss_equity_boost' in shocks:
                shock_multiplier += shocks['swiss_equity_boost']
            elif symbol in BONDS and 'bond_shock' in shocks:
                shock_multiplier += shocks['bond_shock']
            elif symbol in BONDS and 'bond_boost' in shocks:
                shock_multiplier += shocks['bond_boost']
            elif symbol.startswith('^') and 'equity_shock' in shocks:
                shock_multiplier += shocks['equity_shock']
            elif symbol in COMMODITIES and 'real_assets_boost' in shocks:
                shock_multiplier += shocks['real_assets_boost']
            
            scenario_value += value * shock_multiplier
        
        results[scenario_name] = {
            'portfolio_value': scenario_value,
            'return': (scenario_value - sum(portfolio_data.values())) / sum(portfolio_data.values()),
            'shocks_applied': shocks
        }
    
    return results

def calculate_swiss_franc_hedge_ratio(portfolio_data):
    """Calculate optimal CHF hedge ratio for international exposure"""
    total_value = sum(portfolio_data.values())
    swiss_exposure = 0
    international_exposure = 0
    
    for symbol, value in portfolio_data.items():
        if symbol in SWISS_STOCKS or symbol in SWISS_INDICES:
            swiss_exposure += value
        else:
            international_exposure += value
    
    # Recommended hedge ratio: 50-70% of international exposure
    hedge_ratio = min(0.7, max(0.5, international_exposure / total_value * 0.6))
    
    return {
        'swiss_exposure_pct': swiss_exposure / total_value * 100,
        'international_exposure_pct': international_exposure / total_value * 100,
        'recommended_hedge_ratio': hedge_ratio,
        'hedge_amount': international_exposure * hedge_ratio
    }

# Static Files Route
@app.route('/static/<path:filename>')
def serve_static(filename):
    return send_from_directory('static', filename)

# Passwort-Schutz
PASSWORD = "y4YpFgdLJD1tK19"

# Spracheinstellung
CURRENT_LANGUAGE = "de"

# VOLLSTÄNDIGE Schweizer Aktienliste - 239 Aktien
SWISS_STOCKS = {
    # Bestehende + alle neuen Aktien
    "NESN.SW": "Nestlé", "NOVN.SW": "Novartis", "ROG.SW": "Roche", "UBSG.SW": "UBS Group",
    "ZURN.SW": "Zurich Insurance", "ABBN.SW": "ABB", "CSGN.SW": "Credit Suisse",
    "SGSN.SW": "SGS", "GIVN.SW": "Givaudan", "LONN.SW": "Lonza", "SIKA.SW": "Sika",
    "GEBN.SW": "Geberit", "SOON.SW": "Sonova", "SCMN.SW": "Swisscom", "ADEN.SW": "Adecco",
    "BAER.SW": "Julius Bär", "CLN.SW": "Clariant", "LOGIN.SW": "Logitech", "CFR.SW": "Richemont",
    "ALC.SW": "Alcon", "TEMN.SW": "Temenos", "VACN.SW": "VAT Group", "KNIN.SW": "Kuehne+Nagel",
    "PGHN.SW": "Partners Group", "SLHN.SW": "Swiss Life", "SYNN.SW": "Syngenta", "COPN.SW": "Cosmo Pharmaceuticals",
    
    # NEUE AKTIEN aus der Liste - Alle 239
    "GOOGL.SW": "Alphabet", "LLY.SW": "Eli Lilly", "V.SW": "Visa", "KO.SW": "Coca-Cola",
    "PEP.SW": "PepsiCo", "MCD.SW": "McDonald's", "ABT.SW": "Abbott", "MMM.SW": "3M",
    "EMR.SW": "Emerson Electric", "GOB.SW": "Gobain", "FCX.SW": "Freeport-McMoRan",
    "SREN.SW": "Swiss Re", "HOLN.SW": "Holcim", "GALD.SW": "Galapagos", "AAM.SW": "AAM",
    "SCHNE.SW": "Schneider Electric", "SCHP.SW": "Schindler", "SCHPE.SW": "Schindler Part",
    "SCHN.SW": "Schindler Holding", "SCMN.SW": "Swisscom", "ALC.SW": "Alcon",
    "GIVN.SW": "Givaudan", "DAL.SW": "Delta Air Lines", "SIKA.SW": "Sika",
    "PGHN.SW": "Partners Group", "LISN.SW": "Lindt & Sprüngli", "LISP.SW": "Lindt Part",
    "SLHN.SW": "Swiss Life", "AMRZ.SW": "Amriz", "WILL.SW": "Wilhelm",
    "SDZ.SW": "Sandoz", "GEBN.SW": "Geberit", "KNIN.SW": "Kuehne+Nagel",
    "SGSN.SW": "SGS", "ZBH.SW": "Zimmer Biomet", "STMN.SW": "Stadler Rail",
    "HUAYO.SW": "Huayo", "EMSN.SW": "EMS Chemie", "SOON.SW": "Sonova",
    "LOGN.SW": "Logitech", "BAER.SW": "Julius Bär", "VACN.SW": "VAT Group",
    "HELN.SW": "Helvetia", "BEAN.SW": "Belimo", "GOTION.SW": "Gotion High-tech",
    "BKW.SW": "BKW", "BALN.SW": "Baloise", "SPSN.SW": "Swiss Prime Site",
    "BCVN.SW": "Bachem", "UHR.SW": "Swatch Group", "UHRN.SW": "Swatch Part",
    "SQN.SW": "Square", "FHZN.SW": "Flughafen Zürich", "BNR.SW": "Brenntag",
    "DFSH.SW": "DFS", "SWD.SW": "Swedbank", "VZN.SW": "VZ Holding",
    "BARN.SW": "Barry Callebaut", "AVOL.SW": "Avolta", "PSPN.SW": "PSP Swiss Property",
    "ACLN.SW": "Aclon", "O2D.SW": "O2", "GF.SW": "Georg Fischer",
    "SCR.SW": "SCOR", "EFGN.SW": "EFG International", "SUPCON.SW": "Supercond",
    "GEM.SW": "Gemalto", "SUN.SW": "Sun", "YPSN.SW": "Ypsomed",
    "OSR.SW": "Oskar", "BANB.SW": "BanB", "TEMN.SW": "Temenos",
    "DESN.SW": "Desna", "GRKP.SW": "Gurkap", "SFSN.SW": "SFS Group",
    "GALE.SW": "Galenica", "SMG.SW": "SMG", "YJET.SW": "Yankee Jet",
    "GSI.SW": "GSI", "LUKN.SW": "Lukas", "ADEN.SW": "Adecco",
    "BUCN.SW": "Bucher", "SSNE.SW": "SSN", "EMMN.SW": "Emmi",
    "SFZN.SW": "SF-Zurich", "LEPU.SW": "Lepu", "DKSH.SW": "DKSH",
    "SUNN.SW": "Sunn", "VONN.SW": "Von Roll", "DRI.SW": "Drie",
    "BSKP.SW": "Basler Kantonalbank", "TKBP.SW": "Thurgauer Kantonalbank",
    "SGKN.SW": "St. Galler Kantonalbank", "ALLN.SW": "Allreal",
    "SIGN.SW": "SIG", "DOKA.SW": "Doka", "ALSN.SW": "Alessandro",
    "MOVE.SW": "Move", "CMBN.SW": "Combin", "HUBN.SW": "Hubner",
    "JCARE.SW": "J Care", "KEDA.SW": "Keda", "ZUGER.SW": "Zugerberg",
    "ZHT.SW": "ZHT", "IFCN.SW": "IFC", "DAE.SW": "Dae",
    "MOBN.SW": "Mobimo", "BEKN.SW": "Bekon", "CLN.SW": "Clariant",
    "KARN.SW": "Karn", "LLBN.SW": "LLB", "RKET.SW": "Rocket",
    "FDCB.SW": "FDC", "CFT.SW": "CFFT", "TXGN.SW": "TxGN",
    "SENIOR.SW": "Senior", "INRN.SW": "InRN", "BCHN.SW": "Bachem",
    "VATN.SW": "VAT", "WKBN.SW": "WKB", "BLKB.SW": "Basellandschaftliche Kantonalbank",
    "SRAIL.SW": "Stadler Rail", "TECN.SW": "Tecan", "LAND.SW": "Landis",
    "VAHN.SW": "VAHN", "SWON.SW": "Swon", "BCGE.SW": "Banque Cantonale de Genève",
    "GT.SW": "GT", "AERO.SW": "Aero", "IREN.SW": "Iren",
    "COTN.SW": "Coton", "ARYN.SW": "Aryn", "BELL.SW": "Bell",
    "ISN.SW": "ISN", "2HQ.SW": "2HQ", "BRKN.SW": "Brückner",
    "BOSN.SW": "Bosch", "KUDO.SW": "Kudo", "JFN.SW": "JFN",
    "SKAN.SW": "Skan", "GXI.SW": "GXI", "IMPN.SW": "Impinj",
    "AMS.SW": "AMS", "CHAM.SW": "Cham", "AEVS.SW": "Aevs",
    "KURN.SW": "Kurn", "HIAG.SW": "HIAG", "ZUGN.SW": "Zuger",
    "NEAG.SW": "Neag", "COPN.SW": "Cosmo", "REHN.SW": "Rehn",
    "MED.SW": "Med", "UBXN.SW": "Ubxn", "RSGN.SW": "Rsgn",
    "FORN.SW": "Forn", "SENS.SW": "Sens", "AUTN.SW": "Autn",
    "IDIA.SW": "Idia", "OERL.SW": "Oerlikon", "PPGN.SW": "PPG",
    "EPIC.SW": "Epic", "PLAN.SW": "Plan", "CICN.SW": "Cicn",
    "COK.SW": "Cok", "ZEHN.SW": "Zehn", "BYS.SW": "Bys",
    "TMO.SW": "Thermo Fisher", "APGN.SW": "Apgn", "WARN.SW": "Warn",
    "BSLN.SW": "Bsl", "LEHN.SW": "Lehn", "FREN.SW": "Fren",
    "VPBN.SW": "Vpb", "VETN.SW": "Vetn", "MOZN.SW": "Mozn",
    "PKTM.SW": "Pktm", "CPHN.SW": "Cphn", "MTG.SW": "Mtg",
    "PMN.SW": "Pmn", "PMNE.SW": "Pmne", "SWTQ.SW": "Swtq",
    "NREN.SW": "Nren", "METN.SW": "Metn", "SNBN.SW": "Snbn",
    "KOMN.SW": "Komn", "ARBN.SW": "Arbn", "MEDX.SW": "Medx",
    "PEAN.SW": "Pean", "EPH.SW": "Eph", "VBSN.SW": "Vbsn",
    "SFPN.SW": "Sfpn", "MIKN.SW": "Mikn", "LEON.SW": "Leon",
    "DOCM.SW": "Docm", "HBLN.SW": "Hbln", "VZUG.SW": "Vzug",
    "GLKBN.SW": "Glkb", "NWRN.SW": "Nwrn", "ELMN.SW": "Elmn",
    "CLTN.SW": "Cltn", "OFN.SW": "Ofn", "VARN.SW": "Varn",
    "LECN.SW": "Lecn", "BVZN.SW": "Bvzn", "BTC.SW": "BTC",
    "BCJ.SW": "Bcj", "GAM.SW": "Gam", "STGN.SW": "Stgn",
    "BIOV.SW": "Biov", "LMN.SW": "Lmn", "FTON.SW": "Fton",
    "ZUBN.SW": "Zubn", "TIBN.SW": "Tibn", "SANN.SW": "Sann",
    "ASCN.SW": "Ascn", "XLS.SW": "Xls", "GAV.SW": "Gav",
    "BBN.SW": "Bbn", "MOLN.SW": "Moln", "HLEE.SW": "Hlee",
    "MCHN.SW": "Mchn", "KLIN.SW": "Klin", "CALN.SW": "Caln",
    "ORON.SW": "Oron", "ALPN.SW": "Alpn", "ALPNE.SW": "Alpne",
    "KUD.SW": "Kud", "GMI.SW": "Gmi", "CURN.SW": "Curn",
    "VILN.SW": "Viln", "ESUN.SW": "Esun", "NBEN.SW": "Nben",
    "GURN.SW": "Gurn", "WIHN.SW": "Wihn", "RLF.SW": "Rlf",
    "YTME.SW": "Ytme", "VLRT.SW": "Vlrt", "ADVN.SW": "Advn",
    "MBTN.SW": "Mbtn", "STRN.SW": "Strn", "RIEN.SW": "Rien",
    "SHLTN.SW": "Shltn", "ASWN.SW": "Aswn", "ZWM.SW": "Zwm",
    "ADXN.SW": "Adxn", "EVE.SW": "Eve", "PEDU.SW": "Pedu",
    "HT5.SW": "Ht5", "EEII.SW": "Eeii", "AIRE.SW": "Aire",
    "CIE.SW": "CIE"
}

# Professionelle Benchmark-Indizes
BENCHMARK_INDICES = {
    "MSCIW": "MSCI World Index", "BCOM": "Bloomberg Commodity Index", 
    "LBUSTRUU": "Bloomberg Global Aggregate Bond", "SPX": "S&P 500 Index",
    "SMI": "Swiss Market Index", "EUNL.DE": "iShares Core MSCI World UCITS ETF",
    "IEGA": "iShares Core € Govt Bond UCITS ETF", "NDX": "NASDAQ 100",
    "DJI": "Dow Jones Industrial Average", "RUT": "Russell 2000",
    "VIX": "CBOE Volatility Index", "COMP": "NASDAQ Composite"
}

# VOLLSTÄNDIGE Indizes-Liste - Alle Kategorien
INDICES = {
    # US-Indizes
    "SPX": "S&P 500 Index", "NDX": "NASDAQ 100", "DJI": "Dow Jones Industrial Average",
    "RUT": "Russell 2000", "VIX": "CBOE Volatility Index", "COMP": "NASDAQ Composite",
    "NYA": "NYSE Composite", "MID": "S&P MidCap 400", "SML": "S&P SmallCap 600",
    "OEX": "S&P 100", "XAX": "NYSE AMEX Composite", "VXN": "NASDAQ Volatility",
    "VXD": "DJIA Volatility", "TXX": "CBOE Technology Index", "DXY": "US Dollar Index",
    "UIX": "CBOE Uranium Index", "CBOE": "CBOE Market Index", "RUI": "Russell 1000",
    "RUA": "Russell 3000", "RAY": "Raymond James", "RMZ": "MSCI US REIT",
    "HGX": "PHLX Housing Sector", "BKX": "KBW Bank Index", "XBD": "S&P Broker Dealer",
    "XLF": "Financial Select Sector", "XLI": "Industrial Select Sector",
    "XLY": "Consumer Discretionary", "XLP": "Consumer Staples", "XLE": "Energy Select Sector",
    "XLU": "Utilities Select Sector", "XLV": "Health Care Select Sector",
    "XLB": "Materials Select Sector", "XLK": "Technology Select Sector",
    "XME": "S&P Metals & Mining", "XPH": "S&P Pharmaceuticals", "XRT": "S&P Retail",
    "XHB": "S&P Homebuilders", "SOX": "PHLX Semiconductor", "OSX": "PHLX Oil Service",
    "DRG": "NYSE Arca Pharmaceutical", "BTK": "NYSE Arca Biotech", "NBI": "NASDAQ Biotech",
    "XNG": "NYSE Arca Natural Gas", "XAL": "NYSE Arca Airline", "XCI": "NYSE Arca Computer",
    "XOI": "NYSE Arca Oil", "XSD": "S&P Semiconductor", "XSW": "S&P Software",
    "XTH": "S&P Technology Hardware", "XTL": "S&P Telecom", "XES": "S&P Oil & Gas Equipment",
    "KBE": "KBW Bank ETF", "KRE": "KBW Regional Banking", "IAK": "iShares Insurance",
    "IAT": "iShares Regional Banks", "PSCE": "S&P SmallCap Energy", "PSCI": "S&P SmallCap Industrials",
    "PSCH": "S&P SmallCap Health Care",
    
    # Europäische Indizes
    "DAX": "DAX Germany", "CAC": "CAC 40 France", "FTSE": "FTSE 100 UK",
    "STOXX50": "Euro Stoxx 50", "AEX": "AEX Netherlands", "IBEX": "IBEX 35 Spain",
    "FTSE MIB": "FTSE MIB Italy", "SMI": "Swiss Market Index", "PSI20": "PSI 20 Portugal",
    "OMX": "OMX Stockholm 30", "ATX": "ATX Austria", "BEL20": "BEL 20 Belgium",
    "ISEQ": "ISEQ Ireland", "WIG": "WIG Poland", "BUX": "BUX Hungary",
    "RTS": "RTS Russia", "BIST": "BIST Turkey", "SOFIX": "SOFIX Bulgaria",
    "SBITOP": "SBITOP Slovenia", "UX": "UX Ukraine", "CEETX": "CEE TX",
    "CROBEX": "CROBEX Croatia", "HEX": "HEX Finland", "LITIN": "LITIN Lithuania",
    "OMXR": "OMX Riga", "OMXT": "OMX Tallinn", "PRAGUE SE PX": "Prague PX",
    "SAX": "SAX Slovakia",
    
    # Asien-Pazifik Indizes
    "NIKKEI": "Nikkei 225 Japan", "HSI": "Hang Seng Hong Kong", 
    "SHCOMP": "Shanghai Composite", "SZCOMP": "Shenzhen Composite",
    "CSI300": "CSI 300 China", "KOSPI": "KOSPI South Korea", "TWSE": "Taiwan Weighted",
    "STI": "Straits Times Singapore", "ASX": "ASX 200 Australia", "SENSEX": "Sensex India",
    "NIFTY50": "Nifty 50 India", "JKSE": "Jakarta Composite", "KLCI": "KLCI Malaysia",
    "PSEI": "PSEi Philippines", "SET": "SET Thailand", "VNI": "VN Index Vietnam",
    "COLOMBO": "Colombo Sri Lanka", "DSEX": "DSEX Bangladesh", "KS11": "KOSPI South Korea",
    "TOPIX": "TOPIX Japan", "TPEX": "TPEX Taiwan", "NZX50": "NZX 50 New Zealand",
    "MNI": "MNI China", "KOSDAQ": "KOSDAQ South Korea", "HSCEI": "Hang Seng China Enterprises",
    "HSML": "Hang Seng MidCap", "CNX500": "CNX 500 India", "BSE500": "BSE 500 India",
    "BSE100": "BSE 100 India", "BSE200": "BSE 200 India",
    
    # Globale/Internationale Indizes
    "MSCIW": "MSCI World", "MSCIEM": "MSCI Emerging Markets", "MSCIEAFE": "MSCI EAFE",
    "MSCIACWI": "MSCI ACWI", "FTSEALLW": "FTSE All-World", "SPGLOBAL100": "S&P Global 100",
    "SPGLOBAL1200": "S&P Global 1200", "DJGLOBAL": "Dow Jones Global",
    "RUSSELLGLOBAL": "Russell Global", "NYSEWL": "NYSE World Leaders",
    "MSCIWEXUSA": "MSCI World ex USA", "MSCIPACIFIC": "MSCI Pacific",
    "MSCIEUROPE": "MSCI Europe", "MSCIASIA": "MSCI Asia", "MSCICHINA": "MSCI China",
    "MSCIJAPAN": "MSCI Japan", "MSCIUK": "MSCI UK", "MSCICANADA": "MSCI Canada",
    "MSCIBRAZIL": "MSCI Brazil", "MSCIINDIA": "MSCI India",
    
    # Sektor-/Branchenindizes
    "DJUS": "Dow Jones US", "SPDR": "SPDR Sectors", "ISHARES": "iShares Core",
    "VANGUARD": "Vanguard Total", "INVESCO": "Invesco QQQ", "GLOBALX": "Global X",
    "ARK": "ARK Innovation", "PHLX": "PHLX Sector", "KBW": "KBW Regional",
    "NASDAQ": "NASDAQ Sector", "BLOOMBERG": "Bloomberg Commodity", "REFINITIV": "Refinitiv",
    "FACTSET": "FactSet", "BARRONS": "Barron's 400", "WILSHIRE": "Wilshire 5000",
    "COHEN": "Cohen & Steers", "ALERIAN": "Alerian MLP", "MVIS": "MVIS",
    "BLUESTAR": "BlueStar", "SOLACTIVE": "Solactive", "STOXXS": "STOXX Europe 600",
    "MSCISECTOR": "MSCI Sector", "SPSECTOR": "S&P Sector", "RUSSELLSECTOR": "Russell Sector",
    "FTSEsECTOR": "FTSE Sector", "DJSECTOR": "Dow Jones Sector", "NASDAQSECTOR": "Nasdaq Sector",
    "CBOESECTOR": "CBOE Sector"
}

# VOLLSTÄNDIGE Andere Assets
OTHER_ASSETS = {
    # Rohstoffe & Futures
    "GOLD": "Gold Spot", "BTC-USD": "Bitcoin", "ETH-USD": "Ethereum", 
    "SPY": "S&P 500 ETF", "VNQ": "Real Estate ETF", "BND": "Total Bond Market",
    "SI=F": "Silver Futures", "CL=F": "Crude Oil Futures", "PL=F": "Platinum Futures",
    "PA=F": "Palladium Futures", "HG=F": "Copper Futures", "NG=F": "Natural Gas Futures",
    "ZC=F": "Corn Futures", "ZW=F": "Wheat Futures", "ZS=F": "Soybean Futures",
    "ZL=F": "Soybean Oil Futures", "ZM=F": "Soybean Meal Futures", "ZO=F": "Oats Futures",
    "KE=F": "KC HRW Wheat Futures", "CC=F": "Cocoa Futures", "CT=F": "Cotton Futures",
    "OJ=F": "Orange Juice Futures", "SB=F": "Sugar Futures", "LB=F": "Lumber Futures",
    "HO=F": "Heating Oil Futures", "RB=F": "RBOB Gasoline Futures",
    
    # Währungen/Forex
    "USD": "US Dollar", "EUR": "Euro", "GBP": "British Pound", "JPY": "Japanese Yen",
    "CHF": "Swiss Franc", "CAD": "Canadian Dollar", "AUD": "Australian Dollar",
    "NZD": "New Zealand Dollar", "CNY": "Chinese Yuan", "HKD": "Hong Kong Dollar",
    "SGD": "Singapore Dollar", "SEK": "Swedish Krona", "NOK": "Norwegian Krone",
    "DKK": "Danish Krone", "MXN": "Mexican Peso", "BRL": "Brazilian Real",
    "RUB": "Russian Ruble", "INR": "Indian Rupee", "KRW": "South Korean Won",
    "TRY": "Turkish Lira", "ZAR": "South African Rand",
    
    # Forex Paare
    "EURUSD=X": "EUR/USD", "GBPUSD=X": "GBP/USD", "USDJPY=X": "USD/JPY",
    "USDCHF=X": "USD/CHF", "AUDUSD=X": "AUD/USD", "USDCAD=X": "USD/CAD",
    "NZDUSD=X": "NZD/USD", "EURGBP=X": "EUR/GBP", "EURJPY=X": "EUR/JPY",
    "GBPJPY=X": "GBP/JPY", "EURCHF=X": "EUR/CHF", "GBPCHF=X": "GBP/CHF",
    "CHFJPY=X": "CHF/JPY", "CADJPY=X": "CAD/JPY", "AUDJPY=X": "AUD/JPY",
    "NZDJPY=X": "NZD/JPY",
    
    # ETFs
    "GLD": "SPDR Gold Trust", "TLT": "iShares 20+ Year Treasury", "XLV": "Health Care Select Sector",
    "XLE": "Energy Select Sector", "XLB": "Materials Select Sector", "XLU": "Utilities Select Sector",
    "IFRA": "iShares Infrastructure", "XLK": "Technology Select Sector", "XLP": "Consumer Staples",
    "XLY": "Consumer Discretionary", "XLI": "Industrial Select Sector", "XLF": "Financial Select Sector",
    "XBI": "SPDR Biotech", "XRT": "SPDR Retail", "XHB": "SPDR Homebuilders",
    "XOP": "SPDR Oil & Gas Exploration", "XME": "SPDR Metals & Mining", "XSD": "SPDR Semiconductor",
    "XSW": "SPDR Software", "XTH": "SPDR Technology Hardware", "XTL": "SPDR Telecom",
    "XES": "SPDR Oil & Gas Equipment", "KBE": "SPDR Banks", "KRE": "SPDR Regional Banks",
    
    # Spezialisierte ETFs
    "REET": "iShares Global REIT", "REM": "iShares Mortgage Real Estate", "BDCS": "UBS ETRACS Business Development",
    "CEF": "Closed-End Fund", "ESG": "iShares ESG Aware", "SRI": "iShares MSCI KLD 400 Social",
    "ICLN": "iShares Global Clean Energy", "TAN": "Invesco Solar", "PBW": "Invesco WilderHill Clean Energy",
    "BLOK": "Amplify Transformational Data", "HACK": "ETFMG Prime Cyber Security", "AIQ": "Global X Artificial Intelligence",
    "BOTZ": "Global X Robotics & AI", "GNOM": "Global X Genomics", "FINX": "Global X FinTech",
    "CLOU": "Global X Cloud Computing", "NERD": "Roundhill Video Games", "BETZ": "Roundhill Sports Betting",
    "YOLO": "AdvisorShares Pure Cannabis", "LIT": "Global X Lithium & Battery Tech", "BATT": "Amplify Lithium & Battery Technology",
    "FAN": "First Trust Global Wind Energy", "HYDR": "Global X Hydrogen", "CGW": "Invesco S&P Global Water",
    "WOOD": "iShares Global Timber", "VEGI": "iShares MSCI Agriculture", "GDX": "VanEck Gold Miners",
    "SIL": "Global X Silver Miners", "COPX": "Global X Copper Miners", "OIH": "VanEck Oil Services",
    "SEA": "Invesco Shipping", "ITA": "iShares Aerospace & Defense", "LUX": "VanEck Luxury Goods",
    "GAMR": "ETFMG Video Game Tech", "SOXX": "iShares PHLX Semiconductor",
    
    # Anleihen/Renten
    "BND": "Vanguard Total Bond", "AGG": "iShares Core US Aggregate", "LQD": "iShares iBoxx Investment Grade",
    "HYG": "iShares iBoxx High Yield", "JNK": "SPDR Bloomberg High Yield", "EMB": "iShares J.P. Morgan EM Bond",
    "TLT": "iShares 20+ Year Treasury", "IEF": "iShares 7-10 Year Treasury", "SHY": "iShares 1-3 Year Treasury",
    "GOVT": "iShares US Treasury", "MUB": "iShares National Muni", "PZA": "Invesco National AMT-Free Muni",
    "BAB": "Invesco Taxable Municipal", "PIMIX": "PIMCO Income", "BOND": "PIMCO Active Bond",
    "BLACKROCK": "BlackRock Total Return", "FIDELITY": "Fidelity Total Bond", "SCHWAB": "Schwab US Aggregate",
    "INVESCOB": "Invesco Total Return", "SPDRB": "SPDR Portfolio Aggregate", "VANECK": "VanEck Investment Grade",
    "GLOBALXB": "Global X Yield", "WISDOMTREE": "WisdomTree Yield"
}

# Schweizer Privatbank Portfolios (simuliert)
SWISS_BANK_PORTFOLIOS = {
    "UBS_Premium": {"return": 6.2, "risk": 12.5, "sharpe": 0.50},
    "CreditSuisse_Wealth": {"return": 5.8, "risk": 13.2, "sharpe": 0.45},
    "JuliusBaer_Premium": {"return": 6.5, "risk": 11.8, "sharpe": 0.55},
    "Pictet_Balanced": {"return": 5.9, "risk": 10.5, "sharpe": 0.56},
    "Vontobel_Growth": {"return": 7.1, "risk": 14.2, "sharpe": 0.51}
}

# Marktzyklen für verschiedene Sektoren
MARKET_CYCLES = {
    "TECH": {"cycle": "Wachstum", "phase": "Früh", "rating": "Hoch", "trend": "↗️"},
    "HEALTH": {"cycle": "Defensiv", "phase": "Spät", "rating": "Mittel", "trend": "➡️"},
    "FINANCIAL": {"cycle": "Zyklisch", "phase": "Mitte", "rating": "Mittel", "trend": "↗️"},
    "ENERGY": {"cycle": "Zyklisch", "phase": "Früh", "rating": "Hoch", "trend": "↗️"},
    "MATERIALS": {"cycle": "Zyklisch", "phase": "Früh", "rating": "Hoch", "trend": "↗️"},
    "UTILITIES": {"cycle": "Defensiv", "phase": "Spät", "rating": "Niedrig", "trend": "➡️"},
    "CONSUMER": {"cycle": "Defensiv", "phase": "Spät", "rating": "Mittel", "trend": "➡️"},
    "INDUSTRIAL": {"cycle": "Zyklisch", "phase": "Mitte", "rating": "Mittel", "trend": "↗️"}
}

# Szenario-Analyse Parameter
SCENARIOS = {
    "normal": {"name": "Normal", "growth_multiplier": 1.0, "volatility_multiplier": 1.0},
    "interest_rise": {"name": "Zinserhöhung", "growth_multiplier": 0.7, "volatility_multiplier": 1.3},
    "inflation": {"name": "Hohe Inflation", "growth_multiplier": 0.8, "volatility_multiplier": 1.4},
    "recession": {"name": "Rezession", "growth_multiplier": 0.5, "volatility_multiplier": 1.8},
    "growth": {"name": "Starkes Wachstum", "growth_multiplier": 1.3, "volatility_multiplier": 0.8}
}

# Übersetzungen
TRANSLATIONS = {
    "de": {
        "title": "Swiss Asset Pro",
        "dashboard": "Dashboard",
        "portfolio": "Portfolio Entwicklung",
        "strategieanalyse": "Strategie Analyse",
        "simulation": "Zukunfts-Simulation",
        "bericht": "Bericht & Analyse",
        "markets": "Märkte & News",
        "assets": "Assets & Investment",
        "methodik": "Methodik",
        "black-litterman": "Black-Litterman",
        "about": "Über mich",
        "password_prompt": "Bitte geben Sie das Passwort ein:",
        "password_placeholder": "Passwort",
        "access_button": "Zugang erhalten",
        "password_error": "Falsches Passwort. Bitte versuchen Sie es erneut.",
        "password_hint": "by Ahmed Choudhary",
        "last_update": "Letztes Update:",
        "smi_return": "SMI Rendite:",
        "portfolio_return": "Portfolio Rendite:",
        "portfolio_value": "Portfolio Wert:"
    }
}

# Globale Variablen für Live-Daten
live_market_data = {}
last_market_update = None

# LIVE DATA SYSTEM API ENDPOINTS:
@app.route('/api/v1/live/sources/status')
def get_live_data_sources_status():
    """Get status of all live data sources"""
    try:
        if not hasattr(app, 'live_data_provider'):
            return jsonify({'error': 'Live data system not initialized'}), 500
        
        source_status = app.live_data_provider.get_source_status()
        db_status = app.live_data_store.get_source_status()
        
        return jsonify({
            'live_sources': source_status,
            'database_status': db_status,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error getting live data sources status: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/live/data/<symbol>')
def get_live_data_v1(symbol):
    """Get live data for a symbol with full metadata"""
    try:
        if not hasattr(app, 'live_data_provider'):
            return jsonify({'error': 'Live data system not initialized'}), 500
        
        data = app.live_data_provider.get_market_data(symbol, 'price')
        if not data:
            return jsonify({'error': f'No data available for {symbol}'}), 404
        
        return jsonify(data)
        
    except Exception as e:
        logger.error(f"Error getting live data for {symbol}: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/live/historical/<symbol>')
def get_live_historical_data(symbol):
    """Get historical data for a symbol"""
    try:
        if not hasattr(app, 'live_data_store'):
            return jsonify({'error': 'Live data system not initialized'}), 500
        
        days = request.args.get('days', 30, type=int)
        historical_data = app.live_data_store.get_historical_market_data(symbol, days)
        
        return jsonify({
            'symbol': symbol,
            'days': days,
            'data_points': len(historical_data),
            'data': historical_data,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error getting historical data for {symbol}: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/live/quality/<symbol>')
def get_data_quality_metrics(symbol):
    """Get data quality metrics for a symbol"""
    try:
        if not hasattr(app, 'live_data_validator'):
            return jsonify({'error': 'Live data system not initialized'}), 500
        
        # Get latest data
        latest_data = app.live_data_store.get_latest_market_data(symbol)
        if not latest_data:
            return jsonify({'error': f'No data available for {symbol}'}), 404
        
        # Calculate quality score
        quality_score = app.live_data_validator.calculate_quality_score(latest_data, symbol)
        
        return jsonify({
            'symbol': symbol,
            'quality_score': quality_score,
            'data_source': latest_data.get('source', 'unknown'),
            'last_updated': latest_data.get('fetched_at', 'unknown'),
            'validation_passed': app.live_data_validator.validate_data(latest_data, symbol),
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error getting data quality metrics for {symbol}: {str(e)}")
        return jsonify({'error': str(e)}), 500

# SMART API ROUTER ENDPOINTS:
@app.route('/api/v1/smart/status')
def get_smart_api_status():
    """Get status of all APIs in the smart router"""
    try:
        if not hasattr(app, 'smart_api_router'):
            return jsonify({'error': 'Smart API router not initialized'}), 500
        
        status = app.smart_api_router.get_api_status()
        return jsonify({
            'apis': status,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error getting smart API status: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/smart/test')
def test_smart_apis():
    """Test all APIs in the smart router"""
    try:
        if not hasattr(app, 'smart_api_router'):
            return jsonify({'error': 'Smart API router not initialized'}), 500
        
        results = app.smart_api_router.test_all_apis()
        return jsonify({
            'test_results': results,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error testing smart APIs: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/smart/data/<symbol>')
def get_smart_api_data(symbol):
    """Get data using smart API router"""
    try:
        if not hasattr(app, 'smart_api_router'):
            return jsonify({'error': 'Smart API router not initialized'}), 500
        
        data = app.smart_api_router.get_market_data(symbol, 'price')
        if not data:
            return jsonify({'error': f'No data available for {symbol}'}), 404
        
        return jsonify(data)
        
    except Exception as e:
        logger.error(f"Error getting smart API data for {symbol}: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/smart/historical/<symbol>')
def get_smart_api_historical(symbol):
    """Get historical data using smart API router"""
    try:
        if not hasattr(app, 'smart_api_router'):
            from smart_api_router import SmartAPIRouter
            app.smart_api_router = SmartAPIRouter()
        
        days = request.args.get('days', 30, type=int)
        data = app.smart_api_router.get_historical_data(symbol, days)
        if not data:
            return jsonify({'error': f'No historical data available for {symbol}'}), 404
        
        return jsonify({
            'symbol': symbol,
            'days': len(data),
            'data': data,
            'source': data[0]['source'] if data else 'unknown'
        })
        
    except Exception as e:
        print(f"Error getting historical data for {symbol}: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/smart/correlation')
def get_smart_correlation():
    """Get correlation matrix using live historical data"""
    try:
        if not hasattr(app, 'smart_api_router'):
            from smart_api_router import SmartAPIRouter
            app.smart_api_router = SmartAPIRouter()
        
        # Standard Portfolio-Symbole
        symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'BTC-USD', '^GSPC']
        days = request.args.get('days', 30, type=int)
        
        # Hole historische Daten für alle Symbole
        historical_data = {}
        for symbol in symbols:
            data = app.smart_api_router.get_historical_data(symbol, days)
            if data:
                historical_data[symbol] = data
        
        if len(historical_data) < 2:
            return jsonify({'error': 'Not enough historical data for correlation analysis'}), 404
        
        # Berechne Korrelationsmatrix
        correlation_matrix = calculate_correlation_matrix(historical_data)
        
        return jsonify({
            'symbols': list(historical_data.keys()),
            'days': days,
            'correlation_matrix': correlation_matrix,
            'data_sources': {symbol: data[0]['source'] if data and len(data) > 0 else 'unknown' for symbol, data in historical_data.items()},
            'data_quality': 'live'
        })
        
    except Exception as e:
        print(f"Error calculating correlation matrix: {str(e)}")
        return jsonify({'error': str(e)}), 500

def calculate_correlation_matrix(historical_data):
    """Berechne Korrelationsmatrix aus historischen Daten"""
    import pandas as pd
    import numpy as np
    
    # Erstelle DataFrame mit Close-Preisen
    df = pd.DataFrame()
    
    for symbol, data in historical_data.items():
        prices = [item['close'] for item in data]
        dates = [item['date'] for item in data]
        df[symbol] = pd.Series(prices, index=dates)
    
    # Berechne tägliche Renditen
    returns = df.pct_change().dropna()
    
    # Berechne Korrelationsmatrix
    correlation_matrix = returns.corr()
    
    # Konvertiere zu Dictionary für JSON
    return correlation_matrix.round(4).to_dict()

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

# Manifest Route
@app.route('/manifest.json')
def serve_manifest():
    return send_from_directory('.', 'manifest.json', mimetype='application/manifest+json')

@app.route('/switch_language/<language>')
def switch_language(language):
    global CURRENT_LANGUAGE
    if language in ['de', 'en']:
        CURRENT_LANGUAGE = language
    return jsonify({"status": "success", "language": CURRENT_LANGUAGE})

# NEUE IMPORTS oben hinzufügen
import requests
from bs4 import BeautifulSoup
import time

# NEUE FUNKTIONEN EINFÜGEN:

def get_yahoo_finance_data(symbol):
    """Deine ursprüngliche Yahoo Logic als separate Funktion"""
    try:
        # Symbol-Korrektur für Yahoo Finance
        yahoo_symbol = symbol
        
        # Für Schweizer Aktien .SW Endung sicherstellen
        if symbol in SWISS_STOCKS and not symbol.endswith('.SW'):
            yahoo_symbol = f"{symbol}.SW"
        
        # Für Indizes ^ voranstellen wenn nicht vorhanden
        elif symbol in INDICES and not symbol.startswith('^'):
            # Spezielle Behandlung für bekannte Indizes
            index_mapping = {
                "SPX": "^GSPC", "NDX": "^NDX", "DJI": "^DJI", 
                "RUT": "^RUT", "VIX": "^VIX", "COMP": "^IXIC",
                "DAX": "^GDAXI", "CAC": "^FCHI", "FTSE": "^FTSE",
                "SMI": "^SSMI", "NIKKEI": "^N225", "HSI": "^HSI"
            }
            yahoo_symbol = index_mapping.get(symbol, f"^{symbol}")
        
        # Für Rohstoffe/Futures
        elif "=F" in symbol:
            yahoo_symbol = symbol  # Bereits korrekt
        
        # Für Forex
        elif "=X" in symbol:
            yahoo_symbol = symbol  # Bereits korrekt
        
        print(f"Yahoo fetching: {yahoo_symbol} (original: {symbol})")
        
        ticker = yf.Ticker(yahoo_symbol)
        info = ticker.info
        hist = ticker.history(period="2d", interval="1d")
        
        if hist.empty:
            return None
        
        current_price = hist['Close'].iloc[-1]
        
        # Previous Close berechnen
        if len(hist) > 1:
            previous_close = hist['Close'].iloc[-2]
        else:
            previous_close = info.get('previousClose', current_price * 0.99)
        
        change = current_price - previous_close
        change_percent = (change / previous_close) * 100
        
        return {
            "symbol": symbol,
            "yahoo_symbol": yahoo_symbol,
            "price": round(current_price, 2),
            "change": round(change, 2),
            "change_percent": round(change_percent, 2),
            "currency": info.get('currency', 'USD'),
            "name": info.get('longName', info.get('shortName', symbol))
        }
    except Exception as e:
        print(f"Yahoo error for {symbol}: {e}")
        return None

def get_alpha_vantage_data(symbol):
    """Backup Daten von Alpha Vantage (kostenlose API)"""
    try:
        API_KEY = os.getenv("ALPHA_VANTAGE_API_KEY", "demo")  # Professioneller API-Key
        url = f"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}&apikey={API_KEY}"
        
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if "Global Quote" in data:
            quote = data["Global Quote"]
            price = float(quote["05. price"])
            change = float(quote["09. change"])
            change_percent = float(quote["10. change percent"].rstrip('%'))
            
            return {
                "symbol": symbol,
                "price": price,
                "change": change,
                "change_percent": change_percent,
                "currency": "USD",
                "name": symbol,
                "source": "Alpha Vantage"
            }
    except Exception as e:
        print(f"Alpha Vantage error for {symbol}: {e}")
    return None

def get_polygon_data(symbol):
    """Polygon.io API für professionelle Marktdaten"""
    try:
        API_KEY = os.getenv("POLYGON_API_KEY", "")
        if not API_KEY:
            return None
            
        url = f"https://api.polygon.io/v2/aggs/ticker/{symbol}/prev?apikey={API_KEY}"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if data.get('status') == 'OK' and data.get('results'):
            result = data['results'][0]
            return {
                'symbol': symbol,
                'price': result['c'],
                'change': result['c'] - result['o'],
                'change_percent': ((result['c'] - result['o']) / result['o']) * 100,
                'volume': result['v'],
                'high': result['h'],
                'low': result['l'],
                'open': result['o'],
                'previous_close': result['o'],
                'currency': 'USD',
                'name': symbol,
                'source': 'Polygon.io'
            }
    except Exception as e:
        print(f"Polygon.io error for {symbol}: {e}")
        return None

def get_finnhub_data(symbol):
    """Finnhub API für Echtzeitdaten"""
    try:
        API_KEY = os.getenv("FINNHUB_API_KEY", "")
        if not API_KEY:
            return None
            
        url = f"https://finnhub.io/api/v1/quote?symbol={symbol}&token={API_KEY}"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if 'c' in data and data['c'] > 0:
            return {
                'symbol': symbol,
                'price': data['c'],
                'change': data['d'],
                'change_percent': data['dp'],
                'volume': None,
                'high': data['h'],
                'low': data['l'],
                'open': data['o'],
                'previous_close': data['pc'],
                'currency': 'USD',
                'name': symbol,
                'source': 'Finnhub'
            }
    except Exception as e:
        print(f"Finnhub error for {symbol}: {e}")
        return None

def get_scraped_data(symbol):
    """Web Scraping Fallback für spezielle Indizes"""
    try:
        # Hier kannst du später Investing.com, Bloomberg etc. scrapen
        # Für jetzt: einfache Simulation basierend auf Symbol-Typ
        return None  # Später implementieren
    except:
        return None

# ENHANCED DATA INGESTION PIPELINE WITH SMART API ROUTING:
@app.route('/get_live_data/<symbol>')
def get_live_data(symbol):
    """Enhanced Multi-Source Data Pipeline with Smart API Routing and Fallback"""
    try:
        # Initialize smart API router if not already done
        if not hasattr(app, 'smart_api_router'):
            from smart_api_router import SmartAPIRouter
            app.smart_api_router = SmartAPIRouter()
        
        # Try to get data from smart API router first
        live_data = app.smart_api_router.get_market_data(symbol, 'price')
        if live_data and live_data.get('price', 0) > 0:
            # Add additional metadata
            live_data['reliability'] = 'High'
            live_data['data_quality'] = 'live'
            live_data['confidence_score'] = 85
            
            # Cache the data
            cache_key = f"market_data:{symbol}"
            cache.set(cache_key, live_data, ttl=300)  # 5 min cache
            
            print(f"Successfully fetched live data for {symbol} from {live_data['source']}")
            return jsonify(live_data)
        
        # Fallback to original system if smart API fails
        print(f"Smart API failed for {symbol}, falling back to original system")
        
        # Check cache first
        cache_key = f"market_data:{symbol}"
        cached_data = cache.get(cache_key)
        if cached_data and time.time() - cached_data.get('timestamp', 0) < 300:  # 5 min cache
            cached_data['source'] = 'Cache'
            cached_data['reliability'] = 'High'
            return jsonify(cached_data)

        # VERSUCH 1: Yahoo Finance (Primary Source - kostenlos)
        yahoo_data = get_yahoo_finance_data(symbol)
        if yahoo_data and yahoo_data.get('price', 0) > 0:
            yahoo_data['source'] = 'Yahoo Finance'
            yahoo_data['reliability'] = 'High'
            yahoo_data['timestamp'] = time.time()
            cache.set(cache_key, yahoo_data, ttl=300)  # 5 min cache
            return jsonify(yahoo_data)

        # VERSUCH 2: Polygon.io (Professionell - kostenpflichtig)
        polygon_data = get_polygon_data(symbol)
        if polygon_data and polygon_data.get('price', 0) > 0:
            polygon_data['source'] = 'Polygon.io'
            polygon_data['reliability'] = 'Very High'
            polygon_data['timestamp'] = time.time()
            cache.set(cache_key, polygon_data, ttl=300)
            return jsonify(polygon_data)

        # VERSUCH 3: Finnhub (Professionell - kostenpflichtig)
        finnhub_data = get_finnhub_data(symbol)
        if finnhub_data and finnhub_data.get('price', 0) > 0:
            finnhub_data['source'] = 'Finnhub'
            finnhub_data['reliability'] = 'Very High'
            finnhub_data['timestamp'] = time.time()
            cache.set(cache_key, finnhub_data, ttl=300)
            return jsonify(finnhub_data)

        # VERSUCH 4: Alpha Vantage (Backup - kostenlos)
        alpha_data = get_alpha_vantage_data(symbol)
        if alpha_data and alpha_data.get('price', 0) > 0:
            alpha_data['source'] = 'Alpha Vantage'
            alpha_data['reliability'] = 'Medium'
            alpha_data['timestamp'] = time.time()
            cache.set(cache_key, alpha_data, ttl=300)
            return jsonify(alpha_data)

        # VERSUCH 5: Web Scraping (Fallback)
        scraped_data = get_scraped_data(symbol)
        if scraped_data and scraped_data.get('price', 0) > 0:
            scraped_data['source'] = 'Web Scraping'
            scraped_data['reliability'] = 'Low'
            scraped_data['timestamp'] = time.time()
            cache.set(cache_key, scraped_data, ttl=300)
            return jsonify(scraped_data)

        # Fallback: Simulierte Daten mit Warnung
        simulated = get_simulated_data(symbol)
        simulated['source'] = 'Simulated Data'
        simulated['reliability'] = 'None'
        simulated['warning'] = 'Using simulated data - real market data unavailable'
        simulated['timestamp'] = time.time()
        cache.set(cache_key, simulated, ttl=60)  # Shorter cache for simulated data
        return jsonify(simulated)
    except Exception as e:
        print(f"Multi-source error for {symbol}: {e}")
        simulated = get_simulated_data(symbol)
        simulated['source'] = 'Error Fallback'
        simulated['reliability'] = 'None'
        simulated['error'] = str(e)
        simulated['timestamp'] = time.time()
        cache.set(cache_key, simulated, ttl=60)
        return jsonify(simulated)
def get_simulated_data(symbol):
    """Erweiterte simulierte Daten mit realistischen Marktcharakteristika"""
    import numpy as np
    from datetime import datetime, timedelta
    
    # Realistischere Basispreise basierend auf Asset-Klasse
    asset_classes = {
        'stocks': {'base': 100, 'volatility': 0.02, 'trend': 0.0001},
        'crypto': {'base': 50, 'volatility': 0.05, 'trend': 0.0002},
        'commodities': {'base': 150, 'volatility': 0.03, 'trend': 0.0001},
        'bonds': {'base': 100, 'volatility': 0.01, 'trend': 0.00005},
        'indices': {'base': 3000, 'volatility': 0.015, 'trend': 0.0001}
    }
    
    # Bestimme Asset-Klasse
    asset_class = 'stocks'  # Default
    if symbol in CRYPTO:
        asset_class = 'crypto'
    elif symbol in COMMODITIES:
        asset_class = 'commodities'
    elif symbol in BONDS:
        asset_class = 'bonds'
    elif symbol.startswith('^'):
        asset_class = 'indices'
    
    config = asset_classes[asset_class]
    
    # Realistische Volatilität und Trend
    volatility = config['volatility']
    trend = config['trend']
    
    # Zeitbasierte Simulation (täglich)
    days_since_epoch = (datetime.now() - datetime(2020, 1, 1)).days
    daily_return = np.random.normal(trend, volatility)
    
    # Kumulative Rendite über Zeit
    cumulative_return = daily_return * days_since_epoch
    price = config['base'] * (1 + cumulative_return)
    
    # Tägliche Änderung
    daily_change = price * daily_return
    change_percent = daily_change / price * 100
    
    # Zusätzliche Metriken
    volume = random.randint(100000, 10000000)
    high = price * (1 + abs(daily_return) * 2)
    low = price * (1 - abs(daily_return) * 2)
    
    return {
        "symbol": symbol,
        "price": round(price, 2),
        "change": round(daily_change, 2),
        "change_percent": round(change_percent, 2),
        "volume": volume,
        "high": round(high, 2),
        "low": round(low, 2),
        "open": round(price - daily_change, 2),
        "previous_close": round(price - daily_change, 2),
        "currency": "USD",
        "name": symbol,
        "source": "Simulated",
        "market_cap": round(price * volume * 1000, 0) if asset_class == 'stocks' else None,
        "pe_ratio": round(random.uniform(10, 30), 2) if asset_class == 'stocks' else None,
        "timestamp": datetime.now().isoformat()
    }
# Erweiterte Finanzberechnungen
def calculate_technical_indicators(prices, period=20):
    """Berechnet technische Indikatoren für Charts"""
    import numpy as np
    
    if len(prices) < period:
        return {}
    
    prices = np.array(prices)
    
    # Simple Moving Average (SMA)
    sma = np.mean(prices[-period:])
    
    # Exponential Moving Average (EMA)
    alpha = 2 / (period + 1)
    ema = prices[0]
    for price in prices[1:]:
        ema = alpha * price + (1 - alpha) * ema
    
    # RSI (Relative Strength Index)
    deltas = np.diff(prices)
    gains = np.where(deltas > 0, deltas, 0)
    losses = np.where(deltas < 0, -deltas, 0)
    
    avg_gain = np.mean(gains[-period:]) if len(gains) >= period else 0
    avg_loss = np.mean(losses[-period:]) if len(losses) >= period else 0
    
    if avg_loss == 0:
        rsi = 100
    else:
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
    
    # Bollinger Bands
    std = np.std(prices[-period:])
    upper_band = sma + (2 * std)
    lower_band = sma - (2 * std)
    
    # MACD
    ema_12 = calculate_ema(prices, 12)
    ema_26 = calculate_ema(prices, 26)
    macd_line = ema_12 - ema_26
    signal_line = calculate_ema([macd_line], 9)[0] if len(prices) >= 26 else macd_line
    histogram = macd_line - signal_line
    
    return {
        'sma': round(sma, 2),
        'ema': round(ema, 2),
        'rsi': round(rsi, 2),
        'bollinger_upper': round(upper_band, 2),
        'bollinger_lower': round(lower_band, 2),
        'macd': round(macd_line, 4),
        'macd_signal': round(signal_line, 4),
        'macd_histogram': round(histogram, 4)
    }

def calculate_ema(prices, period):
    """Berechnet Exponential Moving Average"""
    import numpy as np
    
    if len(prices) < period:
        return prices[-1] if prices else 0
    
    alpha = 2 / (period + 1)
    ema = prices[0]
    for price in prices[1:]:
        ema = alpha * price + (1 - alpha) * ema
    return ema

def calculate_portfolio_metrics(portfolio_data):
    """Berechnet erweiterte Portfolio-Metriken"""
    import numpy as np
    
    if not portfolio_data:
        return {}
    
    returns = [asset.get('change_percent', 0) for asset in portfolio_data.values()]
    weights = [asset.get('weight', 1.0/len(portfolio_data)) for asset in portfolio_data.values()]
    
    # Portfolio-Rendite
    portfolio_return = sum(r * w for r, w in zip(returns, weights))
    
    # Portfolio-Volatilität (vereinfacht)
    portfolio_volatility = np.std(returns) * np.sqrt(252)  # Annualisiert
    
    # Sharpe Ratio (vereinfacht, ohne risikofreien Zinssatz)
    sharpe_ratio = portfolio_return / portfolio_volatility if portfolio_volatility > 0 else 0
    
    # Maximum Drawdown
    cumulative_returns = np.cumprod([1 + r/100 for r in returns])
    running_max = np.maximum.accumulate(cumulative_returns)
    drawdown = (cumulative_returns - running_max) / running_max
    max_drawdown = np.min(drawdown) * 100
    
    # Value at Risk (VaR) 95%
    var_95 = np.percentile(returns, 5)
    
    return {
        'portfolio_return': round(portfolio_return, 2),
        'portfolio_volatility': round(portfolio_volatility, 2),
        'sharpe_ratio': round(sharpe_ratio, 3),
        'max_drawdown': round(max_drawdown, 2),
        'var_95': round(var_95, 2),
        'total_assets': len(portfolio_data)
    }

def calculate_correlation_matrix(assets_data):
    """Berechnet Korrelationsmatrix zwischen Assets"""
    import numpy as np
    
    if len(assets_data) < 2:
        return {}
    
    # Erstelle einfache Korrelationsmatrix
    symbols = list(assets_data.keys())
    correlation_matrix = {}
    
    for i, symbol1 in enumerate(symbols):
        correlation_matrix[symbol1] = {}
        for j, symbol2 in enumerate(symbols):
            if i == j:
                correlation_matrix[symbol1][symbol2] = 1.0
            else:
                # Vereinfachte Korrelation basierend auf Renditen
                ret1 = assets_data[symbol1].get('change_percent', 0)
                ret2 = assets_data[symbol2].get('change_percent', 0)
                # Simuliere Korrelation basierend auf Ähnlichkeit der Renditen
                correlation = 0.5 if abs(ret1 - ret2) < 2 else -0.2
                correlation_matrix[symbol1][symbol2] = round(correlation, 3)
    
    return correlation_matrix

# Neue API-Endpunkte für erweiterte Analysen
@app.route('/api/technical_analysis/<symbol>')
def get_technical_analysis(symbol):
    """Liefert technische Analyse für ein Asset"""
    try:
        # Hole historische Daten (vereinfacht)
        try:
            response = requests.get(f"{request.url_root}get_live_data/{symbol}", timeout=5)
            if response.status_code == 200:
                data = response.json()
            else:
                return jsonify({'error': 'No data available'}), 404
        except:
            return jsonify({'error': 'No data available'}), 404
        
        # Simuliere historische Preise für technische Indikatoren
        import numpy as np
        base_price = data.get('price', 100)
        historical_prices = [base_price * (1 + np.random.normal(0, 0.02)) for _ in range(50)]
        
        indicators = calculate_technical_indicators(historical_prices)
        
        # Trading-Signale
        signals = {}
        if indicators.get('rsi', 50) > 70:
            signals['rsi'] = 'Overbought - Consider Selling'
        elif indicators.get('rsi', 50) < 30:
            signals['rsi'] = 'Oversold - Consider Buying'
        else:
            signals['rsi'] = 'Neutral'
        
        if indicators.get('macd', 0) > indicators.get('macd_signal', 0):
            signals['macd'] = 'Bullish - MACD above Signal'
        else:
            signals['macd'] = 'Bearish - MACD below Signal'
        
        return jsonify({
            'symbol': symbol,
            'indicators': indicators,
            'signals': signals,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/portfolio_analysis')
def get_portfolio_analysis():
    """Liefert erweiterte Portfolio-Analyse"""
    try:
        # Hole aktuelle Portfolio-Daten
        portfolio_data = {}
        
        # Simuliere Portfolio-Daten basierend auf aktuellen Marktdaten
        symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA']
        for symbol in symbols:
            try:
                response = requests.get(f"{request.url_root}get_live_data/{symbol}", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    portfolio_data[symbol] = {
                        'price': data.get('price', 0),
                        'change_percent': data.get('change_percent', 0),
                        'weight': 1.0 / len(symbols)  # Gleichgewichtung
                    }
            except:
                # Fallback zu simulierten Daten
                portfolio_data[symbol] = {
                    'price': 100 + (hash(symbol) % 200),
                    'change_percent': (hash(symbol) % 10) - 5,
                    'weight': 1.0 / len(symbols)
                }
        
        if not portfolio_data:
            return jsonify({'error': 'No portfolio data available'}), 404
        
        # Berechne Portfolio-Metriken
        metrics = calculate_portfolio_metrics(portfolio_data)
        
        # Berechne Korrelationsmatrix
        correlation_matrix = calculate_correlation_matrix(portfolio_data)
        
        # Portfolio-Empfehlungen
        recommendations = []
        if metrics.get('sharpe_ratio', 0) < 0.5:
            recommendations.append("Consider diversifying portfolio to improve risk-adjusted returns")
        if metrics.get('max_drawdown', 0) < -20:
            recommendations.append("High drawdown detected - consider risk management")
        if len(portfolio_data) < 5:
            recommendations.append("Consider adding more assets for better diversification")
        
        return jsonify({
            'portfolio_metrics': metrics,
            'correlation_matrix': correlation_matrix,
            'recommendations': recommendations,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/market_sentiment')
def get_market_sentiment():
    """Liefert Marktstimmung basierend auf verschiedenen Indikatoren"""
    try:
        # Hole Daten für verschiedene Indizes
        indices = ['^GSPC', '^IXIC', '^DJI', '^SSMI', '^FTSE']
        index_data = {}
        
        for index in indices:
            try:
                response = requests.get(f"{request.url_root}get_live_data/{index}", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    index_data[index] = data.get('change_percent', 0)
            except:
                pass
        
        # Berechne Marktstimmung
        avg_change = sum(index_data.values()) / len(index_data) if index_data else 0
        
        if avg_change > 1:
            sentiment = 'Very Bullish'
            color = '#00ff00'
        elif avg_change > 0.5:
            sentiment = 'Bullish'
            color = '#90ee90'
        elif avg_change > -0.5:
            sentiment = 'Neutral'
            color = '#ffff00'
        elif avg_change > -1:
            sentiment = 'Bearish'
            color = '#ffa500'
        else:
            sentiment = 'Very Bearish'
            color = '#ff0000'
        
        # Volatilitäts-Indikator
        import numpy as np
        volatility = np.std(list(index_data.values())) if len(index_data) > 1 else 0
        
        return jsonify({
            'sentiment': sentiment,
            'color': color,
            'average_change': round(avg_change, 2),
            'volatility': round(volatility, 2),
            'index_data': index_data,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/swiss_tax_calculation', methods=['POST'])
def calculate_swiss_taxes():
    """Calculate Swiss taxes for portfolio transactions"""
    try:
        data = request.get_json()
        symbol = data.get('symbol')
        transaction_type = data.get('type', 'purchase')  # purchase, sale, dividend
        amount = float(data.get('amount', 0))
        
        is_swiss_security = symbol in SWISS_STOCKS or symbol in SWISS_INDICES
        
        # Calculate taxes based on transaction type
        if transaction_type == 'purchase' or transaction_type == 'sale':
            stamp_tax = calculate_swiss_stamp_tax(amount, is_swiss_security)
            withholding_tax = 0
        elif transaction_type == 'dividend':
            stamp_tax = 0
            withholding_tax = calculate_swiss_withholding_tax(amount, is_swiss_security)
        else:
            stamp_tax = 0
            withholding_tax = 0
        
        total_tax = stamp_tax + withholding_tax
        net_amount = amount - total_tax
        
        # Store calculation in database
        conn = sqlite3.connect('swiss_asset_manager.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO tax_calculations 
            (symbol, transaction_type, amount, stamp_tax, withholding_tax, net_amount, calculation_date)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (symbol, transaction_type, amount, stamp_tax, withholding_tax, net_amount, datetime.now().isoformat()))
        conn.commit()
        conn.close()
        
        return jsonify({
            'symbol': symbol,
            'transaction_type': transaction_type,
            'gross_amount': amount,
            'stamp_tax': stamp_tax,
            'withholding_tax': withholding_tax,
            'total_tax': total_tax,
            'net_amount': net_amount,
            'is_swiss_security': is_swiss_security,
            'tax_rate': (total_tax / amount * 100) if amount > 0 else 0
        })
        
    except Exception as e:
        return jsonify({'error': f'Tax calculation failed: {str(e)}'}), 500

@app.route('/api/stress_test', methods=['POST'])
def run_stress_test():
    """Run comprehensive stress testing on portfolio"""
    try:
        data = request.get_json()
        portfolio_data = data.get('portfolio', {})
        custom_scenarios = data.get('custom_scenarios', {})
        
        # Get current market data
        market_data = {}
        for symbol in portfolio_data.keys():
            try:
                response = requests.get(f"{request.url_root}get_live_data/{symbol}")
                if response.status_code == 200:
                    market_data[symbol] = response.json()
            except Exception:
                continue
        
        # Run standard stress tests
        stress_results = calculate_stress_test_scenarios(portfolio_data, market_data)
        
        # Add custom scenarios if provided
        for scenario_name, shocks in custom_scenarios.items():
            scenario_value = 0
            for symbol, value in portfolio_data.items():
                shock_multiplier = 1.0
                for shock_type, shock_value in shocks.items():
                    if shock_type in symbol.lower() or shock_type == 'all':
                        shock_multiplier += shock_value
                scenario_value += value * shock_multiplier
            
            stress_results[f'custom_{scenario_name}'] = {
                'portfolio_value': scenario_value,
                'return': (scenario_value - sum(portfolio_data.values())) / sum(portfolio_data.values()),
                'shocks_applied': shocks
            }
        
        # Calculate worst-case scenario
        worst_case = min(stress_results.values(), key=lambda x: x['return'])
        
        return jsonify({
            'stress_test_results': stress_results,
            'worst_case_scenario': worst_case,
            'portfolio_resilience': {
                'max_loss': abs(worst_case['return']) * 100,
                'recommendation': 'High risk' if abs(worst_case['return']) > 0.3 else 'Moderate risk' if abs(worst_case['return']) > 0.2 else 'Low risk'
            }
        })
        
    except Exception as e:
        return jsonify({'error': f'Stress test failed: {str(e)}'}), 500

@app.route('/api/portfolio_optimization', methods=['POST'])
def optimize_portfolio():
    """Optimize portfolio for Swiss tax efficiency and risk-adjusted returns"""
    try:
        data = request.get_json()
        current_portfolio = data.get('current_portfolio', {})
        target_return = data.get('target_return', 0.08)  # 8% target return
        risk_tolerance = data.get('risk_tolerance', 'moderate')  # conservative, moderate, aggressive
        
        # Get historical data for optimization
        symbols = list(current_portfolio.keys())
        returns_data = {}
        
        for symbol in symbols:
            try:
                ticker = yf.Ticker(symbol)
                hist = ticker.history(period="1y")
                if not hist.empty:
                    returns_data[symbol] = hist['Close'].pct_change().dropna()
            except Exception:
                continue
        
        if len(returns_data) < 2:
            return jsonify({'error': 'Insufficient data for optimization'}), 400
        
        # Create returns matrix
        returns_df = pd.DataFrame(returns_data)
        returns_df = returns_df.dropna()
        
        # Calculate expected returns and covariance matrix
        expected_returns = returns_df.mean() * 252  # Annualized
        cov_matrix = returns_df.cov() * 252  # Annualized
        
        # Swiss tax adjustment
        for symbol in expected_returns.index:
            if symbol in SWISS_STOCKS or symbol in SWISS_INDICES:
                expected_returns[symbol] *= 1.05  # 5% boost for Swiss securities (no capital gains tax)
        
        # Risk tolerance adjustment
        risk_multiplier = {'conservative': 0.5, 'moderate': 1.0, 'aggressive': 1.5}
        cov_matrix *= risk_multiplier.get(risk_tolerance, 1.0)
        
        # Portfolio optimization using Markowitz
        n_assets = len(expected_returns)
        
        def portfolio_performance(weights):
            portfolio_return = np.sum(weights * expected_returns)
            portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
            return portfolio_return, portfolio_volatility
        
        def negative_sharpe(weights):
            p_ret, p_vol = portfolio_performance(weights)
            return -(p_ret - 0.02) / p_vol  # Assuming 2% risk-free rate
        
        # Constraints
        constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})  # Weights sum to 1
        bounds = tuple((0, 1) for _ in range(n_assets))  # No short selling
        
        # Initial guess
        initial_weights = np.array([1/n_assets] * n_assets)
        
        # Optimize
        result = minimize(negative_sharpe, initial_weights, method='SLSQP', bounds=bounds, constraints=constraints)
        
        if result.success:
            optimal_weights = result.x
            optimal_return, optimal_volatility = portfolio_performance(optimal_weights)
            optimal_sharpe = (optimal_return - 0.02) / optimal_volatility
            
            # Create optimized portfolio
            total_value = sum(current_portfolio.values())
            optimized_portfolio = {}
            for i, symbol in enumerate(symbols):
                optimized_portfolio[symbol] = optimal_weights[i] * total_value
            
            return jsonify({
                'optimized_portfolio': optimized_portfolio,
                'optimal_weights': dict(zip(symbols, optimal_weights)),
                'expected_return': optimal_return,
                'expected_volatility': optimal_volatility,
                'sharpe_ratio': optimal_sharpe,
                'rebalancing_needed': any(abs(optimal_weights[i] - current_portfolio[symbols[i]]/total_value) > 0.05 for i in range(len(symbols)))
            })
        else:
            return jsonify({'error': 'Optimization failed'}), 500
            
    except Exception as e:
        return jsonify({'error': f'Portfolio optimization failed: {str(e)}'}), 500

# ENHANCED DATA PIPELINE API ENDPOINT
@app.route('/api/v1/marketdata', methods=['GET'])
def get_market_data_api():
    """Enhanced market data API with caching and multiple sources"""
    try:
        symbol = request.args.get('symbol')
        if not symbol:
            return jsonify({'error': 'Symbol parameter required'}), 400
        
        # Get data using enhanced pipeline
        response = get_live_data(symbol)
        data = response.get_json() if hasattr(response, 'get_json') else response
        
        return jsonify({
            'success': True,
            'symbol': symbol,
            'data': data,
            'timestamp': time.time()
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/v1/marketdata/batch', methods=['POST'])
def get_batch_market_data():
    """Get market data for multiple symbols in batch"""
    try:
        data = request.get_json()
        symbols = data.get('symbols', [])
        
        if not symbols:
            return jsonify({'error': 'Symbols array required'}), 400
        
        results = {}
        for symbol in symbols:
            try:
                response = get_live_data(symbol)
                symbol_data = response.get_json() if hasattr(response, 'get_json') else response
                results[symbol] = symbol_data
                time.sleep(0.1)  # Rate limiting
            except Exception as e:
                results[symbol] = {'error': str(e)}
        
        return jsonify({
            'success': True,
            'data': results,
            'timestamp': time.time()
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

# INTERACTIVE CHARTS API
@app.route('/api/v1/charts/historical', methods=['GET'])
def get_historical_chart_data():
    """Get historical data for interactive charts"""
    try:
        symbol = request.args.get('symbol')
        period = request.args.get('period', '1mo')  # 1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max
        interval = request.args.get('interval', '1d')  # 1m, 2m, 5m, 15m, 30m, 60m, 90m, 1h, 1d, 5d, 1wk, 1mo, 3mo
        
        if not symbol:
            return jsonify({'error': 'Symbol parameter required'}), 400
        
        # Get historical data from Yahoo Finance
        ticker = yf.Ticker(symbol)
        hist = ticker.history(period=period, interval=interval)
        
        if hist.empty:
            return jsonify({'error': 'No historical data available'}), 404
        
        # Convert to chart-friendly format
        chart_data = {
            'labels': hist.index.strftime('%Y-%m-%d').tolist(),
            'datasets': [{
                'label': f'{symbol} Price',
                'data': hist['Close'].tolist(),
                'borderColor': '#3b82f6',
                'backgroundColor': 'rgba(59, 130, 246, 0.1)',
                'fill': True,
                'tension': 0.1
            }]
        }
        
        # Add volume data if available
        if 'Volume' in hist.columns:
            chart_data['volume'] = {
                'labels': hist.index.strftime('%Y-%m-%d').tolist(),
                'datasets': [{
                    'label': 'Volume',
                    'data': hist['Volume'].tolist(),
                    'backgroundColor': 'rgba(156, 163, 175, 0.5)',
                    'borderColor': 'rgba(156, 163, 175, 1)',
                    'borderWidth': 1
                }]
            }
        
        return jsonify({
            'success': True,
            'symbol': symbol,
            'period': period,
            'interval': interval,
            'data': chart_data,
            'metadata': {
                'start_date': hist.index[0].strftime('%Y-%m-%d'),
                'end_date': hist.index[-1].strftime('%Y-%m-%d'),
                'data_points': len(hist),
                'price_range': {
                    'min': float(hist['Close'].min()),
                    'max': float(hist['Close'].max()),
                    'current': float(hist['Close'].iloc[-1])
                }
            }
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/v1/charts/technical', methods=['GET'])
def get_technical_indicators():
    """Get technical indicators for charts"""
    try:
        symbol = request.args.get('symbol')
        period = request.args.get('period', '6mo')
        
        if not symbol:
            return jsonify({'error': 'Symbol parameter required'}), 400
        
        # Get historical data
        ticker = yf.Ticker(symbol)
        hist = ticker.history(period=period)
        
        if hist.empty:
            return jsonify({'error': 'No historical data available'}), 404
        
        # Calculate technical indicators
        indicators = calculate_technical_indicators(hist)
        
        # Format for charts
        chart_data = {
            'labels': hist.index.strftime('%Y-%m-%d').tolist(),
            'datasets': []
        }
        
        # Price data
        chart_data['datasets'].append({
            'label': 'Price',
            'data': hist['Close'].tolist(),
            'borderColor': '#3b82f6',
            'backgroundColor': 'rgba(59, 130, 246, 0.1)',
            'fill': False,
            'yAxisID': 'y'
        })
        
        # Moving averages
        if 'sma_20' in indicators:
            chart_data['datasets'].append({
                'label': 'SMA 20',
                'data': indicators['sma_20'],
                'borderColor': '#ef4444',
                'backgroundColor': 'transparent',
                'fill': False,
                'yAxisID': 'y'
            })
        
        if 'ema_12' in indicators:
            chart_data['datasets'].append({
                'label': 'EMA 12',
                'data': indicators['ema_12'],
                'borderColor': '#10b981',
                'backgroundColor': 'transparent',
                'fill': False,
                'yAxisID': 'y'
            })
        
        # RSI data (separate chart)
        rsi_data = {
            'labels': hist.index.strftime('%Y-%m-%d').tolist(),
            'datasets': [{
                'label': 'RSI',
                'data': indicators.get('rsi', []),
                'borderColor': '#f59e0b',
                'backgroundColor': 'rgba(245, 158, 11, 0.1)',
                'fill': True,
                'yAxisID': 'y'
            }]
        }
        
        return jsonify({
            'success': True,
            'symbol': symbol,
            'price_chart': chart_data,
            'rsi_chart': rsi_data,
            'indicators': indicators
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

# DCF VALUATION MODULE
def calculate_dcf_valuation(symbol, growth_rate=None, terminal_growth_rate=0.025, wacc=None):
    """Calculate DCF valuation for a company"""
    try:
        # Get company data
        ticker = yf.Ticker(symbol)
        info = ticker.info
        
        # Get financial data
        financials = ticker.financials
        balance_sheet = ticker.balance_sheet
        cashflow = ticker.cashflow
        
        if financials.empty or cashflow.empty:
            return None
        
        # Extract key metrics
        revenue = financials.loc['Total Revenue'].iloc[0] if 'Total Revenue' in financials.index else 0
        free_cash_flow = cashflow.loc['Free Cash Flow'].iloc[0] if 'Free Cash Flow' in cashflow.index else 0
        
        # Calculate growth rate if not provided
        if growth_rate is None:
            if len(financials.columns) >= 2:
                prev_revenue = financials.loc['Total Revenue'].iloc[1] if 'Total Revenue' in financials.index else revenue
                growth_rate = (revenue - prev_revenue) / prev_revenue if prev_revenue > 0 else 0.05
            else:
                growth_rate = 0.05  # Default 5% growth
        
        # Calculate WACC if not provided
        if wacc is None:
            # Simplified WACC calculation
            market_cap = info.get('marketCap', 0)
            total_debt = balance_sheet.loc['Total Debt'].iloc[0] if 'Total Debt' in balance_sheet.index else 0
            cash = balance_sheet.loc['Cash And Cash Equivalents'].iloc[0] if 'Cash And Cash Equivalents' in balance_sheet.index else 0
            
            equity_value = market_cap
            debt_value = total_debt - cash
            
            if equity_value + debt_value > 0:
                equity_ratio = equity_value / (equity_value + debt_value)
                debt_ratio = debt_value / (equity_value + debt_value)
                
                # Simplified cost calculations
                cost_of_equity = 0.10  # 10% default
                cost_of_debt = 0.05    # 5% default
                tax_rate = 0.25        # 25% default
                
                wacc = (equity_ratio * cost_of_equity) + (debt_ratio * cost_of_debt * (1 - tax_rate))
            else:
                wacc = 0.10  # Default 10% WACC
        
        # DCF calculation
        years = 10
        projected_fcf = []
        discount_factors = []
        
        for year in range(1, years + 1):
            # Project FCF with growth
            fcf = free_cash_flow * ((1 + growth_rate) ** year)
            projected_fcf.append(fcf)
            
            # Discount factor
            discount_factor = 1 / ((1 + wacc) ** year)
            discount_factors.append(discount_factor)
        
        # Present value of projected FCF
        pv_fcf = sum(fcf * df for fcf, df in zip(projected_fcf, discount_factors))
        
        # Terminal value
        terminal_fcf = projected_fcf[-1] * (1 + terminal_growth_rate)
        terminal_value = terminal_fcf / (wacc - terminal_growth_rate)
        pv_terminal = terminal_value / ((1 + wacc) ** years)
        
        # Enterprise value
        enterprise_value = pv_fcf + pv_terminal
        
        # Equity value (simplified)
        shares_outstanding = info.get('sharesOutstanding', 1)
        equity_value = enterprise_value / shares_outstanding if shares_outstanding > 0 else enterprise_value
        
        # Current price
        current_price = info.get('currentPrice', 0)
        
        return {
            'symbol': symbol,
            'current_price': current_price,
            'dcf_value': equity_value,
            'upside_downside': ((equity_value - current_price) / current_price * 100) if current_price > 0 else 0,
            'assumptions': {
                'growth_rate': growth_rate,
                'terminal_growth_rate': terminal_growth_rate,
                'wacc': wacc,
                'years': years
            },
            'components': {
                'pv_fcf': pv_fcf,
                'pv_terminal': pv_terminal,
                'enterprise_value': enterprise_value,
                'shares_outstanding': shares_outstanding
            },
            'projected_fcf': projected_fcf,
            'discount_factors': discount_factors
        }
    except Exception as e:
        print(f"DCF calculation error for {symbol}: {e}")
        return None

@app.route('/api/v1/valuation/dcf', methods=['GET'])
def get_dcf_valuation():
    """Get DCF valuation for a company"""
    try:
        symbol = request.args.get('symbol')
        growth_rate = request.args.get('growth_rate', type=float)
        terminal_growth_rate = request.args.get('terminal_growth_rate', 0.025, type=float)
        wacc = request.args.get('wacc', type=float)
        
        if not symbol:
            return jsonify({'error': 'Symbol parameter required'}), 400
        
        dcf_result = calculate_dcf_valuation(symbol, growth_rate, terminal_growth_rate, wacc)
        
        if dcf_result is None:
            return jsonify({'error': 'Unable to calculate DCF valuation'}), 404
        
        return jsonify({
            'success': True,
            'valuation': dcf_result
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/v1/valuation/sensitivity', methods=['GET'])
def get_dcf_sensitivity():
    """Get DCF sensitivity analysis"""
    try:
        symbol = request.args.get('symbol')
        if not symbol:
            return jsonify({'error': 'Symbol parameter required'}), 400
        
        # Sensitivity analysis with different growth rates and WACC
        growth_rates = [0.02, 0.05, 0.08, 0.10, 0.12]
        wacc_rates = [0.08, 0.10, 0.12, 0.15, 0.18]
        
        sensitivity_matrix = []
        
        for growth_rate in growth_rates:
            row = []
            for wacc in wacc_rates:
                dcf_result = calculate_dcf_valuation(symbol, growth_rate, 0.025, wacc)
                if dcf_result:
                    row.append({
                        'dcf_value': dcf_result['dcf_value'],
                        'upside_downside': dcf_result['upside_downside']
                    })
                else:
                    row.append(None)
            sensitivity_matrix.append(row)
        
        return jsonify({
            'success': True,
            'symbol': symbol,
            'sensitivity_matrix': sensitivity_matrix,
            'growth_rates': growth_rates,
            'wacc_rates': wacc_rates
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

# WebSocket Event Handlers
@socketio.on('connect')
def handle_connect():
    """Handle client connection"""
    print('Client connected')
    emit('status', {'message': 'Connected to Swiss Asset Manager'})

@socketio.on('disconnect')
def handle_disconnect():
    """Handle client disconnection"""
    print('Client disconnected')

@socketio.on('subscribe_to_updates')
def handle_subscribe(data):
    """Subscribe client to real-time updates"""
    symbols = data.get('symbols', [])
    print(f'Client subscribed to updates for: {symbols}')
    emit('subscription_confirmed', {'symbols': symbols})

@socketio.on('request_portfolio_update')
def handle_portfolio_update():
    """Send real-time portfolio update"""
    try:
        # Get current portfolio data
        portfolio_data = {
            'NESN.SW': 25000,
            'NOVN.SW': 20000,
            'ROG.SW': 15000,
            'AAPL': 30000,
            'MSFT': 25000,
            'BND': 20000,
            'GC=F': 10000
        }
        
        # Get live prices
        updated_portfolio = {}
        total_value = 0
        
        for symbol, value in portfolio_data.items():
            try:
                response = requests.get(f"{request.url_root}get_live_data/{symbol}")
                if response.status_code == 200:
                    data = response.json()
                    current_price = data.get('price', 0)
                    updated_value = value * (1 + data.get('change_percent', 0) / 100)
                    updated_portfolio[symbol] = updated_value
                    total_value += updated_value
                else:
                    updated_portfolio[symbol] = value
                    total_value += value
            except Exception:
                updated_portfolio[symbol] = value
                total_value += value
        
        # Calculate portfolio metrics
        daily_change = total_value - sum(portfolio_data.values())
        daily_return = daily_change / sum(portfolio_data.values()) * 100
        
        emit('portfolio_update', {
            'portfolio': updated_portfolio,
            'total_value': total_value,
            'daily_change': daily_change,
            'daily_return': daily_return,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        emit('error', {'message': f'Portfolio update failed: {str(e)}'})

@socketio.on('request_market_update')
def handle_market_update():
    """Send real-time market data update"""
    try:
        symbols = ['^SSMI', '^GSPC', '^IXIC', 'NESN.SW', 'NOVN.SW', 'ROG.SW']
        market_data = {}
        
        for symbol in symbols:
            try:
                response = requests.get(f"{request.url_root}get_live_data/{symbol}")
                if response.status_code == 200:
                    market_data[symbol] = response.json()
            except Exception:
                continue
        
        emit('market_update', {
            'data': market_data,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        emit('error', {'message': f'Market update failed: {str(e)}'})

# Background task for periodic updates
def background_market_updates():
    """Background task to send periodic market updates"""
    while True:
        try:
            # Send market updates every 30 seconds
            socketio.emit('market_update', {
                'message': 'Periodic market update',
                'timestamp': datetime.now().isoformat()
            })
            time.sleep(30)
        except Exception as e:
            print(f'Background update error: {e}')
            time.sleep(30)

# Start background task
import threading
background_thread = threading.Thread(target=background_market_updates, daemon=True)
background_thread.start()

@app.route('/refresh_all_markets')
def refresh_all_markets():
    """Aktualisiert alle Marktdaten mit erweiterten Symbolen"""
    global live_market_data, last_market_update
    
    # Erweiterte Liste von Marktdaten
    symbols_to_fetch = {
        # Schweizer Indizes
        'SMI': '^SSMI', 'Swiss Leader': '^SLI', 'Swiss Performance': '^SPI',
        
        # Globale Hauptindizes
        'DAX': '^GDAXI', 'S&P 500': '^GSPC', 'NASDAQ': '^IXIC',
        'FTSE 100': '^FTSE', 'CAC 40': '^FCHI', 'Nikkei 225': '^N225',
        'Hang Seng': '^HSI', 'Shanghai': '000001.SS',
        
        # Rohstoffe
        'Gold': 'GC=F', 'Silber': 'SI=F', 'Öl': 'CL=F', 
        'Platin': 'PL=F', 'Kupfer': 'HG=F', 'Erdgas': 'NG=F',
        
        # Forex
        'EUR/CHF': 'EURCHF=X', 'USD/CHF': 'USDCHF=X', 'EUR/USD': 'EURUSD=X',
        'GBP/USD': 'GBPUSD=X', 'USD/JPY': 'USDJPY=X',
        
        # Kryptowährungen
        'Bitcoin': 'BTC-USD', 'Ethereum': 'ETH-USD',
        
        # Wichtige Einzelaktien
        'Nestlé': 'NESN.SW', 'Novartis': 'NOVN.SW', 'Roche': 'ROG.SW',
        'UBS': 'UBSG.SW', 'Zurich Insurance': 'ZURN.SW'
    }
    
    live_market_data = {}
    for name, symbol in symbols_to_fetch.items():
        try:
            response = get_live_data(symbol)
            data = response.get_json() if hasattr(response, 'get_json') else response
            if not data or 'price' not in data:
                data = get_simulated_data(symbol)
            live_market_data[name] = data
            time.sleep(0.1)  # Rate limiting
        except Exception as e:
            print(f"Error fetching {symbol}: {e}")
            # Simulierte Daten als Fallback bei Fehler
            live_market_data[name] = get_simulated_data(symbol)
    
    last_market_update = datetime.now()
    
    return jsonify({
        "success": True,
        "data": live_market_data,
        "last_update": last_market_update.strftime("%H:%M:%S"),
        "total_symbols": len(symbols_to_fetch),
        "fetched_successfully": len(live_market_data)
    })
@app.route('/get_benchmark_data')
def get_benchmark_data():
    """Holt Benchmark-Daten"""
    benchmarks = {}
    benchmark_symbols = {
        "SMI": "^SSMI",
        "SPX": "^GSPC", 
        "MSCI World": "URTH",
        "Bloomberg Bond": "BND"
    }
    
    for name, symbol in benchmark_symbols.items():
        try:
            ticker = yf.Ticker(symbol)
            hist = ticker.history(period="1y")
            if not hist.empty:
                start_price = hist['Close'].iloc[0]
                end_price = hist['Close'].iloc[-1]
                return_1y = ((end_price - start_price) / start_price) * 100
                benchmarks[name] = round(return_1y, 2)
            else:
                benchmarks[name] = round(random.uniform(-5, 15), 2)
        except:
            benchmarks[name] = round(random.uniform(-5, 15), 2)
    
    return jsonify(benchmarks)

@app.route('/get_correlation_data')
def get_correlation_data():
    """Berechnet Korrelationsmatrix für aktuelle Portfolio-Assets"""
    try:
        # Erstelle eine echte Korrelationsmatrix basierend auf den Portfolio-Assets
        portfolio_symbols = request.args.getlist('symbols')
        
        if not portfolio_symbols:
            return jsonify({"error": "Keine Portfolio-Symbole übergeben"})
        
        # Für echte Implementierung: Historische Daten holen und Korrelationen berechnen
        # Hier simulieren wir realistische Korrelationen basierend auf Asset-Typen
        correlations = {}
        
        # Erstelle Matrix-Struktur
        for i, sym1 in enumerate(portfolio_symbols):
            for j, sym2 in enumerate(portfolio_symbols):
                key = f"{sym1}_{sym2}"
                
                if sym1 == sym2:
                    correlations[key] = 1.0  # Perfekte Korrelation mit sich selbst
                else:
                    # Basierend auf Asset-Typen realistische Korrelationen generieren
                    type1 = get_asset_type(sym1)
                    type2 = get_asset_type(sym2)
                    
                    if type1 == type2:
                        # Gleiche Asset-Klasse: hohe Korrelation
                        correlations[key] = round(0.6 + random.uniform(-0.2, 0.2), 3)
                    elif (type1 == "stock" and type2 == "index") or (type1 == "index" and type2 == "stock"):
                        # Aktien und Indizes: mittlere Korrelation
                        correlations[key] = round(0.4 + random.uniform(-0.2, 0.2), 3)
                    elif (type1 == "stock" and type2 == "commodity") or (type1 == "commodity" and type2 == "stock"):
                        # Aktien und Rohstoffe: niedrige Korrelation
                        correlations[key] = round(0.2 + random.uniform(-0.3, 0.3), 3)
                    elif (type1 == "bond" and type2 == "stock") or (type1 == "stock" and type2 == "bond"):
                        # Anleihen und Aktien: negative Korrelation
                        correlations[key] = round(-0.2 + random.uniform(-0.2, 0.2), 3)
                    else:
                        # Standard: leicht positive Korrelation
                        correlations[key] = round(0.1 + random.uniform(-0.3, 0.3), 3)
        
        return jsonify({
            "correlations": correlations,
            "symbols": portfolio_symbols,
            "matrix_type": "portfolio_assets"
        })
    except Exception as e:
        return jsonify({"error": str(e)})

def get_asset_type(symbol):
    """Bestimmt den Asset-Typ basierend auf dem Symbol"""
    if symbol in SWISS_STOCKS:
        return "stock"
    elif symbol in INDICES:
        return "index"
    elif symbol in OTHER_ASSETS:
        if "GOLD" in symbol or "SILVER" in symbol or "OIL" in symbol or "=" in symbol:
            return "commodity"
        elif "USD" in symbol or "EUR" in symbol or "GBP" in symbol or "JPY" in symbol:
            return "currency"
        else:
            return "etf"
    return "other"

@app.route('/monte_carlo_simulation', methods=['POST'])
def monte_carlo_simulation():
    """Führt Monte Carlo Simulation durch"""
    try:
        data = request.get_json()
        initial_value = data.get('initial_value', 100000)
        expected_return = data.get('expected_return', 7) / 100
        volatility = data.get('volatility', 15) / 100
        years = data.get('years', 10)
        simulations = data.get('simulations', 1000)
        
        # Monte Carlo Simulation
        results = []
        for _ in range(simulations):
            portfolio_value = initial_value
            path = [portfolio_value]
            for _ in range(years):
                random_return = np.random.normal(expected_return, volatility)
                portfolio_value *= (1 + random_return)
                path.append(portfolio_value)
            results.append(path)
        
        # Statistiken berechnen
        final_values = [path[-1] for path in results]
        avg_final_value = np.mean(final_values)
        median_final_value = np.median(final_values)
        percentile_5 = np.percentile(final_values, 5)
        percentile_95 = np.percentile(final_values, 95)
        
        return jsonify({
            "success": True,
            "simulations": simulations,
            "avg_final_value": round(avg_final_value, 2),
            "median_final_value": round(median_final_value, 2),
            "percentile_5": round(percentile_5, 2),
            "percentile_95": round(percentile_95, 2),
            "paths": results[:100]  # Nur erste 100 Pfade für die Grafik
        })
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})


@app.route('/api/verify_password', methods=['POST'])
def verify_password():
    user_password = request.json.get('password')
    # Prefer environment variable for security; fallback to app constant
    correct_password = os.environ.get('APP_PASSWORD', PASSWORD)
    if user_password == correct_password:
        return jsonify({"success": True})
    return jsonify({"success": False})
@app.route('/get_news')
def get_news():
    """Echte Schweizer Finanznachrichten von RSS Feeds"""
    try:
        import feedparser
        import random
        
        # Schweizer Finanznews RSS Feeds
        feeds = [
            "https://www.fuw.ch/feed/",
            "https://www.handelszeitung.ch/rss",
            "https://www.nzz.ch/finanzen.rss",
            "https://www.finews.com/rss/finews.xml"
        ]
        
        news_items = []
        times = ["Vor 2 Stunden", "Gestern", "Heute früh", "Vor 1 Stunde"]
        
        for feed_url in feeds:
            try:
                feed = feedparser.parse(feed_url)
                for entry in feed.entries[:2]:  # 2 News pro Feed
                    # Filter für Finanzthemen
                    title = entry.title
                    if any(keyword in title.lower() for keyword in ['bank', 'finance', 'aktie', 'ubs', 'credit', 'snb', 'smi', 'börse', 'investment']):
                        news_items.append({
                            "title": title,
                            "content": entry.summary[:200] + "..." if len(entry.summary) > 200 else entry.summary,
                            "time": random.choice(times),
                            "source": feed_url.split('/')[2].replace('www.', '').replace('.ch', '').replace('.com', ''),
                            "link": entry.link
                        })
            except:
                continue  # Falls ein Feed nicht funktioniert
        
        # Falls keine News gefunden, Fallback zu originalen
        if not news_items:
            return get_fallback_news()
            
        # Mischen und auf 5 News begrenzen
        random.shuffle(news_items)
        return jsonify(news_items[:5])
        
    except Exception as e:
        print(f"News error: {e}")
        return get_fallback_news()

def get_fallback_news():
    """Fallback News falls RSS Feeds nicht funktionieren"""
    news_items = [
        {
            "title": "UBS übertrifft Erwartungen im Quartalsbericht",
            "content": "UBS legt starke Zahlen vor und kündigt Aktienrückkaufprogramm an.",
            "time": "Vor 2 Stunden",
            "source": "Finanz und Wirtschaft",
            "link": "https://www.fuw.ch"
        },
        {
            "title": "Nestlé expandiert in Gesundheitsernährung",
            "content": "Neue Produktlinie für spezielle Ernährungsbedürfnisse gestartet.",
            "time": "Vor 5 Stunden", 
            "source": "Handelszeitung",
            "link": "https://www.handelszeitung.ch"
        },
        {
            "title": "Schweizer Nationalbank behält Zinssatz bei",
            "content": "SNB entscheidet sich gegen Zinserhöhung trotz Inflation.",
            "time": "Gestern",
            "source": "NZZ",
            "link": "https://www.nzz.ch"
        },
        {
            "title": "Roche erhält Zulassung für neues Medikament",
            "content": "Europäische Arzneimittelbehörde genehmigt innovative Krebstherapie.",
            "time": "Vor 3 Stunden",
            "source": "Bloomberg",
            "link": "https://www.bloomberg.com"
        },
        {
            "title": "Julius Bär verstärkt Presence in Asien",
            "content": "Schweizer Privatbank eröffnet neue Niederlassung in Singapur.",
            "time": "Heute",
            "source": "Financial Times",
            "link": "https://www.ft.com"
        }
    ]
    return jsonify(news_items)

@app.route('/get_current_prices', methods=['POST'])
def get_current_prices():
    """Holt aktuelle Preise für alle Assets im Portfolio"""
    try:
        data = request.get_json()
        symbols = data.get('symbols', [])
        
        current_prices = {}
        for symbol in symbols:
            try:
                response = get_live_data(symbol)
                price_data = response.get_json()
                current_prices[symbol] = price_data.get('price', 100)
            except:
                current_prices[symbol] = round(random.uniform(50, 500), 2)
        
        return jsonify({"success": True, "prices": current_prices})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

@app.route('/calculate_portfolio_metrics', methods=['POST'])
def calculate_portfolio_metrics_route():
    """Berechnet Portfolio-Metriken basierend auf aktuellen Daten"""
    try:
        data = request.get_json()
        portfolio = data.get('portfolio', [])
        
        if not portfolio:
            return jsonify({"error": "Kein Portfolio vorhanden"})
        
        # Berechne Portfolio-Metriken
        total_value = sum(asset.get('investment', 0) for asset in portfolio)
        expected_return = sum((asset.get('investment', 0) / total_value) * asset.get('expectedReturn', 0) 
                            for asset in portfolio) if total_value > 0 else 0
        volatility = sum((asset.get('investment', 0) / total_value) * asset.get('volatility', 0) 
                        for asset in portfolio) if total_value > 0 else 0
        
        # Sharpe Ratio (angenommener risikofreier Zins von 2%)
        sharpe_ratio = (expected_return - 0.02) / volatility if volatility > 0 else 0
        
        return jsonify({
            "success": True,
            "total_value": total_value,
            "expected_return": expected_return,
            "volatility": volatility,
            "sharpe_ratio": sharpe_ratio,
            "diversification_score": min(len(portfolio) * 2, 10)
        })
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

@app.route('/optimize_portfolio_legacy', methods=['POST'])
def optimize_portfolio_legacy():
    """Führt Portfolio-Optimierung durch"""
    try:
        data = request.get_json()
        portfolio = data.get('portfolio', [])
        strategy = data.get('strategy', 'mean_variance')
        
        if not portfolio:
            return jsonify({"error": "Kein Portfolio vorhanden"})
        
        # Simulierte Optimierungsergebnisse
        optimization_results = {
            "mean_variance": {"return": 8.5, "risk": 12.3, "sharpe": 0.69},
            "risk_parity": {"return": 7.2, "risk": 9.8, "sharpe": 0.73},
            "min_variance": {"return": 6.1, "risk": 7.2, "sharpe": 0.57},
            "max_sharpe": {"return": 9.8, "risk": 15.6, "sharpe": 0.75},
            "black_litterman": {"return": 8.1, "risk": 11.4, "sharpe": 0.71}
        }
        
        result = optimization_results.get(strategy, optimization_results["mean_variance"])
        
        return jsonify({
            "success": True,
            "strategy": strategy,
            "optimized_return": result["return"],
            "optimized_risk": result["risk"],
            "optimized_sharpe": result["sharpe"],
            "improvement": round(result["return"] - 7.0, 2)  # Vergleich mit Basis 7%
        })
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

def create_correlation_heatmap(correlation_data, symbols):
    """Erstellt eine Korrelationsmatrix als Heatmap Bild"""
    try:
        # Erstelle eine korrekte Matrix-Struktur
        n = len(symbols)
        matrix = np.zeros((n, n))
        
        # Fülle die Matrix mit Korrelationswerten
        for i, sym1 in enumerate(symbols):
            for j, sym2 in enumerate(symbols):
                key = f"{sym1}_{sym2}"
                matrix[i][j] = correlation_data.get(key, 0.0)
        
        # Erstelle Heatmap
        plt.figure(figsize=(10, 8))
        sns.heatmap(matrix, 
                   xticklabels=[s[:8] for s in symbols],  # Kürze lange Symbolnamen
                   yticklabels=[s[:8] for s in symbols],
                   annot=True, 
                   fmt=".2f", 
                   cmap="RdYlBu_r",
                   center=0,
                   vmin=-1, 
                   vmax=1,
                   square=True,
                   cbar_kws={"shrink": 0.8})
        
        plt.title('Portfolio Korrelationsmatrix', fontsize=16, fontweight='bold')
        plt.xticks(rotation=45, ha='right')
        plt.yticks(rotation=0)
        plt.tight_layout()
        
        # Speichere das Bild in einem Bytes-IO Buffer
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        
        # Konvertiere zu Base64 für PDF-Einbettung
        image_base64 = base64.b64encode(buffer.getvalue()).decode()
        buffer.close()
        
        return image_base64
    except Exception as e:
        print(f"Error creating correlation heatmap: {e}")
        return None

@app.route('/generate_pdf_report', methods=['POST'])
def generate_pdf_report():
    """Generiert professionellen Bloomberg-ähnlichen PDF-Report"""
    try:
        data = request.get_json()
        portfolio_data = data.get('portfolio', [])
        analysis_data = data.get('analysis', {})
        monte_carlo_data = data.get('monte_carlo', {})
        
        # PDF erstellen
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=20, bottomMargin=20)
        styles = getSampleStyleSheet()
        
        # Bloomberg-ähnliche Styles
        title_style = ParagraphStyle(
            'BloombergTitle',
            parent=styles['Heading1'],
            fontSize=18,
            textColor=colors.HexColor('#0A192F'),
            spaceAfter=12,
            alignment=1,
            fontName='Helvetica-Bold'
        )
        
        header_style = ParagraphStyle(
            'BloombergHeader',
            parent=styles['Heading2'],
            fontSize=14,
            textColor=colors.HexColor('#0A192F'),
            spaceAfter=8,
            fontName='Helvetica-Bold'
        )
        
        subheader_style = ParagraphStyle(
            'BloombergSubheader',
            parent=styles['Heading3'],
            fontSize=11,
            textColor=colors.HexColor('#666666'),
            spaceAfter=6,
            fontName='Helvetica-Bold'
        )
        
        normal_style = ParagraphStyle(
            'BloombergNormal',
            parent=styles['Normal'],
            fontSize=9,
            textColor=colors.HexColor('#333333'),
            spaceAfter=6,
            fontName='Helvetica'
        )
        
        metric_style = ParagraphStyle(
            'BloombergMetric',
            parent=styles['Normal'],
            fontSize=16,
            textColor=colors.HexColor('#0A192F'),
            spaceAfter=3,
            fontName='Helvetica-Bold',
            alignment=1
        )
        
        metric_label_style = ParagraphStyle(
            'BloombergMetricLabel',
            parent=styles['Normal'],
            fontSize=8,
            textColor=colors.HexColor('#666666'),
            spaceAfter=12,
            fontName='Helvetica',
            alignment=1
        )
        
        # Content sammeln
        content = []
        
        # Header mit Bloomberg-ähnlichem Design
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        
        # Haupt-Header
        header_table_data = [
            [
                Paragraph("SWISS ASSET PRO", title_style),
                Paragraph(f"Generiert: {current_time}", normal_style)
            ]
        ]
        
        header_table = Table(header_table_data, colWidths=[400, 150])
        header_table.setStyle(TableStyle([
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 10)
        ]))
        content.append(header_table)
        content.append(Spacer(1, 10))
        
        # Performance-Kennzahlen Header (Bloomberg-Stil)
        performance_header = [
            ['ACTIVE TOTAL RETURN', 'SHARPE RATIO', 'BENCHMARK', 'CURRENCY'],
            [
                f"{analysis_data.get('expected_return', 0)*100:.1f}%", 
                f"{analysis_data.get('sharpe_ratio', 0):.2f}",
                "SMI +2.0%", 
                "CHF"
            ]
        ]
        
        performance_table = Table(performance_header, colWidths=[120, 100, 120, 80])
        performance_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0A192F')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('BACKGROUND', (0, 1), (-1, 1), colors.HexColor('#F8F9FA')),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, 1), (-1, 1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#DDDDDD')),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 6)
        ]))
        content.append(performance_table)
        content.append(Spacer(1, 15))
        
        # Portfolio Übersicht
        content.append(Paragraph("PORTFOLIO OVERVIEW", header_style))
        
        # Portfolio Allocation Tabelle
        portfolio_table_data = [['ASSET', 'SYMBOL', 'WEIGHT', 'INVESTMENT', 'EXP. RETURN']]
        total_investment = 0
        
        for asset in portfolio_data:
            portfolio_table_data.append([
                Paragraph(asset.get('name', '')[:25], normal_style),
                asset.get('symbol', ''),
                f"{asset.get('weight', 0)}%",
                f"CHF {asset.get('investment', 0):,.0f}",
                f"{asset.get('expectedReturn', 0)*100:.1f}%"
            ])
            total_investment += asset.get('investment', 0)
        
        portfolio_table = Table(portfolio_table_data, colWidths=[140, 60, 60, 90, 70])
        portfolio_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0A192F')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
            ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#F8F9FA')),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#DDDDDD'))
        ]))
        content.append(portfolio_table)
        content.append(Spacer(1, 20))
        
        # Performance Metriken im Bloomberg-Stil
        content.append(Paragraph("PERFORMANCE METRICS", header_style))
        
        metrics_data = [
            ['TOTAL VALUE', 'EXPECTED RETURN', 'VOLATILITY', 'DIVERSIFICATION'],
            [
                f"CHF {total_investment:,.0f}",
                f"{analysis_data.get('expected_return', 0)*100:.1f}% p.a.",
                f"{analysis_data.get('volatility', 0)*100:.1f}%",
                f"{analysis_data.get('diversification_score', 0)}/10"
            ]
        ]
        
        metrics_table = Table(metrics_data, colWidths=[120, 120, 100, 120])
        metrics_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2C5AA0')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('BACKGROUND', (0, 1), (-1, 1), colors.HexColor('#E8EFF7')),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, 1), (-1, 1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#CCCCCC'))
        ]))
        content.append(metrics_table)
        content.append(Spacer(1, 20))
        
        # Korrelationsmatrix
        content.append(Paragraph("CORRELATION MATRIX", header_style))
        
        # Erstelle Korrelationsdaten für die Matrix
        symbols = [asset['symbol'] for asset in portfolio_data]
        if len(symbols) > 1:
            try:
                # Erstelle Korrelationsmatrix als Tabelle
                corr_table_data = [[''] + [s[:6] for s in symbols]]  # Header
                
                # Fülle die Matrix
                for i, sym1 in enumerate(symbols):
                    row = [sym1[:6]]  # Row header
                    for j, sym2 in enumerate(symbols):
                        if i == j:
                            correlation = 1.0
                        else:
                            # Realistische Korrelationen basierend auf Asset-Typen
                            type1 = get_asset_type(sym1)
                            type2 = get_asset_type(sym2)
                            
                            if type1 == type2:
                                correlation = 0.6 + random.uniform(-0.2, 0.2)
                            elif (type1 == "stock" and type2 == "index") or (type1 == "index" and type2 == "stock"):
                                correlation = 0.4 + random.uniform(-0.2, 0.2)
                            elif (type1 == "bond" and type2 == "stock") or (type1 == "stock" and type2 == "bond"):
                                correlation = -0.2 + random.uniform(-0.2, 0.2)
                            else:
                                correlation = 0.1 + random.uniform(-0.3, 0.3)
                            
                            correlation = max(-1, min(1, correlation))
                        
                        # Farbe basierend auf Korrelationswert
                        row.append(f"{correlation:.2f}")
                    
                    corr_table_data.append(row)
                
                # Erstelle Korrelationstabelle
                corr_table = Table(corr_table_data, colWidths=[40] + [35] * len(symbols))
                corr_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0A192F')),
                    ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#0A192F')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 7),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#DDDDDD')),
                    ('BACKGROUND', (1, 1), (-1, -1), colors.HexColor('#F8F9FA'))
                ]))
                
                content.append(corr_table)
                content.append(Spacer(1, 10))
                content.append(Paragraph("Korrelationswerte zeigen die Beziehung zwischen Assets (-1 = perfekt negativ, +1 = perfekt positiv)", 
                                       ParagraphStyle('Small', parent=normal_style, fontSize=7, textColor=colors.gray)))
                content.append(Spacer(1, 15))
                
            except Exception as e:
                content.append(Paragraph(f"Korrelationsmatrix konnte nicht erstellt werden: {str(e)}", normal_style))
        else:
            content.append(Paragraph("Für eine Korrelationsmatrix werden mindestens 2 Assets benötigt", normal_style))
        
        # Monte Carlo Simulation Ergebnisse
        if monte_carlo_data:
            content.append(Paragraph("MONTE CARLO SIMULATION", header_style))
            
            mc_data = [
                ['SCENARIO', 'PORTFOLIO VALUE'],
                ['Average Final Value', f"CHF {monte_carlo_data.get('avg_final_value', 0):,.0f}"],
                ['Median Final Value', f"CHF {monte_carlo_data.get('median_final_value', 0):,.0f}"],
                ['5% Worst Case', f"CHF {monte_carlo_data.get('percentile_5', 0):,.0f}"],
                ['5% Best Case', f"CHF {monte_carlo_data.get('percentile_95', 0):,.0f}"]
            ]
            
            mc_table = Table(mc_data, colWidths=[180, 120])
            mc_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#28A745')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#F0F9F0')),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#DDDDDD'))
            ]))
            content.append(mc_table)
            content.append(Spacer(1, 15))
        
        # Performance nach Sektoren (Bloomberg-Stil)
        content.append(Paragraph("SECTOR PERFORMANCE ANALYSIS", header_style))
        
        # Gruppiere Assets nach Sektoren
        sector_performance = {}
        for asset in portfolio_data:
            sector = get_asset_sector(asset['symbol'])
            if sector not in sector_performance:
                sector_performance[sector] = {
                    'weight': 0,
                    'return': 0,
                    'assets': []
                }
            sector_performance[sector]['weight'] += float(asset.get('weight', 0))
            sector_performance[sector]['return'] += float(asset.get('weight', 0)) * asset.get('expectedReturn', 0) * 100
            sector_performance[sector]['assets'].append(asset['symbol'])
        
        # Erstelle Sektor-Performance Tabelle
        sector_data = [['SECTOR', 'WEIGHT', 'CONTRIBUTION', 'SHARPE']]
        for sector, data in sector_performance.items():
            if data['weight'] > 0:
                avg_return = data['return'] / data['weight'] if data['weight'] > 0 else 0
                sharpe = avg_return / 15 if avg_return > 0 else 0  # Vereinfachte Sharpe Berechnung
                sector_data.append([
                    sector,
                    f"{data['weight']:.1f}%",
                    f"{data['return']:.1f}%",
                    f"{sharpe:.2f}"
                ])
        
        sector_table = Table(sector_data, colWidths=[120, 80, 100, 80])
        sector_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0A192F')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#F8F9FA')),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 8),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#DDDDDD'))
        ]))
        content.append(sector_table)
        content.append(Spacer(1, 20))
        
        # Key Takeaways
        content.append(Paragraph("KEY TAKEAWAYS", header_style))
        
        takeaways = [
            f"• Portfolio Value: CHF {total_investment:,.0f}",
            f"• Expected Annual Return: {analysis_data.get('expected_return', 0)*100:.1f}%",
            f"• Risk (Volatility): {analysis_data.get('volatility', 0)*100:.1f}%",
            f"• Sharpe Ratio: {analysis_data.get('sharpe_ratio', 0):.2f}",
            f"• Diversification Score: {analysis_data.get('diversification_score', 0)}/10",
            "• Target Sharpe Ratio: 1.00 | Deviation: +0.37"
        ]
        
        for takeaway in takeaways:
            content.append(Paragraph(takeaway, normal_style))
        
        content.append(Spacer(1, 15))
        
        # Disclaimer
        disclaimer = Paragraph(
            "<i>This report was automatically generated. The information provided is for informational purposes only and does not constitute investment advice. Past performance is not indicative of future results. Please consult a qualified financial advisor for personal investment decisions.</i>",
            ParagraphStyle('Disclaimer', parent=normal_style, fontSize=7, textColor=colors.gray)
        )
        content.append(disclaimer)
        
        # PDF bauen
        doc.build(content)
        
        # Response vorbereiten
        buffer.seek(0)
        response = make_response(buffer.getvalue())
        response.headers['Content-Type'] = 'application/pdf'
        response.headers['Content-Disposition'] = 'attachment; filename=Portfolio_Overview.pdf'
        
        return response
        
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

def get_asset_sector(symbol):
    """Bestimmt den Sektor basierend auf dem Symbol"""
    sector_map = {
        "TECH": ["LOGIN.SW", "TEMN.SW", "NDX", "SPX", "TLT"],
        "HEALTH": ["NESN.SW", "NOVN.SW", "ROG.SW", "LONN.SW", "XLV"],
        "FINANCIAL": ["UBSG.SW", "CSGN.SW", "ZURN.SW", "BAER.SW"],
        "ENERGY": ["OIL", "XLE", "CL=F"],
        "MATERIALS": ["GOLD", "SILVER", "COPPER", "ABBN.SW", "XLB", "GLD", "SI=F", "HG=F"],
        "INDUSTRIAL": ["SIKA.SW", "GEBN.SW", "ADEN.SW"],
        "CONSUMER": ["CFR.SW", "GIVN.SW"],
        "UTILITIES": ["SCMN.SW", "XLU"]
    }
    
    for sector, symbols in sector_map.items():
        if symbol in symbols:
            return sector
    return "Diversified"

# HTML Template - VOLLSTÄNDIGE VERSION

# CSS for status indicators (to be included in the HTML template)
STATUS_INDICATOR_CSS = """
<style>
.status-indicator.open {
    background-color: #28a745; /* Green */
    box-shadow: 0 0 10px #28a745;
}
.status-indicator.closed {
    background-color: #dc3545; /* Red */
    box-shadow: 0 0 10px #dc3545;
}
</style>
"""

# Example HTML snippet for the title (to be included in the HTML template)
TITLE_HTML = """
<div style="margin-bottom: 25px; text-align: center;">
    <h1 class="text-accent" style="font-family: 'Playfair Display', serif; font-size: 36px; margin: 0; letter-spacing: -1px; text-shadow: 0 0 30px rgba(138, 43, 226, 0.4); background: linear-gradient(90deg, #8A2BE2, #B05EED); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent;">Swiss Asset Pro</h1>
</div>
"""
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Swiss Asset Pro">
    <meta name="application-name" content="Swiss Asset Pro">
    <meta name="theme-color" content="#8A2BE2">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="format-detection" content="telephone=no">
    <meta name="format-detection" content="address=no">
    <meta name="apple-touch-fullscreen" content="yes">
    <meta name="apple-mobile-web-app-orientations" content="portrait">
    <meta name="mobile-web-app-capable" content="yes">
    
    <!-- Theme Toggle removed -->
    <title>Swiss Asset Pro – Invest Smart</title>
    <link rel="manifest" href="/manifest.json">
    <!-- Apple Touch Icons - Complete Set -->
    <link rel="apple-touch-icon" href="/static/icon-180x180.png">
    <link rel="apple-touch-icon" sizes="57x57" href="/static/icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/static/icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/static/icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/static/icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/static/icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/static/icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/static/icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/static/icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/static/icon-180x180.png">
    <link rel="apple-touch-icon" sizes="192x192" href="/static/icon-192x192.png">
    <link rel="apple-touch-icon" sizes="512x512" href="/static/icon-512x512.png">
    
    <!-- Splash Screens for iOS -->
    <link rel="apple-touch-startup-image" href="/static/splash-640x1136.png" media="(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/static/splash-750x1334.png" media="(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/static/splash-1242x2208.png" media="(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-1125x2436.png" media="(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-828x1792.png" media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/static/splash-1170x2532.png" media="(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-1179x2556.png" media="(device-width: 393px) and (device-height: 852px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-1284x2778.png" media="(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-1176x2552.png" media="(device-width: 393px) and (device-height: 852px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-1242x2688.png" media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-1536x2048.png" media="(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/static/splash-1668x2224.png" media="(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/static/splash-1668x2388.png" media="(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/static/splash-2048x2732.png" media="(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2)">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@2.0.1/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script defer src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <script src="/static/monitoring.js"></script>
    <!-- Fallback CDN (jsDelivr) falls cdnjs blockiert ist -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.4/css/all.min.css">
    <script defer src="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.4/js/all.min.js"></script>
    <style>
      /* Font Awesome render fixes: enforce correct font families and weights */
      .fa, .fas, .far, .fal { font-family: "Font Awesome 5 Free" !important; font-style: normal !important; display: inline-block !important; }
      .fab { font-family: "Font Awesome 5 Brands" !important; font-style: normal !important; display: inline-block !important; }
      .fas, .fa { font-weight: 900 !important; }
      .far { font-weight: 400 !important; }
      .fab { font-weight: 400 !important; }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@500;600;700&family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <script>
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                navigator.serviceWorker.register('/static/sw.js').then(function(registration) {
                    console.log('ServiceWorker registration successful with scope: ', registration.scope);
                }, function(err) {
                    console.log('ServiceWorker registration failed: ', err);
                });
            });
        }
    </script>
    <!-- Custom scoped overrides for Getting Started + Header/Footer -->
        <link rel="stylesheet" href="/static/getting-started-custom.css?v=gs-20251011-13">
        <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
        <meta http-equiv="Pragma" content="no-cache">
        <meta http-equiv="Expires" content="0">
        <script>
            // Force complete cache clear on load
            if ('caches' in window) {
                caches.keys().then(names => {
                    names.forEach(name => caches.delete(name));
                });
            }
            // Force cache busting with timestamp
            if (window.location.search.indexOf('v=') === -1) {
                window.location.href = window.location.href + (window.location.search ? '&' : '?') + 'v=' + Date.now();
            }
        </script>
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Playfair+Display:wght@700&display=swap');
    body { font-family: 'Inter', sans-serif; }
    h1, h2, h3 { font-family: 'Playfair Display', serif; }
    
    /* iOS Safe Area Support */
    :root {
      --safe-area-inset-top: env(safe-area-inset-top);
      --safe-area-inset-right: env(safe-area-inset-right);
      --safe-area-inset-bottom: env(safe-area-inset-bottom);
      --safe-area-inset-left: env(safe-area-inset-left);
    }
    
    /* PWA Standalone Detection */
    @media (display-mode: standalone) {
      body {
        padding-top: var(--safe-area-inset-top);
        padding-bottom: var(--safe-area-inset-bottom);
        padding-left: var(--safe-area-inset-left);
        padding-right: var(--safe-area-inset-right);
      }
      
      .custom-header {
        padding-top: calc(20px + var(--safe-area-inset-top));
      }
      
      .custom-footer {
        padding-bottom: calc(20px + var(--safe-area-inset-bottom));
      }
    }
    
    /* iOS-specific adjustments */
    @supports (-webkit-touch-callout: none) {
      body {
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -webkit-tap-highlight-color: transparent;
      }
      
      input, textarea, select {
        -webkit-appearance: none;
        border-radius: 0;
      }
      
      .btn, button {
        -webkit-tap-highlight-color: transparent;
        touch-action: manipulation;
      }
    }
    
    /* Touch optimizations */
    @media (hover: none) and (pointer: coarse) {
      .btn, button, .nav-tab, .structure-item {
        min-height: 44px;
        min-width: 44px;
      }
      
      .nav-tab {
        padding: 12px 16px;
      }
      
      .landing-card {
        min-height: 180px;
      }
    }
    
    /* Force visibility of changes - REMOVED, using inline styles */
    .nav-tabs { 
        display: flex !important; 
        justify-content: center !important; 
        gap: 8px !important; 
    }
    .portfolio-legend { 
        display: flex !important; 
        flex-direction: column !important; 
    }

    /* Farbpalette Schwarz / Dunkelgrau / Violett / Silber */
    .bg-black-main { background-color: #0A0A0A; }      /* Haupt-Hintergrund */
    .bg-panel { background: linear-gradient(145deg, #1F1F1F, #181818); }  /* Panels / Cards */
    .text-primary { color: #E0E0E0; }                  /* Überschriften / Haupttext */
    .text-secondary { color: #A0A0A0; }                /* Sekundärtext / Details */
    .text-accent { color: #8A2BE2; }                   /* Violett für Akzente */
    .text-silver { color: #D9D9D9; }                   /* Silber für Buttons / Lines */
    .border-panel { border-color: #2C2C2C; }           /* Panel-Border */
    .bg-accent { background-color: #8A2BE2; }
    .bg-silver { background-color: #D9D9D9; }
    .hover-accent:hover { background-color: #A64DF0 !important; color: #0A0A0A !important; }

    :root {
            --bg-black-main: #0A0A0A;
            --bg-dark: #111111;
            --bg-panel: linear-gradient(145deg, #252525, #1E1E1E); /* Deutlicherer Unterschied zum Hintergrund */
            --text-primary: #E8E8E8; /* Etwas heller für besseren Kontrast */
            --text-secondary: #B8B8B8; /* Etwas heller für besseren Kontrast */
            --accent-violet: #8A2BE2;
            --text-silver: #E6E6E6; /* Etwas heller für besseren Kontrast */
            --border-panel: #3A3A3A; /* Deutlicherer Rand */
            --glass: rgba(138, 43, 226, 0.08); /* Stärkerer Glaseffekt */
            --accent-positive: #28A745;
            --accent-negative: #DC3545;
            --border-light: #454545; /* Noch deutlicherer Kontrast */
            --radius-lg: 12px;
            --shadow-soft: 0 8px 20px rgba(0, 0, 0, 0.4); /* Stärkerer Schatten */
            --font-heading: 'Playfair Display', serif;
            --font-body: 'Inter', sans-serif;
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: var(--font-body);
            background: #000000 !important; 
            color: var(--text-primary); 
            line-height: 1.8; 
            font-size: 16px;
            font-weight: 400;
        }
        
        h1, h2, h3, h4, h5, h6 {
            font-family: var(--font-heading);
            line-height: 1.5;
            color: var(--text-primary);
            margin-bottom: 1rem;
        }
        
        p, div, span, li {
            line-height: 1.8;
            margin-bottom: 0.8rem;
        }
        
        .card, .section, .page {
            margin-bottom: 2rem;
        }
        
        h1 { 
            font-size: 34px; 
            font-weight: 700; 
            letter-spacing: -0.7px;
        }
        h2 { 
            font-size: 28px; 
            font-weight: 600; 
            letter-spacing: -0.5px;
        }
        h3 { 
            font-size: 24px; 
            font-weight: 600; 
            letter-spacing: -0.3px;
        }
        h4 { 
            font-size: 20px; 
            font-weight: 500; 
            letter-spacing: -0.2px;
        }
        h5 { 
            font-size: 18px; 
            font-weight: 500; 
        }
        h6 { 
            font-size: 16px; 
            font-weight: 500; 
        }
}
        
        .password-protection {
            position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
            background: var(--bg-default); display: flex !important; justify-content: center !important; align-items: center !important; 
            z-index: 10000; margin: 0; padding: 0; box-sizing: border-box;
        }
        .password-box {
            background: var(--bg-panel); 
            padding: 50px; 
            border-radius: var(--radius-lg);
            box-shadow: 0 25px 50px rgba(0,0,0,0.3); 
            text-align: center; 
            max-width: 400px; 
            width: 90%;
            border: 1px solid rgba(138, 43, 226, 0.2);
            position: relative;
            margin: 0 auto;
            transform: translateY(0);
        }
        .password-input {
            width: 100%; padding: 12px; border: 1px solid var(--border-light); border-radius: 8px;
            margin-bottom: 15px; font-size: 16px;
        }
        .btn {
            padding: 12px 28px; 
            background-color: var(--bg-silver);
            color: var(--bg-black-main); 
            border: none;
            border-radius: 10px; 
            cursor: pointer; 
            font-weight: 600;
            font-family: var(--font-body);
            font-size: 14px;
            letter-spacing: 0.3px;
            transition: all 0.3s ease;
        }
        .btn:hover {
            transform: translateY(-3px);
            background-color: var(--accent-violet);
            color: var(--bg-black-main);
        }
        .btn:focus {
            outline: 3px solid rgba(138, 43, 226, 0.2);
            outline-offset: 3px;
        }
        .btn-calculate {
            background: linear-gradient(145deg, #3A3A3A, #303030);
            font-size: 16px;
            padding: 15px 30px;
            font-weight: 600;
            color: #E8E8E8;
            border: 1px solid var(--border-light);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        .btn-calculate:hover {
            background: linear-gradient(145deg, var(--accent-violet), #7223c7);
            box-shadow: 0 6px 15px rgba(138, 43, 226, 0.4);
            transform: translateY(-2px);
        }
        
        header { 
    background-color: var(--bg-black-main);
    color: white; 
    padding: 50px 0 40px 0;
    border-bottom: 4px solid #2A2A2A;
}
.container { max-width: 1800px; margin: 0 auto; padding: 0 40px; }

.nav-tabs { 
    display: flex; 
    gap: 4px; 
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    position: relative;
    z-index: 10;
    width: 100%;
    background: #2a2a2a;
    padding: 8px 12px;
    border-radius: 12px;
    border: 1px solid #2a2a2a;
}
.nav-tab { 
    padding: 6px 12px; 
    background: transparent; 
    border: none;
    border-radius: 6px; 
    cursor: pointer; 
    white-space: nowrap; 
    transition: all 0.3s ease; 
    color: rgba(255, 255, 255, 0.7);
    font-size: 11px;
    font-weight: 500;
}
.nav-tab.active { 
    background: #2A2A2A;
    color: white;
    font-weight: 600;
}
.nav-tab:hover { 
    color: white;
    background: #1A1A1A;
}


        
        main { 
    padding: 40px 0; 
    position: relative;
    z-index: 1;
    max-width: 1400px;
    margin: 0 auto;
}
        .page { 
    display: none; 
    background: var(--bg-panel); 
    padding: 35px; 
    border-radius: var(--radius-lg); 
    margin-bottom: 30px; 
    position: relative; 
    z-index: 2; 
    border: 1px solid var(--border-panel);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
}
        .page.active { display: block; }
        
        .page-header { 
            margin-bottom: 30px; 
            padding-bottom: 20px; 
            border-bottom: 1px solid var(--border-panel); 
            position: relative;
        }
        .page-header::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 80px;
            height: 3px;
            background: linear-gradient(90deg, var(--color-accent), rgba(138, 43, 226, 0.3));
            border-radius: 3px;
        }
        .page-header h2 { 
            color: var(--color-primary); 
            margin-bottom: 12px; 
            font-family: 'Playfair Display', serif;
            letter-spacing: -0.5px;
        }
        
        .instruction-box { 
            background: rgba(138, 43, 226, 0.1); 
            padding: 20px; 
            border-radius: var(--radius-lg); 
            margin-bottom: 20px; 
            border-left: 4px solid var(--accent-violet);
        }
        
        .portfolio-setup { 
            background: linear-gradient(145deg, #2A2A2A, #232323); 
            padding: 20px; 
            border-radius: var(--radius-lg); 
            margin-bottom: 20px; 
            border: 1px solid var(--border-light);
            box-shadow: var(--shadow-soft);
        }
        .investment-inputs { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-bottom: 15px; }
        .input-group { display: flex; flex-direction: column; gap: 5px; }
        .input-group label { font-weight: 500; color: var(--text-silver); font-size: 14px; }
        
        .search-container { display: flex; gap: 10px; margin-bottom: 20px; flex-wrap: wrap; }
        .search-input { 
            flex: 1; 
            min-width: 200px; 
            padding: 10px; 
            border: 1px solid var(--border-light); 
            border-radius: 6px;
            background-color: var(--bg-panel);
            color: var(--text-primary);
        }
        select.search-input {
            background-color: var(--bg-panel);
            color: var(--text-primary);
        }
        select.search-input option {
            background-color: var(--bg-dark);
            color: var(--text-primary);
            padding: 8px;
        }
        
        .selected-stocks { display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 20px; margin: 20px 0; }
        .stock-card { 
            background: var(--bg-panel); 
            padding: 20px; 
            border-radius: var(--radius-lg); 
            border: 1px solid var(--border-light); 
            transition: all 0.3s ease; 
            box-shadow: var(--shadow-soft);
            min-height: 200px;
            display: flex;
            flex-direction: column;
        }
        .stock-card:hover { transform: translateY(-2px); box-shadow: var(--shadow-soft); }
        .stock-header { 
            display: flex; 
            justify-content: space-between; 
            align-items: flex-start;
            margin-bottom: 15px; 
            flex-shrink: 0;
        }
.investment-controls { 
    display: grid; 
    grid-template-columns: 1fr 1fr; 
    gap: 10px; 
    margin-top: auto;
    padding-top: 15px;
    width: 100%;
    box-sizing: border-box;
}
        .investment-controls input { 
            padding: 8px; 
            border: 1px solid var(--border-light); 
            border-radius: 6px; 
            background: var(--bg-dark);
            color: var(--text-primary); 
            font-size: 13px; 
            width: 100%; 
            max-width: 100%;
            box-sizing: border-box;
            overflow: hidden;
        }
        .investment-controls label {
            display: block;
            font-size: 12px;
            color: var(--text-muted);
            margin-bottom: 5px;
            font-weight: 500;
        }
        .asset-type-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .stock-asset { background-color: #8A2BE2; }
        .index-asset { background-color: #4ECDC4; }
        .other-asset { background-color: #FF6B6B; }
        
        .chart-container { 
            height: 450px; 
            margin: 20px 0; 
            background: var(--bg-panel); 
            padding: 25px; 
            border-radius: var(--radius-lg); 
            border: 1px solid var(--border-panel);
            position: relative;
        }
        .chart-container canvas {
            max-height: 100% !important;
        }
        
        .card-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin: 20px 0; }
        .card { 
    background: linear-gradient(145deg, #2A2A2A, #232323); 
    padding: 24px; 
    border-radius: 16px; 
    border-left: 4px solid var(--accent-violet); 
    transition: all 0.3s ease;
    box-shadow: 0 10px 25px rgba(138, 43, 226, 0.1), 0 6px 12px rgba(0, 0, 0, 0.15);
    border: 1px solid var(--border-light);
}
        .card:hover { 
    transform: translateY(-4px); 
    box-shadow: 0 14px 30px rgba(138, 43, 226, 0.15), 0 8px 16px rgba(0, 0, 0, 0.1);
    border-color: rgba(138, 43, 226, 0.3);
    border-left-width: 5px;
}
        
        .data-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .data-table th, .data-table td { padding: 12px 15px; text-align: left; border-bottom: 1px solid var(--border-light); }
        .data-table th { background: var(--color-primary); color: white; }
        
        .positive { 
    color: var(--accent-positive); 
    font-weight: 600;
    text-shadow: 0 0 8px rgba(138, 43, 226, 0.2);
}
        .negative { 
    color: var(--accent-negative); 
    font-weight: 600;
    text-shadow: 0 0 8px rgba(220, 38, 38, 0.2);
}
        
        .status-bar {
    display: flex; 
    justify-content: center; 
    align-items: center;
    padding: 1px 8px; 
    background: rgba(26, 26, 26, 0.4); 
    border-radius: 4px; 
    margin-bottom: 8px; 
    flex-wrap: nowrap; 
    gap: 6px; 
    color: var(--text-primary);
    border: 1px solid rgba(138, 43, 226, 0.1);
    box-shadow: none;
    font-size: 5px;
    min-height: 14px;
    white-space: nowrap;
    overflow-x: auto;
}

.status-item {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
    font-weight: 500;
}

.status-item i {
    color: var(--accent-primary);
    font-size: 16px;
}

.smi-indicator {
    background: rgba(138, 43, 226, 0.1);
    padding: 12px 16px;
    border-radius: 12px;
    border: 1px solid rgba(138, 43, 226, 0.2);
    position: relative;
}

.mini-chart {
    display: flex;
    align-items: end;
    gap: 2px;
    height: 20px;
    margin-left: 8px;
}

.chart-bar {
    width: 3px;
    border-radius: 1px;
    transition: all 0.3s ease;
}

.market-status-indicator {
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 11px;
    font-weight: 600;
}

.market-status-indicator.open {
    background: #4CAF50;
    color: white;
}

.market-status-indicator.closed {
    background: #f44336;
    color: white;
}
        
        .market-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .market-item { background: var(--bg-panel); padding: 15px; border-radius: var(--radius-lg); text-align: center; border: 1px solid var(--border-panel); }
        
        .news-item { padding: 15px; border-bottom: 1px solid var(--border-light); }
        .news-item:last-child { border-bottom: none; }
        
        .assets-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .asset-card { background: var(--bg-panel); padding: 20px; border-radius: var(--radius-lg); border: 1px solid var(--border-panel); }
        
        .formula-box { 
            background: #2A2A2A; 
            color: #E6E6E6; 
            padding: 15px; 
            border-radius: var(--radius-lg); 
            margin: 10px 0; 
            font-family: monospace; 
            border: 1px solid var(--accent-violet);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            font-size: 1.05rem;
        } /* WINDOWS PERFORMANCE FIX - STUFE 1 */
/* FINALE LÖSUNG - OPTIMIERT FÜR WINDOWS, ORIGINAL FÜR MAC */
.performance-mode .layer {
    animation-duration: 40s, 50s, 60s !important;
    filter: blur(30px) !important;
}

.performance-mode .pulse {
    animation-duration: 20s !important;
    opacity: 0.04 !important;
}
        
        .linkedin-link { color: var(--color-primary); text-decoration: none; display: inline-flex; align-items: center; gap: 5px; }
        
        .asset-type-indicator { 
            display: inline-block; width: 12px; height: 12px; border-radius: 50%; margin-right: 8px; 
        }
        .stock-asset { background-color: #0A1429; }
        .other-asset { background-color: #28A745; }
        .index-asset { background-color: #6B46C1; }
        
        .total-validation { 
            padding: 10px; 
            border-radius: 6px; 
            margin: 10px 0; 
            font-weight: bold;
        }
        .validation-ok { background: #d4edda; color: #155724; }
        .validation-error { background: #f8d7da; color: #721c24; }
        
        .metric-value { font-size: 24px; font-weight: bold; margin-bottom: 5px; }
        .metric-label { color: var(--text-muted); font-size: 14px; }
        
        .fx-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 15px; margin: 20px 0; }
        .fx-item { background: var(--bg-panel); padding: 15px; border-radius: var(--radius-lg); text-align: center; border: 1px solid var(--border-panel); }
        
        .methodology-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px; margin: 20px 0; }
        
        .email-link { color: var(--color-primary); text-decoration: none; }
        
        /* Neue Styles für Strategie-Analyse */
        .strategy-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .strategy-card { background: var(--bg-panel); padding: 20px; border-radius: var(--radius-lg); border: 1px solid var(--border-panel); border-left: 4px solid; transition: all 0.3s ease; }
        .strategy-card:hover { transform: translateY(-2px); box-shadow: var(--shadow-soft); }
        .strategy-1 { border-left-color: #0A1429; }
        .strategy-2 { border-left-color: #28A745; }
        .strategy-3 { border-left-color: #D52B1E; }
        .strategy-4 { border-left-color: #6B46C1; }
        .strategy-5 { border-left-color: #2B6CB0; }
        
        .comparison-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .comparison-table th, .comparison-table td { padding: 12px 15px; text-align: center; border: 1px solid var(--border-light); }
        .comparison-table th { background: #2A2A2A; color: #E8E8E8; font-weight: 600; }
        .comparison-table tr:nth-child(even) { background: rgba(138, 43, 226, 0.08); }
        .comparison-table tr:nth-child(odd) { background: rgba(42, 42, 42, 0.7); }
        
        .recommendation-badge { 
            display: inline-block; padding: 5px 12px; border-radius: 20px; font-size: 12px; font-weight: 600; 
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        .badge-optimal { background: #0d6e32; color: #d4edda; border: 1px solid #28a745; }
        .badge-balanced { background: #664d03; color: #fff3cd; border: 1px solid #ffc107; }
        .badge-conservative { background: #002752; color: #cce7ff; border: 1px solid #0d6efd; }
        .badge-aggressive { background: #4f0f16; color: #f8d7da; border: 1px solid #dc3545; }
        
        .strategy-comparison { display: grid; grid-template-columns: 2fr 1fr; gap: 20px; margin: 20px 0; }
        
        .optimization-result { 
            background: rgba(138, 43, 226, 0.1); 
            padding: 15px; 
            border-radius: var(--radius-lg); 
            margin: 10px 0;
            border-left: 4px solid var(--accent-violet);
            color: #E0E0E0;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        }
        
        /* Landing Page Styles */
        .landing-card {
            background: linear-gradient(145deg, #1F1F1F, #222222);
            border: 1px solid #2C2C2C;
            border-radius: 4px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            min-height: 160px;
            position: relative;
            overflow: hidden;
        }
        
        .landing-card:hover {
            transform: translateY(-6px);
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.4), 0 0 15px rgba(138, 43, 226, 0.2);
            border-color: rgba(138, 43, 226, 0.4);
        }
        
        .landing-card h3 {
            font-family: 'Playfair Display', serif;
            color: #FFFFFF;
            font-size: 18px;
            margin: 0 0 12px 0;
        }
        
        .landing-card p {
            font-family: 'Inter', sans-serif;
            color: #D9D9D9;
            font-size: 13px;
            line-height: 1.4;
            margin: 0;
        }
        
        .landing-card-icon {
            margin-bottom: 15px;
            color: #8A2BE2;
            font-size: 24px;
            opacity: 0.9;
        }
        
        /* Fade in animations */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Mobile responsiveness */
        @media (max-width: 768px) {
            #landingPanelsContainer {
                grid-template-columns: 1fr;
            }
        }
        
        .rating-score { 
            font-size: 48px; font-weight: bold; color: var(--color-primary); text-align: center;
            margin: 20px 0;
        }
        
        .improvement-indicator { 
            display: inline-flex; align-items: center; gap: 5px; font-weight: bold;
        }
        .improvement-positive { color: var(--accent-positive); }
        .improvement-negative { color: var(--accent-negative); }
        
        /* Neue Styles für Portfolio Entwicklung */
        .performance-metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .performance-card { background: var(--bg-panel); padding: 20px; border-radius: var(--radius-lg); text-align: center; border: 1px solid var(--border-panel); }
        
        .path-simulation { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .path-card { background: var(--bg-panel); padding: 20px; border-radius: var(--radius-lg); border: 1px solid var(--border-panel); }
        
        .swot-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 20px 0; }
        .swot-card { background: var(--bg-panel); padding: 20px; border-radius: var(--radius-lg); border-left: 4px solid; }
        .strengths { border-left-color: #28A745; }
        .weaknesses { border-left-color: #DC3545; }
        .opportunities { border-left-color: #007BFF; }
        .threats { border-left-color: #6C757D; }
        
        .calculate-section {
            text-align: center;
            margin: 30px 0;
            padding: 30px;
            background: var(--bg-panel);
            color: var(--text-primary);
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-panel);
        }
        
        .password-error {
            color: #DC3545;
            margin-top: 10px;
            display: none;
        }
        
        .market-analysis-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .market-analysis-card {
            background: #1F1F1F;
            padding: 20px;
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-light);
            border-left: 4px solid;
        }
        
        .cycle-indicator {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
        }
        
        .cycle-growth { background: #d4edda; color: #155724; }
        .cycle-cyclical { background: #fff3cd; color: #856404; }
        .cycle-defensive { background: #cce7ff; color: #004085; }
        
        .timeframe-switcher {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .timeframe-btn {
            padding: 8px 16px;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .timeframe-btn.active {
            background: var(--color-primary);
            color: white;
            border-color: var(--color-primary);
        }
        
        .scenario-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .scenario-card {
            background: #1F1F1F;
            padding: 20px;
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-light);
            text-align: center;
            transition: all 0.3s ease;
        }
        
        .scenario-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-soft);
        }
        
        .scenario-normal { border-top: 4px solid #28A745; }
        .scenario-interest { border-top: 4px solid #DC3545; }
        .scenario-inflation { border-top: 4px solid #FFC107; }
        .scenario-recession { border-top: 4px solid #6C757D; }
        .scenario-growth { border-top: 4px solid #007BFF; }
        
        .correlation-matrix {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        
        .correlation-matrix th, .correlation-matrix td {
            padding: 10px;
            text-align: center;
            border: 1px solid var(--border-light);
        }
        
        .correlation-matrix th {
            background: var(--color-primary);
            color: white;
        }
        
        .correlation-value {
            font-weight: bold;
        }
        
        .positive-correlation { background: #d4edda; }
        .negative-correlation { background: #f8d7da; }
        .neutral-correlation { background: #fff3cd; }
        
        .monte-carlo-controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .benchmark-comparison {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .benchmark-card {
            background: #1F1F1F;
            padding: 20px;
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-light);
            text-align: center;
        }
        
        .peer-comparison {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .peer-card {
            background: #1F1F1F;
            padding: 15px;
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-light);
            text-align: center;
        }
        
        .refresh-button {
            background: #007BFF;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            margin: 5px;
        }
        
        .refresh-button:hover {
            background: #0056b3;
            transform: translateY(-2px);
        }
        
        .auto-refresh-info {
            background: rgba(138, 43, 226, 0.15);
            padding: 12px 16px;
            border-radius: var(--radius-md);
            margin: 15px 0;
            font-size: 14px;
            border-left: 4px solid var(--color-accent);
            color: var(--text-primary);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #28A745;
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 1000;
            animation: slideIn 0.3s ease;
        }
        
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        @keyframes slideOut {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }
        
        .price-update-info {
            background: rgba(138, 43, 226, 0.15);
            padding: 12px 16px;
            border-radius: var(--radius-md);
            margin: 12px 0;
            font-size: 14px;
            border-left: 4px solid var(--color-accent);
            color: var(--text-primary);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #007BFF;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .risk-meter {
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            margin: 10px 0;
            overflow: hidden;
        }
        
        .risk-level {
            height: 100%;
            border-radius: 4px;
            transition: all 0.3s ease;
        }
        
        .risk-low { background: #28A745; width: 30%; }
        .risk-medium { background: #FFC107; width: 60%; }
        .risk-high { background: #DC3545; width: 90%; }
        
        .tooltip {
            position: relative;
            display: inline-block;
            cursor: help;
        }
        
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 8px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -100px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 12px;
        }
        
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        
        .export-button {
            background: #6C757D;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .export-button:hover {
            background: #545B62;
            transform: translateY(-1px);
        }
        
        .clickable-name {
            color: white;
            text-decoration: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .clickable-name:hover {
            color: #63B3ED;
            text-decoration: underline;
        }
        
        .pdf-download-section {
            text-align: center;
            margin: 40px 0;
            padding: 30px;
            background: linear-gradient(135deg, #0A1429 0%, #1E3A5C 100%);
            color: white;
            border-radius: var(--radius-lg);
        }
        
        .btn-pdf {
            background: #DC3545;
            font-size: 18px;
            padding: 15px 30px;
            margin-top: 15px;
        }
        
        .btn-pdf:hover {
            background: #c82333;
            transform: translateY(-2px);
        }
        
        .asset-performance-chart {
            height: 300px;
            margin: 20px 0;
        }
        
        .news-link {
            color: #007BFF;
            text-decoration: none;
        }
        
        .news-link:hover {
            text-decoration: underline;
        }
        
        .sources-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .source-card {
            background: #1F1F1F;
            padding: 20px;
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-light);
        }

        /* Korrelationsmatrix Styles */
        .correlation-heatmap {
            width: 100%;
            height: 500px;
            margin: 20px 0;
        }

        .correlation-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            font-size: 12px;
        }

        .correlation-table th, .correlation-table td {
            padding: 10px;
            text-align: center;
            border: 1px solid #444;
            font-size: 13px;
        }

        .correlation-table th {
            background: #1A1A1A;
            color: #E8E8E8;
            font-weight: bold;
        }

        .correlation-table td:first-child {
            background: #1A1A1A;
            color: #E8E8E8;
            font-weight: bold;
        }

        .corr-high { 
            background: #2D4A2D; 
            color: #90EE90; 
            font-weight: 600;
        }
        .corr-medium { 
            background: #4A3D2D; 
            color: #FFD700; 
            font-weight: 600;
        }
        .corr-low { 
            background: #4A2D2D; 
            color: #FFB6C1; 
            font-weight: 600;
        }
        .corr-negative { 
            background: #2D3A4A; 
            color: #87CEEB; 
            font-weight: 600;
        }

        /* Value Testing Styles */
        .value-testing-controls {
            margin-bottom: 30px;
        }

        .parameter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .parameter-item {
            display: flex;
            flex-direction: column;
        }

        .parameter-item label {
            color: #E8E8E8;
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .parameter-item input {
            padding: 10px;
            border: 1px solid #444;
            border-radius: 6px;
            background: #2A2A2A;
            color: #E8E8E8;
            font-size: 14px;
        }

        .parameter-item input:focus {
            outline: none;
            border-color: #8A2BE2;
            box-shadow: 0 0 0 2px rgba(138, 43, 226, 0.2);
        }

        .analysis-actions {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .loading-container {
            text-align: center;
            padding: 40px;
        }

        .loading-spinner {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }

        .loading-spinner i {
            font-size: 48px;
            color: #8A2BE2;
        }

        .loading-spinner p {
            color: #E8E8E8;
            font-size: 18px;
            margin: 0;
            animation: pulse 2s ease-in-out infinite;
        }

        @keyframes pulse {
            0% { opacity: 0.6; }
            50% { opacity: 1; }
            100% { opacity: 0.6; }
        }

        .progress-bar {
            width: 300px;
            height: 8px;
            background: #333;
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #8A2BE2, #B05EED);
            width: 0%;
            transition: width 0.3s ease;
        }

        .value-testing-results {
            margin-top: 30px;
        }

        .portfolio-summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .summary-item {
            text-align: center;
            padding: 20px;
            background: linear-gradient(145deg, #2A2A2A, #232323);
            border-radius: 8px;
            border: 1px solid #444;
        }

        .summary-item h4 {
            color: #E8E8E8;
            margin-bottom: 10px;
            font-size: 14px;
            font-weight: 600;
        }

        .summary-item p {
            color: #8A2BE2;
            font-size: 24px;
            font-weight: bold;
            margin: 0;
        }

        .value-analysis-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .value-analysis-table th,
        .value-analysis-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #444;
        }

        .value-analysis-table th {
            background: #1A1A1A;
            color: #E8E8E8;
            font-weight: 600;
            font-size: 14px;
        }

        .value-analysis-table td {
            color: #D0D0D0;
            font-size: 13px;
        }

        .value-analysis-table tr:hover {
            background: rgba(138, 43, 226, 0.1);
        }

        .recommendation-buy {
            color: #4CAF50;
            font-weight: bold;
        }

        .recommendation-hold {
            color: #FFD700;
            font-weight: bold;
        }

        .recommendation-sell {
            color: #FF6B6B;
            font-weight: bold;
        }

        .score-bar {
            width: 100%;
            height: 20px;
            background: #333;
            border-radius: 10px;
            overflow: hidden;
            position: relative;
        }

        .score-fill {
            height: 100%;
            border-radius: 10px;
            transition: width 0.3s ease;
        }

        .score-high { background: linear-gradient(90deg, #4CAF50, #66BB6A); }
        .score-medium { background: linear-gradient(90deg, #FFD700, #FFE082); }
        .score-low { background: linear-gradient(90deg, #FF6B6B, #FF8A80); }

        .charts-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }

        .sources-list {
            display: grid;
            gap: 15px;
        }

        .source-item {
            padding: 15px;
            background: #2A2A2A;
            border-radius: 6px;
            border-left: 4px solid #8A2BE2;
        }

        .source-item h5 {
            color: #E8E8E8;
            margin: 0 0 8px 0;
            font-size: 14px;
        }

        .source-item p {
            color: #D0D0D0;
            margin: 4px 0;
            font-size: 13px;
        }

        .source-item a {
            color: #8A2BE2;
            text-decoration: none;
        }

        .source-item a:hover {
            text-decoration: underline;
        }

        .modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: #1A1A1A;
            padding: 30px;
            border-radius: 8px;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
            border: 1px solid #444;
        }

        .close {
            position: absolute;
            top: 15px;
            right: 20px;
            color: #E8E8E8;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: #8A2BE2;
        }

        .asset-detail-content h3 {
            color: #E8E8E8;
            margin-bottom: 20px;
        }

        .detail-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .detail-item {
            padding: 15px;
            background: #2A2A2A;
            border-radius: 6px;
        }

        .detail-item h5 {
            color: #E8E8E8;
            margin: 0 0 8px 0;
            font-size: 14px;
        }

        .detail-item p {
            color: #D0D0D0;
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }

        .valuation-methods {
            margin-top: 20px;
        }

        .valuation-method {
            margin-bottom: 20px;
            padding: 15px;
            background: #2A2A2A;
            border-radius: 6px;
            border-left: 4px solid #8A2BE2;
        }

        .valuation-method h5 {
            color: #E8E8E8;
            margin: 0 0 10px 0;
        }

        .valuation-method p {
            color: #D0D0D0;
            margin: 5px 0;
        }

        /* Investment Strategy Modules Styles */
        .momentum-controls, .buyhold-controls, .carry-controls {
            margin-bottom: 30px;
        }

        .momentum-analysis-table, .buyhold-analysis-table, .carry-analysis-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .momentum-analysis-table th,
        .momentum-analysis-table td,
        .buyhold-analysis-table th,
        .buyhold-analysis-table td,
        .carry-analysis-table th,
        .carry-analysis-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #444;
            font-size: 13px;
        }

        .momentum-analysis-table th,
        .buyhold-analysis-table th,
        .carry-analysis-table th {
            background: #1A1A1A;
            color: #E8E8E8;
            font-weight: 600;
        }

        .momentum-analysis-table td,
        .buyhold-analysis-table td,
        .carry-analysis-table td {
            color: #D0D0D0;
        }

        .momentum-analysis-table tr:hover,
        .buyhold-analysis-table tr:hover,
        .carry-analysis-table tr:hover {
            background: rgba(138, 43, 226, 0.1);
        }

        .momentum-results, .buyhold-results, .carry-results {
            margin-top: 30px;
        }

        .performance-positive {
            color: #4CAF50;
            font-weight: bold;
        }

        .performance-negative {
            color: #FF6B6B;
            font-weight: bold;
        }

        .performance-neutral {
            color: #FFD700;
            font-weight: bold;
        }

        .recommendation-strong-buy {
            color: #4CAF50;
            font-weight: bold;
        }

        .recommendation-buy {
            color: #66BB6A;
            font-weight: bold;
        }

        .recommendation-neutral {
            color: #FFD700;
            font-weight: bold;
        }

        .recommendation-avoid {
            color: #FF6B6B;
            font-weight: bold;
        }

        .recommendation-recommend {
            color: #4CAF50;
            font-weight: bold;
        }

        .recommendation-opportunistic {
            color: #FFD700;
            font-weight: bold;
        }

        .heatmap-cell {
            display: inline-block;
            width: 20px;
            height: 20px;
            margin: 2px;
            border-radius: 3px;
            text-align: center;
            line-height: 20px;
            font-size: 10px;
            font-weight: bold;
        }

        .heatmap-positive {
            background: #4CAF50;
            color: white;
        }

        .heatmap-negative {
            background: #FF6B6B;
            color: white;
        }

        .heatmap-neutral {
            background: #FFD700;
            color: black;
        }

        .simulation-chart {
            margin-top: 20px;
        }

        .carry-simulation {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 10px;
            margin: 10px 0;
        }

        .simulation-item {
            text-align: center;
            padding: 10px;
            background: #2A2A2A;
            border-radius: 6px;
            border: 1px solid #444;
        }

        .simulation-item h6 {
            color: #E8E8E8;
            margin: 0 0 5px 0;
            font-size: 12px;
        }

        .simulation-item p {
            color: #8A2BE2;
            margin: 0;
            font-weight: bold;
            font-size: 14px;
        }

        .strategy-navigation {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }

        .strategy-card {
            background: linear-gradient(145deg, #2A2A2A, #232323);
            border-radius: 8px;
            padding: 20px;
            border: 1px solid #444;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .strategy-card:hover {
            border-color: #8A2BE2;
            box-shadow: 0 4px 20px rgba(138, 43, 226, 0.2);
            transform: translateY(-2px);
        }

        .strategy-card h3 {
            color: #8A2BE2;
            margin: 0 0 15px 0;
            font-size: 18px;
        }

        .strategy-card p {
            color: #D0D0D0;
            margin: 0 0 15px 0;
            font-size: 14px;
            line-height: 1.5;
        }

        .strategy-features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            margin-bottom: 15px;
        }

        .strategy-feature {
            padding: 8px;
            background: rgba(138, 43, 226, 0.1);
            border-radius: 4px;
            text-align: center;
            font-size: 12px;
            color: #E8E8E8;
        }

        .strategy-button {
            width: 100%;
            padding: 10px;
            background: linear-gradient(90deg, #8A2BE2, #B05EED);
            color: white;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .strategy-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(138, 43, 226, 0.3);
        }

        .correlation-legend {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin: 10px 0;
            font-size: 12px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .legend-color {
            width: 15px;
            height: 15px;
            border-radius: 3px;
        }

        .welcome-screen {
            position: fixed;
            top: 0; left: 0;
            width: 100%; height: 100%;
            background: linear-gradient(135deg, #1a0f42 0%, #0A1429 30%, #0A1429 70%, #1a0f42 100%);
            display: none;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            z-index: 9999;

        }

        .welcome-screen.active {
            display: flex;

        }

        .welcome-content {
            text-align: center;
            transform: translateY(20px);
            opacity: 0;
            animation: welcomeSlideIn 1s ease 1s forwards;
        }

        .welcome-title {
            font-size: 3.5rem;
            font-weight: 700;
            color: white;
            margin-bottom: 1rem;
            text-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }

        .welcome-subtitle {
            font-size: 1.2rem;
            color: rgba(255,255,255,0.8);
            font-weight: 300;
        }
.welcome-author {
    font-size: 1rem;
    color: rgba(255,255,255,0.7);
    font-weight: 300;
    margin-bottom: 2rem;
}
        .loading-bar {
            width: 200px;
            height: 3px;
            background: rgba(255,255,255,0.2);
            margin-top: 2rem;
            border-radius: 2px;
            overflow: hidden;
        }

        .loading-progress {
            width: 0%;
            height: 100%;
            background: #333333;
            animation: loadingFill 3s ease 1s forwards;
        }

        @keyframes welcomeSlideIn {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes loadingFill {
            0% { width: 0%; }
            60% { width: 70%; }
            80% { width: 85%; }
            100% { width: 100%; }
        }
        /* Finance Footer Styles */
        /* Footer styles are handled by utility classes in the HTML */
        .market-open { color: #28A745; font-weight: bold; }
        .market-closed { color: #DC3545; }
        .market-status { margin: 0 5px; }
/* Violet Background Styles */
:root{
    /* Basis / Branding-empfohlene Farben */
    --base-black: #050510;      /* sehr dunkler Grundton (nicht reines Schwarz) */
    --violet-1:  #0a0f2c;       /* sehr dunkles Blau-Violett */
    --violet-2:  #1a0b38;       /* tiefes Violett */
    --violet-3:  #2e0f54;       /* edles Lila */
    --violet-4:  #3c1a70;       /* Blau-Violett für Tiefe */

    /* Bewegung (kleiner = schneller) */
    --d1: 10s;
    --d2: 14s;
    --d3: 20s;

    /* Unschärfe / Sichtbarkeit (anpassbar) */
    --blur1: 48px;
    --blur2: 84px;
    --blur3: 120px;
    --opa1: 0.96;
    --opa2: 0.82;
    --opa3: 0.74;
}

/* Fullscreen background container */
.bg {
    position: fixed;
    inset: 0;
    z-index: -1; /* WICHTIG: Hinter allen Inhalten */
    pointer-events: none;
    isolation: isolate;
    background: var(--base-black);
}

/* Layers use repeating radial gradients and animate background-position diagonally.
   Because they repeat, the motion loops seamlessly (no snapping). */
.layer {
    position: absolute;
    inset: -40%;
    pointer-events: none;
    background-repeat: repeat;
    mix-blend-mode: screen;
    will-change: background-position, transform, opacity;
}

/* Layer 1 - vorne (fein strukturiert, schneller) */
.l1 {
    background-image:
        radial-gradient(closest-side, rgba(138,43,226,0.25) 0%, rgba(138,43,226,0) 48%),
        radial-gradient(circle at 18% 82%, rgba(138,43,226,0.18) 0%, rgba(138,43,226,0) 44%);
    background-size: 1200px 1200px, 1600px 1600px;
    filter: blur(var(--blur1)) saturate(116%);
    opacity: var(--opa1);
    animation:
        bgMove1 var(--d1) linear infinite,
        wave1 calc(var(--d1) * 1.12) ease-in-out infinite;
}

/* Layer 2 - mitte (mittlere Tiefe, moderat) */
.l2 {
    background-image:
        radial-gradient(circle at 16% 86%, rgba(138,43,226,0.15) 0%, rgba(138,43,226,0) 42%),
        radial-gradient(circle at 8% 92%, rgba(138,43,226,0.12) 0%, rgba(138,43,226,0) 38%);
    background-size: 1800px 1800px, 2200px 2200px;
    filter: blur(var(--blur2)) saturate(106%);
    opacity: var(--opa2);
    animation:
        bgMove2 var(--d2) linear infinite,
        wave2 calc(var(--d2) * 1.18) ease-in-out infinite;
}

/* Layer 3 - hinten (groß, sehr weich) */
.l3 {
    background-image:
        radial-gradient(circle at 12% 92%, rgba(138,43,226,0.10) 0%, rgba(138,43,226,0) 36%),
        radial-gradient(circle at 22% 72%, rgba(138,43,226,0.08) 0%, rgba(138,43,226,0) 40%);
    background-size: 2600px 2600px, 3000px 3000px;
    filter: blur(var(--blur3)) saturate(102%);
    opacity: var(--opa3);
    animation:
        bgMove3 var(--d3) linear infinite,
        wave3 calc(var(--d3) * 1.22) ease-in-out infinite;
}

/* subtle overlay for micro-life */
.pulse {
    position: absolute;
    inset: -60%;
    background: linear-gradient(135deg, rgba(255,255,255,0.01), rgba(255,255,255,0) 22%);
    filter: blur(160px);
    mix-blend-mode: overlay;
    animation: pulse 12s ease-in-out infinite;
    opacity: 0.07;
    pointer-events: none;
}

/* fine grain texture for luxury finish */
.grain {
    position: fixed;
    inset: 0;
    z-index: -1; /* WICHTIG: Hinter allen Inhalten */
    pointer-events: none;
    opacity: 0.03;
    background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='64' height='64' viewBox='0 0 64 64'><filter id='g'><feTurbulence baseFrequency='0.9' numOctaves='1' seed='29' /></filter><rect width='100%' height='100%' filter='url(%23g)' opacity='0.18' /></svg>");
    mix-blend-mode: overlay;
}

/* KEYFRAMES — diagonal translation of repeating background tiles (seamless loop) */
@keyframes bgMove1 {
    from { background-position: -1400px -1400px, -1800px -1800px; }
    to   { background-position: 1400px 1400px, 1800px 1800px; }
}
@keyframes bgMove2 {
    from { background-position: -1800px -1800px, -2200px -2200px; }
    to   { background-position: 1800px 1800px, 2200px 2200px; }
}
@keyframes bgMove3 {
    from { background-position: -2400px -2400px, -2800px -2800px; }
    to   { background-position: 2400px 2400px, 2800px 2800px; }
}

/* gentle orthogonal wave movement for organic flow */
@keyframes wave1 {
    0%   { transform: translate(0%, 0%); }
    25%  { transform: translate(0.35%, -0.18%); }
    50%  { transform: translate(0%, -0.36%); }
    75%  { transform: translate(-0.35%, -0.18%); }
    100% { transform: translate(0%, 0%); }
}
@keyframes wave2 {
    0%   { transform: translate(0%, 0%); }
    25%  { transform: translate(0.52%, -0.28%); }
    50%  { transform: translate(0%, -0.56%); }
    75%  { transform: translate(-0.52%, -0.28%); }
    100% { transform: translate(0%, 0%); }
}
@keyframes wave3 {
    0%   { transform: translate(0%, 0%); }
    25%  { transform: translate(0.75%, -0.36%); }
    50%  { transform: translate(0%, -0.72%); }
    75%  { transform: translate(-0.75%, -0.36%); }
    100% { transform: translate(0%, 0%); }
}

/* micro pulse */
@keyframes pulse {
    0%   { opacity: 0.05; transform: scale(1) translate(0,0); }
    50%  { opacity: 0.11; transform: scale(1.01) translate(0.12%, -0.18%); }
    100% { opacity: 0.05; transform: scale(1) translate(0,0); }
}

/* respect user motion preferences */
@media (prefers-reduced-motion: reduce) {
    .layer, .pulse { animation: none !important; transform: none !important; }
    .grain { opacity: 0.02 !important; }
}
/* NUR WINDOWS PERFORMANCE OPTIMIERUNGEN - STANDIMAGE */
.performance-mode .layer {
    animation: none !important;
    filter: blur(40px) !important;
}

.performance-mode .pulse {
    display: none !important;
}

.performance-mode .l1 { opacity: 0.9; }
.performance-mode .l2 { opacity: 0.7; }
.performance-mode .l3 { opacity: 0.5; }

/* SMOOTH SCROLLING FIX */
html, body {
    overflow-x: hidden;
    overflow-y: auto;
    height: 100%;
    scroll-behavior: smooth;
}

.performance-mode main {
    transform: translate3d(0, 0, 0);
    backface-visibility: hidden;
    will-change: transform;
}

/* Getting Started Page Styles */
.steps-container {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin: 30px 0;
}

.step {
    display: flex;
    align-items: flex-start;
    background: linear-gradient(145deg, #262626, #1a1a1a);
    border-radius: 10px;
    padding: 20px;
    transition: transform 0.3s, box-shadow 0.3s;
}

.step:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

.step-number {
    background: linear-gradient(145deg, #8A2BE2, #6B24B2);
    color: white;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.2rem;
    margin-right: 20px;
    flex-shrink: 0;
}

.step-content {
    flex: 1;
}

.step-btn {
    margin-top: 10px;
}

.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.feature-item {
    background: linear-gradient(145deg, #262626, #1a1a1a);
    border-radius: 10px;
    padding: 20px;
    text-align: center;
    transition: transform 0.3s;
}

.feature-item:hover {
    transform: translateY(-5px);
}

.feature-icon {
    font-size: 2.5rem;
    margin-bottom: 15px;
    color: #8A2BE2;
}

.quick-links-container {
    margin-top: 30px;
}

.quick-links {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
    margin-top: 15px;
}

.quick-link {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    background: linear-gradient(145deg, #262626, #1a1a1a);
    border-radius: 10px;
    padding: 20px;
    text-decoration: none;
    color: #E0E0E0;
    transition: all 0.3s;
}

.quick-link:hover {
    background: linear-gradient(145deg, #2D2D2D, #212121);
    transform: translateY(-5px);
    color: #8A2BE2;
}

.quick-link i {
    font-size: 2rem;
    margin-bottom: 10px;
}

/* Investing Page Styles */
.principles-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.principle-item {
    background: linear-gradient(145deg, #262626, #1a1a1a);
    border-radius: 10px;
    padding: 20px;
    transition: transform 0.3s;
}

.principle-item:hover {
    transform: translateY(-5px);
}

.principle-image {
    height: 150px;
    margin-top: 15px;
    border-radius: 8px;
    background-color: #333;
    background-size: cover;
    background-position: center;
}

.tabs-container {
    margin-top: 20px;
}

.tabs {
    display: flex;
    flex-wrap: wrap;
    border-bottom: 1px solid #333;
    margin-bottom: 20px;
}

.tab {
    padding: 10px 20px;
    cursor: pointer;
    transition: all 0.3s;
}

.tab.active {
    color: #8A2BE2;
    border-bottom: 2px solid #8A2BE2;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
    animation: fade-in 0.3s ease-out;
}

.strategy-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

.strategy-table th,
.strategy-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #333;
}

.strategy-table th {
    background-color: #222;
    color: #E0E0E0;
}

.strategy-table tr:hover {
    background-color: #282828;
}

/* News Styling */
.news-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #333;
}

.news-item {
    background: #1A1A1A;
    border: 1px solid #333;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 15px;
    transition: all 0.3s ease;
}

.news-item:hover {
    background: #222;
    border-color: #8A2BE2;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(138, 43, 226, 0.2);
}

.news-item .news-header {
    margin-bottom: 10px;
    padding-bottom: 10px;
    border-bottom: 1px solid #333;
}

.news-title {
    color: #E8E8E8;
    text-decoration: none;
    font-size: 16px;
    font-weight: 600;
    line-height: 1.4;
    transition: color 0.3s ease;
}

.news-title:hover {
    color: #8A2BE2;
    text-decoration: underline;
}

.news-meta {
    display: flex;
    gap: 15px;
    margin-top: 8px;
}

.news-source {
    background: #8A2BE2;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
}

.news-time {
    color: #888;
    font-size: 12px;
    font-style: italic;
}

.news-description {
    color: #D0D0D0;
    line-height: 1.6;
    margin: 0;
}

.news-loading {
    text-align: center;
    color: #888;
    padding: 40px;
    font-size: 16px;
}

.news-loading i {
    margin-right: 10px;
    color: #8A2BE2;
}

/* Asset Section Styling */
.asset-section {
    background: #1A1A1A;
    border: 1px solid #333;
    border-radius: 12px;
    padding: 30px;
    margin-bottom: 30px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
}

.asset-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 2px solid #8A2BE2;
}

.asset-header h3 {
    color: #E8E8E8;
    font-size: 24px;
    margin: 0;
}

.asset-badges {
    display: flex;
    gap: 10px;
}

.risk-badge, .return-badge, .liquidity-badge {
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
}

.risk-badge.high, .return-badge.high, .liquidity-badge.high {
    background: #FF6B6B;
    color: white;
}

.risk-badge.medium, .return-badge.medium, .liquidity-badge.medium {
    background: #FFD700;
    color: #1A1A1A;
}

.risk-badge.low, .return-badge.low, .liquidity-badge.low {
    background: #90EE90;
    color: #1A1A1A;
}

.return-badge.stable {
    background: #87CEEB;
    color: #1A1A1A;
}

.risk-badge.variable, .return-badge.variable, .liquidity-badge.variable {
    background: #DDA0DD;
    color: white;
}

.theory-content h4 {
    color: #8A2BE2;
    font-size: 20px;
    margin: 25px 0 15px 0;
    border-left: 4px solid #8A2BE2;
    padding-left: 15px;
}

.theory-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 25px;
}

.theory-card {
    background: #222;
    border: 1px solid #444;
    border-radius: 8px;
    padding: 20px;
    transition: all 0.3s ease;
}

.theory-card:hover {
    border-color: #8A2BE2;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(138, 43, 226, 0.2);
}

.theory-card h5 {
    color: #E8E8E8;
    font-size: 16px;
    margin: 0 0 10px 0;
}

.theory-card p {
    color: #D0D0D0;
    line-height: 1.6;
    margin: 0 0 10px 0;
}

.formula {
    background: #0A0A0A;
    border: 1px solid #8A2BE2;
    border-radius: 4px;
    padding: 10px;
    font-family: 'Courier New', monospace;
    color: #8A2BE2;
    font-size: 14px;
    text-align: center;
    margin-top: 10px;
}

.practice-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 20px;
}

.practice-item {
    background: #1F1F1F;
    border: 1px solid #444;
    border-radius: 8px;
    padding: 20px;
    transition: all 0.3s ease;
}

.practice-item:hover {
    border-color: #8A2BE2;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(138, 43, 226, 0.1);
}

.practice-item h5 {
    color: #E8E8E8;
    font-size: 16px;
    margin: 0 0 10px 0;
    border-bottom: 1px solid #333;
    padding-bottom: 8px;
}

.practice-item p {
    color: #D0D0D0;
    line-height: 1.6;
    margin: 0 0 8px 0;
}

.practice-item p:last-child {
    margin-bottom: 0;
}

/* Backtesting Module Styles */
.backtesting-controls {
    background: #1A1A1A;
    border: 1px solid #333;
    border-radius: 12px;
    padding: 25px;
    margin: 20px 0;
}

.strategy-parameters {
    margin: 20px 0;
    padding: 20px;
    background: #222;
    border-radius: 8px;
    border-left: 4px solid #8A2BE2;
}

.backtesting-results {
    margin-top: 30px;
}

.metric-value {
    font-size: 24px;
    font-weight: bold;
    color: #8A2BE2;
    margin-top: 5px;
}

.summary-item h4 {
    color: #E0E0E0;
    font-size: 14px;
    margin-bottom: 5px;
    opacity: 0.8;
}

/* Comprehensive PDF Download Styles */
.comprehensive-pdf-section {
    background: linear-gradient(135deg, #1A1A1A 0%, #2A2A2A 100%);
    border: 1px solid #8A2BE2;
    border-radius: 16px;
    margin: 30px 0;
    overflow: hidden;
    position: relative;
}

.comprehensive-pdf-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #8A2BE2, #B05EED, #8A2BE2);
    background-size: 200% 100%;
    animation: shimmer 3s ease-in-out infinite;
}

@keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
}

.pdf-download-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 40px;
    margin-top: 20px;
}

.pdf-preview {
    background: #222;
    border-radius: 12px;
    padding: 25px;
    border: 1px solid #333;
}

.pdf-preview h4 {
    color: #8A2BE2;
    font-size: 18px;
    margin-bottom: 20px;
    font-family: 'Playfair Display', serif;
}

.pdf-content-list {
    display: grid;
    grid-template-columns: 1fr;
    gap: 12px;
}

.content-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    background: #1A1A1A;
    border-radius: 8px;
    border-left: 3px solid #8A2BE2;
    transition: all 0.3s ease;
}

.content-item:hover {
    background: #2A2A2A;
    transform: translateX(5px);
}

.content-item i {
    color: #8A2BE2;
    font-size: 16px;
    width: 20px;
    text-align: center;
}

.content-item span {
    color: #E0E0E0;
    font-size: 14px;
    font-weight: 500;
}

.pdf-download-form {
    background: #222;
    border-radius: 12px;
    padding: 25px;
    border: 1px solid #333;
}

.pdf-download-form h4 {
    color: #8A2BE2;
    font-size: 18px;
    margin-bottom: 15px;
    font-family: 'Playfair Display', serif;
}

.pdf-download-form p {
    color: #B0B0B0;
    margin-bottom: 20px;
    font-size: 14px;
}

.password-input-group {
    position: relative;
    margin-bottom: 20px;
}

.password-input {
    width: 100%;
    padding: 15px 50px 15px 15px;
    background: #1A1A1A;
    border: 2px solid #333;
    border-radius: 8px;
    color: #E0E0E0;
    font-size: 16px;
    transition: all 0.3s ease;
}

.password-input:focus {
    outline: none;
    border-color: #8A2BE2;
    box-shadow: 0 0 0 3px rgba(138, 43, 226, 0.1);
}

.password-toggle {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #8A2BE2;
    cursor: pointer;
    font-size: 16px;
    padding: 5px;
    transition: color 0.3s ease;
}

.password-toggle:hover {
    color: #B05EED;
}

.pdf-generate-btn {
    width: 100%;
    padding: 15px;
    background: linear-gradient(135deg, #8A2BE2, #B05EED);
    border: none;
    border-radius: 8px;
    color: white;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 15px;
}

.pdf-generate-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(138, 43, 226, 0.3);
}

.pdf-generate-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
}

.pdf-info {
    color: #B0B0B0;
    font-size: 12px;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.pdf-features {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.feature-tag {
    display: flex;
    align-items: center;
    gap: 6px;
    background: rgba(138, 43, 226, 0.1);
    color: #8A2BE2;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
    border: 1px solid rgba(138, 43, 226, 0.2);
}

.feature-tag i {
    font-size: 10px;
}

@media (max-width: 768px) {
    .pdf-download-container {
        grid-template-columns: 1fr;
        gap: 20px;
    }
    
    .pdf-preview, .pdf-download-form {
        padding: 20px;
    }
}

/* Getting Started Structure Styles */
.website-structure {
    margin: 20px 0;
}

.structure-section {
    margin-bottom: 30px;
    padding: 20px;
    background: #1A1A1A;
    border-radius: 12px;
    border-left: 4px solid #8A2BE2;
}

.structure-section h4 {
    color: #8A2BE2;
    font-size: 18px;
    margin-bottom: 15px;
    font-family: 'Playfair Display', serif;
}

.structure-items {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 15px;
}

.structure-item {
    display: flex;
    align-items: flex-start;
    gap: 15px;
    padding: 15px;
    background: #222;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid #333;
}

.structure-item:hover {
    background: #2A2A2A;
    border-color: #8A2BE2;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(138, 43, 226, 0.2);
}

.structure-item i {
    font-size: 24px;
    color: #8A2BE2;
    margin-top: 5px;
    min-width: 30px;
}

.structure-item strong {
    color: #E0E0E0;
    font-size: 16px;
    display: block;
    margin-bottom: 5px;
}

.structure-item p {
    color: #B0B0B0;
    font-size: 14px;
    line-height: 1.4;
    margin: 0;
}

.step-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
    flex-wrap: wrap;
}

.step-actions .btn {
    font-size: 12px;
    padding: 8px 16px;
}

}  </style>
<script>
    // Initial Footer ausblenden für Login-Bildschirm
    window.onload = function() {
        document.querySelector('footer').style.display = 'none';
        
        // Ensure login screen is properly centered
        const loginScreen = document.getElementById('passwordProtection');
        if (loginScreen) {
            loginScreen.style.display = 'flex';
            loginScreen.style.justifyContent = 'center';
            loginScreen.style.alignItems = 'center';
            loginScreen.style.width = '100vw';
            loginScreen.style.height = '100vh';
        }
    }
</script>
</head>
<body class="sap-theme-dark" style="margin: 0; padding: 0;">
    <div id="passwordProtection" class="password-protection" style="display: flex; justify-content: center; align-items: center; width: 100vw; height: 100vh; position: fixed; top: 0; left: 0;">
        <div class="password-box" style="margin: 0 auto; transform: translateY(0);">
            <h1 class="text-accent" style="font-size: 38px; margin-bottom: 20px; font-family: 'Playfair Display', serif; letter-spacing: 1px;">Swiss Asset Pro</h1>
            <p id="passwordPrompt" class="text-primary" style="margin-bottom: 20px;">Bitte geben Sie das Passwort ein:</p>
            <input type="password" id="passwordInput" class="password-input" placeholder="Passwort">
            <button class="btn" onclick="checkPassword()" id="accessButton" style="background: linear-gradient(145deg, var(--accent-violet), #7223c7); color: white; font-weight: 600; padding: 12px 25px; border-radius: 8px; box-shadow: 0 4px 15px rgba(138, 43, 226, 0.4); border: none; transition: all 0.3s ease;">Zugang erhalten</button>
            <p id="passwordError" class="password-error">Falsches Passwort. Bitte versuchen Sie es erneut.</p>
            <p style="margin-top: 15px; font-size: 12px; color: var(--text-secondary);" id="passwordHint">by Ahmed Choudhary</p>
        </div>
    </div>

<div class="welcome-screen" id="welcomeScreen">
    <div class="welcome-content">
        <h1 class="welcome-title">Swiss Asset Pro</h1>
        <p class="welcome-subtitle">Professional Portfolio Simulation</p>
        <p class="welcome-author">by Ahmed Choudhary</p>
        
        <div class="loading-bar">
            <div class="loading-progress"></div>
        </div>
        
        <!-- NEUE AKTIEN-GRAPH ANIMATION -->
        <div class="stock-graph-animation">
            <div class="graph-container">
                <svg class="stock-graph" viewBox="0 0 300 80" preserveAspectRatio="none">
                    <path class="graph-line" d="M0,60 L50,55 L100,70 L150,65 L200,75 L250,68 L300,20" />
                    <circle class="graph-dot" cx="0" cy="60" r="2" />
                </svg>
            </div>
        </div>
    </div>
</div>

<style>
.welcome-screen {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: #0A0A0A;
    display: none;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    z-index: 9999;
}

.welcome-screen.active {
    display: flex;
}

.welcome-content {
    text-align: center;
    transform: translateY(20px);
    opacity: 0;
    animation: welcomeSlideIn 1s ease 1s forwards;
}

.welcome-title {
    font-family: var(--font-heading);
    font-size: 3.5rem;
    font-weight: 700;
    color: var(--color-accent);
    margin-bottom: 1.5rem;
    text-shadow: 0 0 25px rgba(138, 43, 226, 0.3);
    letter-spacing: -1px;
}

.welcome-subtitle {
    font-family: var(--font-body);
    font-size: 1.2rem;
    color: rgba(255,255,255,0.8);
    font-weight: 300;
    letter-spacing: 0.3px;
}

.welcome-author {
    font-size: 1rem;
    color: rgba(255,255,255,0.7);
    font-weight: 300;
    margin-bottom: 2rem;
}

.loading-bar {
    width: 250px;
    height: 4px;
    background: rgba(255,255,255,0.1);
    margin: 2.5rem auto 0;
    border-radius: 4px;
    overflow: hidden;
}

        .loading-progress {
            width: 0%;
            height: 100%;
            background: linear-gradient(90deg, var(--color-accent), rgba(138, 43, 226, 0.5));
            animation: loadingFill 3.5s cubic-bezier(0.34, 1.56, 0.64, 1) 1s forwards;
            box-shadow: 0 0 15px rgba(138, 43, 226, 0.5);
        }/* NEUE AKTIEN-GRAPH ANIMATION */
.stock-graph-animation {
    margin-top: 40px;
    display: flex;
    justify-content: center;
}

.graph-container {
    width: 300px;
    height: 80px;
    position: relative;
}

.stock-graph {
    width: 100%;
    height: 100%;
}

.graph-line {
    fill: none;
    stroke: rgba(255, 255, 255, 0.9);
    stroke-width: 2;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-dasharray: 1000;
    stroke-dashoffset: 1000;
    animation: drawGraph 4s ease-in-out forwards;
    filter: drop-shadow(0 0 8px rgba(138, 43, 226, 0.6));
}

.graph-dot {
    fill: #8A2BE2;
    stroke: white;
    stroke-width: 1;
    filter: drop-shadow(0 0 6px #8A2BE2);
    animation: followPath 4s ease-in-out forwards;
}

@keyframes welcomeSlideIn {
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes loadingFill {
    to { width: 100%; }
}

@keyframes drawGraph {
    to {
        stroke-dashoffset: 0;
    }
}

@keyframes followPath {
    0% {
        cx: 0;
        cy: 60;
    }
    16% {
        cx: 50;
        cy: 55;
    }
    33% {
        cx: 100;
        cy: 70;
    }
    50% {
        cx: 150;
        cy: 65;
    }
    66% {
        cx: 200;
        cy: 75;
    }
    83% {
        cx: 250;
        cy: 68;
    }
    100% {
        cx: 300;
        cy: 20;
    }
}
</style>

    <!-- PWA Install Banner -->
    <div id="pwaInstallBanner" style="display: none; position: fixed; bottom: 0; left: 0; right: 0; background: linear-gradient(135deg, #8A2BE2, #B05EED); color: white; padding: 15px; z-index: 9999; transform: translateY(100%); transition: transform 0.3s ease;">
        <div style="display: flex; align-items: center; justify-content: space-between; max-width: 400px; margin: 0 auto;">
            <div style="display: flex; align-items: center; gap: 10px;">
                <i class="fas fa-download" style="font-size: 20px;"></i>
                <div>
                    <div style="font-weight: 600; font-size: 14px;">App installieren</div>
                    <div style="font-size: 12px; opacity: 0.9;">Für bessere Performance</div>
                </div>
            </div>
            <div style="display: flex; gap: 10px;">
                <button onclick="installPWA()" style="background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white; padding: 8px 16px; border-radius: 6px; font-size: 12px; cursor: pointer;">Installieren</button>
                <button onclick="dismissInstallBanner()" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 0; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center;">×</button>
            </div>
        </div>
    </div>

    <!-- Offline Indicator -->
    <div id="offlineIndicator" style="display: none; position: fixed; top: 0; left: 0; right: 0; background: #FF6B6B; color: white; text-align: center; padding: 8px; z-index: 9998; font-size: 14px;">
        <i class="fas fa-wifi" style="margin-right: 8px;"></i>
        Sie sind offline. Einige Funktionen sind möglicherweise eingeschränkt.
    </div>

    <!-- iOS Add to Home Screen Instructions -->
    <div id="iosInstallInstructions" style="display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.9); z-index: 10000; color: white; padding: 20px; text-align: center;">
        <div style="max-width: 400px; margin: 50px auto;">
            <div style="font-size: 48px; margin-bottom: 20px;">📱</div>
            <h2 style="color: #8A2BE2; margin-bottom: 20px;">App zum Home Screen hinzufügen</h2>
            <div style="text-align: left; margin-bottom: 30px;">
                <p style="margin-bottom: 15px;"><strong>1.</strong> Tippen Sie auf das <i class="fas fa-share" style="color: #8A2BE2;"></i> Teilen-Symbol</p>
                <p style="margin-bottom: 15px;"><strong>2.</strong> Wählen Sie "Zum Home-Bildschirm"</p>
                <p style="margin-bottom: 15px;"><strong>3.</strong> Tippen Sie auf "Hinzufügen"</p>
            </div>
            <button onclick="closeIOSInstructions()" style="background: #8A2BE2; color: white; border: none; padding: 12px 24px; border-radius: 8px; font-size: 16px; cursor: pointer;">Verstanden</button>
        </div>
    </div>

    <!-- Intro Landing Page Overlay -->
    <div id="landingPage" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: #0A0A0A; z-index: 1000; overflow-y: auto; opacity: 0; transition: opacity 0.5s ease;">
        <div class="container" style="max-width: 1400px; margin: 0 auto; padding: 40px 20px;">
            <!-- Hero Section -->
            <div style="display: flex; flex-direction: column; margin-bottom: 40px; opacity: 0; transform: translateY(20px); transition: all 0.6s ease;" class="landing-hero-section">
                <div style="text-align: center; margin-bottom: 20px;">
                    <h1 style="font-family: 'Playfair Display', serif; font-size: 42px; margin: 0; color: #FFFFFF; letter-spacing: -0.5px; background: linear-gradient(90deg, #8A2BE2, #B05EED); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent;">Swiss Asset Pro</h1>
                </div>
                <h2 style="font-family: 'Playfair Display', serif; font-size: 32px; color: #FFFFFF; margin: 20px auto; font-weight: 500; text-align: center;">Willkommen zur professionellen Portfolio-Simulation</h2>
                <p style="font-family: 'Inter', sans-serif; font-size: 16px; color: #D9D9D9; max-width: 800px; line-height: 1.6; text-align: center; margin: 0 auto;">Wählen Sie einen Bereich, um direkt einzusteigen, oder erkunden Sie alle Funktionen für eine umfassende Finanzanalyse Ihres Portfolios.</p>
            </div>
            
            <!-- Panels Container -->
            <div id="landingPanelsContainer" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); gap: 20px; opacity: 0; transform: translateY(30px); transition: all 0.8s ease;">
                <!-- Panels werden per JavaScript dynamisch erzeugt -->
            </div>
        </div>
    </div>
    
    <div id="mainContent" class="custom-surface" style="display: none; overflow-y: auto;">
        <header style="background: #2a2a2a; border-bottom: 4px solid #2A2A2A; padding: 20px 0; width: 100%; margin: 0;">
            <div class="container">
                <!-- Swiss Asset Pro Titel oben -->
                <div style="text-align: center; margin-bottom: 30px; position: relative;">
                    <!-- Language Button links -->
                    <div style="position: absolute; left: 0; top: 50%; transform: translateY(-50%); display: flex; gap: 4px; background: #1A1A1A; padding: 4px; border-radius: 6px;">
                        <button style="background: #2A2A2A; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px; font-weight: 600; transition: all 0.3s;">DE</button>
                        <button style="background: transparent; color: rgba(255,255,255,0.6); border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px; font-weight: 600; transition: all 0.3s;">EN</button>
                        <button style="background: transparent; color: rgba(255,255,255,0.6); border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px; font-weight: 600; transition: all 0.3s;">FR</button>
                    </div>
                    
                    <!-- Name und LinkedIn rechts -->
                    <div style="position: absolute; right: 0; top: 50%; transform: translateY(-50%); display: flex; flex-direction: column; align-items: flex-end; gap: 6px;">
                        <div style="color: white; font-size: 14px; font-weight: 600; font-family: 'Inter', sans-serif; letter-spacing: 0.3px;">Ahmed Choudhary</div>
                        <a href="https://www.linkedin.com/in/ahmed-choudhary-3a61371b6" target="_blank" style="color: rgba(255,255,255,0.7); text-decoration: none; font-family: 'Inter', sans-serif; font-size: 13px; font-weight: 500; transition: all 0.3s; border-bottom: 1px solid transparent;" onmouseover="this.style.color='white'; this.style.borderBottom='1px solid white'" onmouseout="this.style.color='rgba(255,255,255,0.7)'; this.style.borderBottom='1px solid transparent'">
                            LinkedIn
                        </a>
                    </div>
                    
                    <div style="display: flex; align-items: center; justify-content: center;">
                        <h1 style="font-family: 'Playfair Display', serif; font-size: 36px; font-weight: 300; margin: 0; letter-spacing: -1px; color: white;">Swiss Asset Pro</h1>
                    </div>
                    <div style="font-size: 14px; margin-top: 5px; color: white;">Professionelle Portfolio Simulation</div>
                </div>
                
                <!-- Navigation in der Mitte -->
                <div class="nav-tabs" id="headerNavTabs" style="margin-bottom: 25px;">
                    <div class="nav-tab" id="startseiteLink" aria-label="Zurück zur Startseite">Startseite</div>
                    <div class="nav-tab active" data-page="getting-started">Getting Started</div>
                    <div class="nav-tab" data-page="dashboard">Dashboard</div>
                    <div class="nav-tab" data-page="portfolio">Portfolio Entwicklung</div>
                    <div class="nav-tab" data-page="strategieanalyse">Strategie Analyse</div>
                    <div class="nav-tab" data-page="simulation">Zukunfts-Simulation</div>
                    <div class="nav-tab" data-page="backtesting">Backtesting</div>
                    <div class="nav-tab" data-page="investing">Investing</div>
                    <div class="nav-tab" data-page="bericht">Bericht & Analyse</div>
                    <div class="nav-tab" data-page="markets">Märkte & News</div>
                    <div class="nav-tab" data-page="assets">Assets & Investment</div>
                    <div class="nav-tab" data-page="methodik">Methodik</div>
                    <div class="nav-tab" data-page="black-litterman">Black-Litterman</div>
                    <div class="nav-tab" data-page="about">Über mich</div>
                </div>
                
            </div>
        </header>     

    <!-- Background removed for clean black design -->

    <main class="container custom-getting-started">

        
            <div style="background: #2a2a2a; border: 1px solid #000000; border-radius: 4px; padding: 4px 12px; margin: 15px 0; display: flex; justify-content: space-between; align-items: center; flex-wrap: nowrap; gap: 15px; overflow-x: auto; white-space: nowrap; font-size: 9px; min-height: 22px;">
                <span style="color: #D9D9D9;">Update: <span id="lastUpdate" style="font-weight: 600; color: white;">--:--:--</span></span>
                <span style="color: #888;">|</span>
                <span style="color: #D9D9D9; cursor: pointer;" onclick="window.open('https://www.six-group.com/en/home.html', '_blank')">SMI: <span id="smiReturn" style="font-weight: 600; color: #4CAF50;">+0.8%</span></span>
                <span style="color: #888;">|</span>
                <span style="color: #D9D9D9;">Portfolio: <span id="portfolioReturn" style="font-weight: 600; color: #4CAF50;">+0.0%</span></span>
                <span style="color: #888;">|</span>
                <span style="color: #D9D9D9;">Wert: <span id="portfolioValue" style="font-weight: 600; color: white;">CHF 0</span></span>
                <span style="color: #888;">|</span>
                <span style="color: #D9D9D9;">Markets: 
                    <span id="six-status" style="color: #f44336; font-weight: 600; padding: 1px 4px; border-radius: 2px;">SIX: Closed</span>
                    <span id="nyse-status" style="color: #f44336; font-weight: 600; padding: 1px 4px; border-radius: 2px;">NYSE: Closed</span>
                    <span id="lse-status" style="color: #f44336; font-weight: 600; padding: 1px 4px; border-radius: 2px;">LSE: Closed</span>
                    <span id="xetra-status" style="color: #f44336; font-weight: 600; padding: 1px 4px; border-radius: 2px;">XETRA: Closed</span>
                    <span id="nasdaq-status" style="color: #f44336; font-weight: 600; padding: 1px 4px; border-radius: 2px;">NASDAQ: Closed</span>
                </span>
            </div>

            <!-- Getting Started -->
            <section id="getting-started" class="page active">
                <div class="page-header">
                    <h2>Welcome to Swiss Asset Pro</h2>
                    <p>Ihr Leitfaden für fundierte Anlageentscheidungen</p>
                </div>
                
                <!-- Visual Website Structure -->
                <div class="card">
                    <h3>🌐 Seitenübersicht</h3>
                    <div class="card-content">
                        <p>Hier sind alle verfügbaren Seiten und was Sie dort machen können:</p>
                        
                        <div class="website-structure">
                            <div class="structure-section">
                                <h4>📋 Navigation in chronologischer Reihenfolge</h4>
                                <div class="structure-items">
                                    <div class="structure-item" onclick="switchToPage('dashboard')">
                                        <strong>1. Dashboard</strong> - Portfolio-Performance, Vermögensallokation und wichtige Kennzahlen
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('portfolio')">
                                        <strong>2. Portfolio Entwicklung</strong> - Detaillierte Entwicklung Ihrer Anlagen über Zeit
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('strategieanalyse')">
                                        <strong>3. Strategie Analyse</strong> - Korrelationsanalyse, Risikobewertung und Portfolio-Optimierung
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('simulation')">
                                        <strong>4. Zukunftssimulation</strong> - Monte-Carlo-Simulation für verschiedene Szenarien
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('backtesting')">
                                        <strong>5. Backtesting</strong> - Historische Performance-Tests Ihrer Anlagestrategien
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('investing')">
                                        <strong>6. Investing</strong> - Anlageformen, Value Testing und Momentum Growth Strategien
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('bericht')">
                                        <strong>7. Bericht & Analyse</strong> - Detaillierte PDF-Reports und Portfolio-Analysen
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('markets')">
                                        <strong>8. Märkte & News</strong> - Live-Marktdaten, Finanznachrichten und Marktanalysen
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('assets')">
                                        <strong>9. Assets & Investment</strong> - Detaillierte Informationen zu verschiedenen Anlageklassen
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('methodik')">
                                        <strong>10. Methodik</strong> - Grundlagen der Portfolio-Optimierung und Risikomanagement
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('black-litterman')">
                                        <strong>11. Black-Litterman</strong> - Erweiterte Portfolio-Optimierung mit subjektiven Ansichten
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('about')">
                                        <strong>12. Über mich</strong> - Informationen über Ahmed Choudhary und die Plattform
                                    </div>
                                </div>
                            </div>
                            
                            <div class="structure-section">
                                <h4>🧪 Strategie-Testing & Analyse</h4>
                                <div class="structure-items">
                                    <div class="structure-item" onclick="switchToPage('backtesting')">
                                        <i class="fas fa-flask"></i>
                                        <div>
                                            <strong>Backtesting</strong>
                                            <p>Testen Sie Investment-Strategien mit historischen Daten (NEU!)</p>
                                        </div>
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('strategieanalyse')">
                                        <i class="fas fa-chart-bar"></i>
                                        <div>
                                            <strong>Strategie Analyse</strong>
                                            <p>Vergleichen Sie verschiedene Anlagestrategien und optimieren Sie Ihre Allokation</p>
                                        </div>
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('simulation')">
                                        <i class="fas fa-rocket"></i>
                                        <div>
                                            <strong>Zukunfts-Simulation</strong>
                                            <p>Projizieren Sie zukünftige Performance mit Monte-Carlo-Simulationen</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="structure-section">
                                <h4>💡 Investment-Tools</h4>
                                <div class="structure-items">
                                    <div class="structure-item" onclick="switchToPage('investing')">
                                        <i class="fas fa-hand-holding-usd"></i>
                                        <div>
                                            <strong>Investing</strong>
                                            <p>Value Testing, Momentum Growth, Buy & Hold, Carry Strategy</p>
                                        </div>
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('black-litterman')">
                                        <i class="fas fa-brain"></i>
                                        <div>
                                            <strong>Black-Litterman</strong>
                                            <p>Portfolio-Optimierung mit subjektiven Marktansichten</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="structure-section">
                                <h4>📈 Marktinformationen</h4>
                                <div class="structure-items">
                                    <div class="structure-item" onclick="switchToPage('markets')">
                                        <i class="fas fa-globe"></i>
                                        <div>
                                            <strong>Märkte & News</strong>
                                            <p>Aktuelle Marktdaten, Finanznachrichten und Marktstatus</p>
                                        </div>
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('assets')">
                                        <i class="fas fa-coins"></i>
                                        <div>
                                            <strong>Assets & Investment</strong>
                                            <p>Übersicht aller verfügbaren Anlageklassen und deren Eigenschaften</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="structure-section">
                                <h4>📚 Wissen & Berichte</h4>
                                <div class="structure-items">
                                    <div class="structure-item" onclick="switchToPage('methodik')">
                                        <i class="fas fa-calculator"></i>
                                        <div>
                                            <strong>Methodik</strong>
                                            <p>Erklärung der verwendeten Berechnungsmethoden und Kennzahlen</p>
                                        </div>
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('bericht')">
                                        <i class="fas fa-file-alt"></i>
                                        <div>
                                            <strong>Bericht & Analyse</strong>
                                            <p>Detaillierte Berichte und tiefergehende Portfolio-Analysen</p>
                                        </div>
                                    </div>
                                    <div class="structure-item" onclick="switchToPage('about')">
                                        <i class="fas fa-user"></i>
                                        <div>
                                            <strong>Über mich</strong>
                                            <p>Informationen über den Entwickler und verwendete Datenquellen</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Quick Start Guide -->
                <div class="card">
                    <h3>🚀 Schnellstart-Anleitung</h3>
                    <div class="card-content">
                        <p>Folgen Sie diesen Schritten für einen optimalen Einstieg in Swiss Asset Pro:</p>
                        
                        <div class="steps-container">
                            <div class="step">
                                <div class="step-number">1</div>
                                <div class="step-content">
                                    <h4>Portfolio erstellen</h4>
                                    <p>Beginnen Sie mit dem Dashboard und fügen Sie Ihre ersten Assets hinzu. Nutzen Sie die Portfolio-Entwicklung, um Ihre Anlagen zu verfolgen.</p>
                                    <div class="step-actions">
                                        <button class="btn secondary" onclick="switchToPage('dashboard')">Dashboard öffnen</button>
                                        <button class="btn secondary" onclick="switchToPage('portfolio')">Portfolio verwalten</button>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="step">
                                <div class="step-number">2</div>
                                <div class="step-content">
                                    <h4>Strategien testen</h4>
                                    <p>Testen Sie verschiedene Investment-Strategien im Backtesting-Modul und übernehmen Sie erfolgreiche Strategien in Ihr Portfolio.</p>
                                    <div class="step-actions">
                                        <button class="btn secondary" onclick="switchToPage('backtesting')">Backtesting starten</button>
                                        <button class="btn secondary" onclick="switchToPage('strategieanalyse')">Strategien vergleichen</button>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="step">
                                <div class="step-number">3</div>
                                <div class="step-content">
                                    <h4>Erweiterte Analyse</h4>
                                    <p>Nutzen Sie die Investment-Tools für Value Testing, Momentum-Analyse und Black-Litterman-Optimierung.</p>
                                    <div class="step-actions">
                                        <button class="btn secondary" onclick="switchToPage('investing')">Investment-Tools</button>
                                        <button class="btn secondary" onclick="switchToPage('black-litterman')">Black-Litterman</button>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="step">
                                <div class="step-number">4</div>
                                <div class="step-content">
                                    <h4>Simulation & Planung</h4>
                                    <p>Projizieren Sie zukünftige Performance und erstellen Sie detaillierte Berichte für Ihre Anlageentscheidungen.</p>
                                    <div class="step-actions">
                                        <button class="btn secondary" onclick="switchToPage('simulation')">Simulationen</button>
                                        <button class="btn secondary" onclick="switchToPage('bericht')">Berichte erstellen</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <h3>Plattform-Funktionen</h3>
                    <div class="card-content">
                        <div class="features-grid">
                            <div class="feature-item">
                                <div class="feature-icon"><i class="fas fa-chart-line"></i></div>
                                <h4>Portfolio-Tracking</h4>
                                <p>Echtzeit-Überwachung Ihrer Anlagen mit Performance-Kennzahlen und Analysen.</p>
                            </div>
                            
                            <div class="feature-item">
                                <div class="feature-icon"><i class="fas fa-balance-scale"></i></div>
                                <h4>Risikobewertung</h4>
                                <p>Umfassende Risikobewertungstools zum Verständnis und Management Ihres Portfolio-Risikos.</p>
                            </div>
                            
                            <div class="feature-item">
                                <div class="feature-icon"><i class="fas fa-random"></i></div>
                                <h4>Portfolio-Optimierung</h4>
                                <p>Fortschrittliche Algorithmen zur Optimierung Ihrer Vermögensallokation für bessere Renditen.</p>
                            </div>
                            
                            <div class="feature-item">
                                <div class="feature-icon"><i class="fas fa-search-dollar"></i></div>
                                <h4>Marktanalyse</h4>
                                <p>Bleiben Sie informiert über die neuesten Markttrends, Nachrichten und Anlagemöglichkeiten.</p>
                            </div>
                            
                            <div class="feature-item">
                                <div class="feature-icon"><i class="fas fa-calculator"></i></div>
                                <h4>Finanzplanung</h4>
                                <p>Tools zur Planung Ihrer Altersvorsorge, Ausbildung oder anderer finanzieller Ziele.</p>
                            </div>
                            
                            <div class="feature-item">
                                <div class="feature-icon"><i class="fas fa-file-alt"></i></div>
                                <h4>Individuelle Berichte</h4>
                                <p>Erstellen Sie detaillierte Berichte und Analysen, um Ihre Anlageentwicklung zu verfolgen.</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="quick-links-container">
                    <h3>Schnellzugriff</h3>
                    <div class="quick-links">
                        <a href="#" class="quick-link" onclick="document.querySelector('[data-page=investing]').click();">
                            <i class="fas fa-graduation-cap"></i>
                            <span>Anlage-Bildung</span>
                        </a>
                        <a href="#" class="quick-link" onclick="document.querySelector('[data-page=markets]').click();">
                            <i class="fas fa-newspaper"></i>
                            <span>Marktnachrichten</span>
                        </a>
                        <a href="#" class="quick-link" onclick="document.querySelector('[data-page=assets]').click();">
                            <i class="fas fa-coins"></i>
                            <span>Assets erkunden</span>
                        </a>
                        <a href="#" class="quick-link" onclick="document.querySelector('[data-page=methodik]').click();">
                            <i class="fas fa-book"></i>
                            <span>Methodik</span>
                        </a>
                    </div>
                </div>

                <!-- FINMA Disclaimer -->
                <div class="card" style="background: linear-gradient(145deg, #2A2A2A, #232323); border: 2px solid #FFD700; box-shadow: 0 4px 20px rgba(255, 215, 0, 0.2); margin-top: 30px;">
                    <h3 style="color: #FFD700; text-align: center; margin-bottom: 20px;">
                        <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                        FINMA Hinweis
                    </h3>
                    
                    <div style="background: rgba(255, 215, 0, 0.1); padding: 20px; border-radius: 8px; border: 1px solid rgba(255, 215, 0, 0.3);">
                        <h4 style="color: #FFD700; margin-bottom: 15px;">Wichtiger rechtlicher Hinweis:</h4>
                        
                        <p style="color: #E8E8E8; margin-bottom: 15px; line-height: 1.6;">
                            <strong>Diese Plattform ist keine FINMA-lizenzierte Finanzdienstleistung.</strong> 
                            Alle hier dargestellten Analysen, Simulationen und Empfehlungen dienen ausschließlich 
                            Bildungs- und Informationszwecken und stellen keine Anlageberatung dar.
                        </p>
                        
                        <div style="background: #1A1A1A; padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #FFD700;">
                            <h5 style="color: #FFD700; margin: 0 0 10px 0;">Keine Anlageberatung:</h5>
                            <ul style="color: #D0D0D0; margin: 0; padding-left: 20px;">
                                <li>Keine individuelle Anlageempfehlungen</li>
                                <li>Keine Berücksichtigung persönlicher Umstände</li>
                                <li>Keine Garantie für Renditen oder Verluste</li>
                                <li>Keine Haftung für Anlageentscheidungen</li>
                            </ul>
                        </div>
                        
                        <div style="background: #1A1A1A; padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #FF6B6B;">
                            <h5 style="color: #FF6B6B; margin: 0 0 10px 0;">Risikohinweis:</h5>
                            <p style="color: #D0D0D0; margin: 0; line-height: 1.6;">
                                Alle Anlagen sind mit Risiken verbunden. Der Wert von Anlagen kann fallen und steigen. 
                                Vergangene Performance ist kein Indikator für zukünftige Ergebnisse. 
                                <strong>Investieren Sie nur Geld, dessen Verlust Sie sich leisten können.</strong>
                            </p>
                        </div>
                        
                        <div style="background: #1A1A1A; padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #87CEEB;">
                            <h5 style="color: #87CEEB; margin: 0 0 10px 0;">Empfehlung:</h5>
                            <p style="color: #D0D0D0; margin: 0; line-height: 1.6;">
                                Konsultieren Sie vor jeder Anlageentscheidung einen qualifizierten Finanzberater 
                                oder eine FINMA-lizenzierte Bank. Diese Plattform ersetzt keine professionelle Beratung.
                            </p>
                        </div>
                        
                        <div style="text-align: center; margin-top: 20px; padding-top: 15px; border-top: 1px solid rgba(255, 215, 0, 0.3);">
                            <p style="color: #888; font-size: 12px; margin: 0;">
                                Weitere Informationen: <a href="https://www.finma.ch" target="_blank" style="color: #FFD700;">www.finma.ch</a>
                            </p>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Dashboard -->
            <section id="dashboard" class="page">
                <div class="page-header">
                    <h2>Portfolio Dashboard</h2>
                    <p>Erstellen und verwalten Sie Ihr persönliches Aktienportfolio</p>
                </div>
                
                <div class="instruction-box">
                    <h4>📊 Was Sie hier tun können:</h4>
                    <p>Wählen Sie Schweizer Aktien, internationale Indizes und andere Assets aus. Legen Sie für jede Anlage den Investitionsbetrag fest und klicken Sie auf "Portfolio Berechnen", um die vollständige Analyse zu erhalten.</p>
                    <div class="price-update-info">
                        <i class="fas fa-chart-line" style="margin-right: 5px"></i> <strong>Live-Daten:</strong> Aktuelle Aktienkurse werden automatisch geladen und alle 15 Minuten aktualisiert
                    </div>
                </div>
                
                <div class="portfolio-setup">
                    <h3 style="color: var(--color-primary); margin-bottom: 15px;">Portfolio Konfiguration</h3>
                    <div class="investment-inputs">
                        <div class="input-group">
                            <label>Gesamtinvestition (CHF)</label>
                            <input type="number" id="totalInvestment" class="search-input" value="100000" min="1000" step="1000">
                        </div>
                        <div class="input-group">
                            <label>Investitionszeitraum (Jahre)</label>
                            <input type="number" id="investmentYears" class="search-input" value="5" min="1" max="30">
                        </div>
                        <div class="input-group">
                            <label>Risikoprofil</label>
                            <select id="riskProfile" class="search-input">
                                <option value="conservative">Konservativ</option>
                                <option value="moderate" selected>Moderat</option>
                                <option value="aggressive">Aggressiv</option>
                            </select>
                        </div>
                    </div>
                    <div id="totalValidation" class="total-validation validation-ok">
                        Investitionen stimmen überein: CHF 0 von CHF 100.000
                    </div>
                </div>
                
                <div class="search-container">
                    <select class="search-input" id="stockSelect">
                        <option value="">Schweizer Aktie auswählen...</option>
                    </select>
                    <select class="search-input" id="indexSelect">
                        <option value="">Internationale Indizes...</option>
                    </select>
                    <select class="search-input" id="assetSelect">
                        <option value="">Weitere Assets...</option>
                    </select>
                    <button class="btn" onclick="addStock()" style="background: #444444;">Aktie hinzufügen</button>
                    <button class="btn" onclick="addIndex()" style="background: #6B46C1;">Index hinzufügen</button>
                    <button class="btn" onclick="addAsset()" style="background: #28A745;">Asset hinzufügen</button>
                </div>
                
                <div class="selected-stocks" id="selectedStocks"></div>
                
                <div class="calculate-section">
                    <h3 style="color: white; margin-bottom: 15px;">Portfolio Analyse Starten</h3>
                    <p style="margin-bottom: 20px; opacity: 0.9;">Klicken Sie auf Berechnen, um Ihre Portfolio-Performance zu analysieren</p>
                    <button class="btn btn-calculate" onclick="calculatePortfolio()">
                        <i class="fas fa-calculator"></i> Portfolio Berechnen
                    </button>
                </div>
                
                <!-- Portfolio Chart in zwei Kacheln -->
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                    <!-- Links: Kuchen-Diagramm -->
                    <div class="chart-container" style="height: 400px; margin: 0;">
                        <canvas id="portfolioChart"></canvas>
                    </div>
                    <!-- Rechts: Legende -->
                    <div class="chart-container" style="height: 400px; margin: 0; display: flex; flex-direction: column; justify-content: center;">
                        <h4 style="color: var(--text-primary); margin-bottom: 20px; text-align: center;">Portfolio Verteilung</h4>
                        <div id="portfolioLegend" style="display: flex; flex-direction: column; gap: 10px; max-height: 300px; overflow-y: auto;">
                            <!-- Legende wird hier dynamisch eingefügt -->
                        </div>
                    </div>
                </div>
                
                <!-- Asset Performance Chart mit Zeitraum-Switcher -->
                <div class="card">
                    <h3>Asset Performance</h3>
                    <div class="timeframe-switcher">
                        <button class="timeframe-btn active" onclick="switchTimeframe('5y')">5 Jahre</button>
                        <button class="timeframe-btn" onclick="switchTimeframe('1y')">1 Jahr</button>
                        <button class="timeframe-btn" onclick="switchTimeframe('6m')">6 Monate</button>
                        <button class="timeframe-btn" onclick="switchTimeframe('1m')">1 Monat</button>
                    </div>
                    <div class="asset-performance-chart">
                        <canvas id="assetPerformanceChart"></canvas>
                    </div>
                </div>
                
                <div class="card-grid">
                    <div class="card">
                        <h3>Portfolio Performance</h3>
                        <div id="portfolioPerformance">
                            <div class="metric-value">0.0%</div>
                            <div class="metric-label">Erwartete Jahresrendite</div>
                        </div>
                    </div>
                    <div class="card">
                        <h3>Risiko Analyse</h3>
                        <div id="riskAnalysis">
                            <div class="metric-value">0.0%</div>
                            <div class="metric-label">Volatilität p.a.</div>
                        </div>
                    </div>
                    <div class="card">
                        <h3>Diversifikation</h3>
                        <div id="diversification">
                            <div class="metric-value">0/10</div>
                            <div class="metric-label">Diversifikations-Score</div>
                        </div>
                    </div>
                    <div class="card">
                        <h3>Sharpe Ratio</h3>
                        <div id="sharpeRatio">
                            <div class="metric-value">0.00</div>
                            <div class="metric-label">Risiko-adjustierte Rendite</div>
                        </div>
                    </div>
                </div>
                
                <!-- Live Data Section -->
                <div class="card">
                    <h3>Live Marktdaten</h3>
                    <div class="market-grid" id="liveMarketData">
                        <div class="market-item">
                            <h4>SMI</h4>
                            <div class="metric-value">Lädt...</div>
                            <div class="metric-label">--</div>
                        </div>
                        <div class="market-item">
                            <h4>S&P 500</h4>
                            <div class="metric-value">Lädt...</div>
                            <div class="metric-label">--</div>
                        </div>
                        <div class="market-item">
                            <h4>Gold</h4>
                            <div class="metric-value">Lädt...</div>
                            <div class="metric-label">--</div>
                        </div>
                        <div class="market-item">
                            <h4>EUR/CHF</h4>
                            <div class="metric-value">Lädt...</div>
                            <div class="metric-label">--</div>
                        </div>
                    </div>
                    <button class="refresh-button" onclick="refreshMarketData()">
                        <i class="fas fa-sync-alt"></i> Daten aktualisieren
                    </button>
                </div>
            </section>

            <!-- Portfolio Entwicklung -->
            <section id="portfolio" class="page">
                <div class="page-header">
                    <h2>Portfolio Entwicklung</h2>
                    <p>Historische Performance und detaillierte Analyse</p>
                </div>
                
                <div class="instruction-box">
                    <h4>📈 Performance-Tracking:</h4>
                    <p>Analysieren Sie die historische Entwicklung Ihres Portfolios und identifizieren Sie Optimierungspotenziale.</p>
                    <button class="refresh-button" onclick="updatePortfolioDevelopment()">
                        <i class="fas fa-sync-alt"></i> Performance aktualisieren
                    </button>
                </div>
                
                <div class="chart-container">
                    <canvas id="performanceChart"></canvas>
                </div>
                
                <div class="performance-metrics">
                    <div class="performance-card">
                        <div class="metric-value positive" id="totalReturn">+0.0%</div>
                        <div class="metric-label">Gesamtrendite</div>
                    </div>
                    <div class="performance-card">
                        <div class="metric-value" id="annualizedReturn">0.0%</div>
                        <div class="metric-label">Annualisierte Rendite</div>
                    </div>
                    <div class="performance-card">
                        <div class="metric-value" id="maxDrawdown">0.0%</div>
                        <div class="metric-label">Maximaler Verlust</div>
                    </div>
                    <div class="performance-card">
                        <div class="metric-value" id="volatilityHistory">0.0%</div>
                        <div class="metric-label">Historische Volatilität</div>
                    </div>
                </div>
                
                <!-- Benchmark Vergleich -->
                <div class="card">
                    <h3>Performance vs. Benchmarks</h3>
                    <div class="benchmark-comparison" id="benchmarkComparison">
                        <div class="benchmark-card">
                            <h4>Ihr Portfolio</h4>
                            <div class="metric-value" id="portfolioBenchmarkReturn">0.0%</div>
                            <div class="metric-label">Erwartete Rendite</div>
                        </div>
                    </div>
                </div>
                
                <!-- Peer Group Vergleich -->
                <div class="card">
                    <h3>Vergleich mit Schweizer Privatbanken</h3>
                    <div class="peer-comparison" id="peerComparison">
                        <!-- Wird dynamisch gefüllt -->
                    </div>
                </div>
                
                <div class="card">
                    <h3>Performance-Analyse</h3>
                    <div id="performanceAnalysis">
                        <p>Bitte erstellen Sie zuerst ein Portfolio im Dashboard und klicken Sie auf "Portfolio Berechnen".</p>
                    </div>
                </div>
            </section>

            <!-- Strategie Analyse -->
            <section id="strategieanalyse" class="page">
                <!-- Wird dynamisch gefüllt -->
            </section>

            <!-- Zukunfts-Simulation -->
            <section id="simulation" class="page">
                <div class="page-header">
                    <h2>Zukunfts-Simulation</h2>
                    <p>Strategie-basierte Prognosen und Szenario-Analyse</p>
                </div>
                
                <div class="instruction-box">
                    <h4>🔮 Was diese Simulation zeigt:</h4>
                    <p>Basierend auf den 5 Optimierungsstrategien sehen Sie verschiedene Zukunftspfade für Ihr Portfolio. Jede Strategie hat unterschiedliche Risiko-Rendite-Profile.</p>
                    <button class="refresh-button" onclick="updateSimulationPage()">
                        <i class="fas fa-sync-alt"></i> Simulation aktualisieren
                    </button>
                </div>
                
                <div class="chart-container">
                    <canvas id="simulationChart"></canvas>
                </div>
                
                <!-- Szenario-Analyse -->
                <div class="card">
                    <h3>Szenario-Analyse</h3>
                    <p>Wie sich Ihr Portfolio unter verschiedenen wirtschaftlichen Bedingungen entwickeln könnte:</p>
                    
                    <div class="scenario-grid">
                        <div class="scenario-card scenario-normal">
                            <h4>Normale Märkte</h4>
                            <div class="metric-value positive" id="scenarioNormal">CHF 0</div>
                            <div class="metric-label">Erwartetes Wachstum</div>
                        </div>
                        <div class="scenario-card scenario-interest">
                            <h4>Zinserhöhungen</h4>
                            <div class="metric-value" id="scenarioInterest">CHF 0</div>
                            <div class="metric-label">Geringeres Wachstum</div>
                        </div>
                        <div class="scenario-card scenario-inflation">
                            <h4>Hohe Inflation</h4>
                            <div class="metric-value" id="scenarioInflation">CHF 0</div>
                            <div class="metric-label">Inflationsangepasst</div>
                        </div>
                        <div class="scenario-card scenario-recession">
                            <h4>Rezession</h4>
                            <div class="metric-value negative" id="scenarioRecession">CHF 0</div>
                            <div class="metric-label">Risiko von Verlusten</div>
                        </div>
                        <div class="scenario-card scenario-growth">
                            <h4>Starkes Wachstum</h4>
                            <div class="metric-value positive" id="scenarioGrowth">CHF 0</div>
                            <div class="metric-label">Überdurchschnittlich</div>
                        </div>
                    </div>
                </div>
                
                <div class="path-simulation">
                    <div class="path-card">
                        <h4>Optimistisches Szenario</h4>
                        <div class="metric-value positive" id="optimisticValue">CHF 0</div>
                        <div class="metric-label">+15% über Benchmark</div>
                    </div>
                    <div class="path-card">
                        <h4>Basisszenario</h4>
                        <div class="metric-value" id="baseValue">CHF 0</div>
                        <div class="metric-label">Erwartete Entwicklung</div>
                    </div>
                    <div class="path-card">
                        <h4>Konservatives Szenario</h4>
                        <div class="metric-value negative" id="conservativeValue">CHF 0</div>
                        <div class="metric-label">Risikominimiert</div>
                    </div>
                </div>
                
                <div class="card">
                    <h3>Strategie-Pfade im Vergleich</h3>
                    <div id="strategyPaths">
                        <p>Die Simulation zeigt, wie sich Ihr Portfolio unter verschiedenen Strategien entwickeln könnte. Bitte berechnen Sie zuerst Ihr Portfolio.</p>
                    </div>
                </div>
            </section>

            <!-- Backtesting Page -->
            <section id="backtesting" class="page">
                <div class="page-header">
                    <h2>Backtesting & Strategie-Testing</h2>
                    <p>Testen Sie Ihre Investment-Strategien mit historischen Daten</p>
                </div>
                
                <div class="instruction-box">
                    <h4>🧪 Strategie-Testing & Backtesting:</h4>
                    <p>Testen Sie verschiedene Investment-Strategien mit echten Marktdaten. Nach erfolgreichem Backtest können Sie die bewährten Strategien direkt in Ihr Portfolio übernehmen.</p>
                </div>

                <!-- Strategy Builder -->
                <!-- Swiss Tax Calculator Section -->
                <div class="theory-section" id="swissTaxSection">
                    <h3>🇨🇭 Swiss Tax Calculator</h3>
                    <div class="tax-calculator">
                        <div class="tax-inputs">
                            <div class="input-group">
                                <label>Symbol:</label>
                                <select id="taxSymbol">
                                    <!-- Options werden dynamisch per JavaScript gefüllt -->
                                </select>
                            </div>
                            <div class="input-group">
                                <label>Transaction Type:</label>
                                <select id="taxType">
                                    <option value="purchase">Purchase</option>
                                    <option value="sale">Sale</option>
                                    <option value="dividend">Dividend</option>
                                </select>
                            </div>
                            <div class="input-group">
                                <label>Amount (CHF):</label>
                                <input type="number" id="taxAmount" value="10000" min="0" step="100">
                            </div>
                            <button onclick="calculateSwissTax()" class="btn btn-primary">Calculate Tax</button>
                        </div>
                        <div class="tax-results" id="taxResults" style="display: none;">
                            <h4>Tax Calculation Results</h4>
                            <div class="tax-breakdown">
                                <div class="tax-item">
                                    <span>Gross Amount:</span>
                                    <span id="grossAmount">-</span>
                                </div>
                                <div class="tax-item">
                                    <span>Stamp Tax:</span>
                                    <span id="stampTax">-</span>
                                </div>
                                <div class="tax-item">
                                    <span>Withholding Tax:</span>
                                    <span id="withholdingTax">-</span>
                                </div>
                                <div class="tax-item total">
                                    <span>Total Tax:</span>
                                    <span id="totalTax">-</span>
                                </div>
                                <div class="tax-item net">
                                    <span>Net Amount:</span>
                                    <span id="netAmount">-</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Stress Testing Section -->
                <div class="theory-section" id="stressTestSection">
                    <h3>⚡ Stress Testing</h3>
                    <div class="stress-test-controls">
                        <div class="scenario-grid">
                            <div class="scenario-card" onclick="runStressTest('2008_financial_crisis')">
                                <h4>2008 Financial Crisis</h4>
                                <p>Equity -40%, Bonds +10%</p>
                            </div>
                            <div class="scenario-card" onclick="runStressTest('covid_2020')">
                                <h4>COVID-19 2020</h4>
                                <p>Equity -30%, Bonds +5%</p>
                            </div>
                            <div class="scenario-card" onclick="runStressTest('interest_rate_shock')">
                                <h4>Interest Rate Shock</h4>
                                <p>Bonds -15%, Equity -10%</p>
                            </div>
                            <div class="scenario-card" onclick="runStressTest('swiss_franc_strength')">
                                <h4>CHF Strength</h4>
                                <p>Swiss Equity +10%, Exports -20%</p>
                            </div>
                            <div class="scenario-card" onclick="runStressTest('inflation_shock')">
                                <h4>Inflation Shock</h4>
                                <p>Real Assets +20%, Bonds -25%</p>
                            </div>
                        </div>
                        <div class="stress-results" id="stressResults" style="display: none;">
                            <h4>Stress Test Results</h4>
                            <div class="stress-metrics" id="stressMetrics"></div>
                        </div>
                    </div>
                </div>

                <!-- Portfolio Optimization Section -->
                <div class="theory-section" id="optimizationSection">
                    <h3>🎯 Portfolio Optimization</h3>
                    <div class="optimization-controls">
                        <div class="input-group">
                            <label>Target Return (%):</label>
                            <input type="number" id="targetReturn" value="8" min="0" max="20" step="0.5">
                        </div>
                        <div class="input-group">
                            <label>Risk Tolerance:</label>
                            <select id="riskTolerance">
                                <option value="conservative">Conservative</option>
                                <option value="moderate" selected>Moderate</option>
                                <option value="aggressive">Aggressive</option>
                            </select>
                        </div>
                        <button onclick="optimizePortfolio()" class="btn btn-primary">Optimize Portfolio</button>
                    </div>
                    <div class="optimization-results" id="optimizationResults" style="display: none;">
                        <h4>Optimization Results</h4>
                        <div class="optimization-metrics" id="optimizationMetrics"></div>
                    </div>
                </div>

                <!-- DCF Valuation Section -->
                <div class="theory-section" id="dcfSection">
                    <h3>💰 DCF Valuation</h3>
                    <div class="dcf-controls">
                        <div class="input-group">
                            <label>Company Symbol:</label>
                            <input type="text" id="dcfSymbol" placeholder="AAPL" value="AAPL">
                        </div>
                        <div class="input-group">
                            <label>Growth Rate (%):</label>
                            <input type="number" id="dcfGrowthRate" value="5" min="0" max="50" step="0.1">
                        </div>
                        <div class="input-group">
                            <label>WACC (%):</label>
                            <input type="number" id="dcfWacc" value="10" min="1" max="30" step="0.1">
                        </div>
                        <button onclick="calculateDCF()" class="btn btn-primary">Calculate DCF</button>
                        <button onclick="getDCFSensitivity()" class="btn btn-secondary">Sensitivity Analysis</button>
                    </div>
                    <div class="dcf-results" id="dcfResults" style="display: none;">
                        <h4>DCF Valuation Results</h4>
                        <div class="dcf-metrics" id="dcfMetrics"></div>
                    </div>
                </div>

                <!-- Interactive Charts Section -->
                <div class="theory-section" id="chartsSection">
                    <h3>📊 Interactive Charts</h3>
                    <div class="chart-controls">
                        <div class="input-group">
                            <label>Symbol:</label>
                            <input type="text" id="chartSymbol" placeholder="AAPL" value="AAPL">
                        </div>
                        <div class="input-group">
                            <label>Period:</label>
                            <select id="chartPeriod">
                                <option value="1d">1 Day</option>
                                <option value="5d">5 Days</option>
                                <option value="1mo" selected>1 Month</option>
                                <option value="3mo">3 Months</option>
                                <option value="6mo">6 Months</option>
                                <option value="1y">1 Year</option>
                                <option value="2y">2 Years</option>
                                <option value="5y">5 Years</option>
                            </select>
                        </div>
                        <button onclick="loadChart()" class="btn btn-primary">Load Chart</button>
                    </div>
                    <div class="chart-container" id="chartContainer" style="margin-top: 20px; display: none;">
                        <canvas id="priceChart" width="800" height="400"></canvas>
                    </div>
                    <div class="chart-results" id="chartResults"></div>
                </div>

                <div class="theory-section">
                    <h3>📊 Strategie-Builder</h3>
                    
                    <div class="backtesting-controls">
                        <div class="parameter-grid">
                            <div class="parameter-item">
                                <label>Strategie-Typ:</label>
                                <select id="strategyType" onchange="updateStrategyParameters()">
                                    <option value="momentum">Momentum (6M)</option>
                                    <option value="value">Value (P/B basiert)</option>
                                    <option value="buyhold">Buy & Hold</option>
                                    <option value="carry">Carry Strategy</option>
                                    <option value="meanreversion">Mean Reversion</option>
                                    <option value="riskparity">Risk Parity</option>
                                    <option value="custom">Custom (JSON)</option>
                                </select>
                            </div>
                            
                            <div class="parameter-item">
                                <label>Zeitraum:</label>
                                <select id="backtestPeriod">
                                    <option value="1y">1 Jahr</option>
                                    <option value="3y" selected>3 Jahre</option>
                                    <option value="5y">5 Jahre</option>
                                    <option value="10y">10 Jahre</option>
                                </select>
                            </div>
                            
                            <div class="parameter-item">
                                <label>Startkapital (CHF):</label>
                                <input type="number" id="initialCapital" value="100000" min="1000" step="1000">
                            </div>
                            
                            <div class="parameter-item">
                                <label>Transaktionskosten (%):</label>
                                <input type="number" id="transactionCosts" value="0.1" min="0" max="5" step="0.01">
                            </div>
                            
                            <div class="parameter-item">
                                <label>Max. Drawdown (%):</label>
                                <input type="number" id="maxDrawdown" value="20" min="5" max="50" step="1">
                            </div>
                            
                            <div class="parameter-item">
                                <label>Rebalancing:</label>
                                <select id="rebalancingFreq">
                                    <option value="monthly">Monatlich</option>
                                    <option value="quarterly" selected>Quartalsweise</option>
                                    <option value="yearly">Jährlich</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="strategy-parameters" id="strategyParameters">
                            <!-- Dynamic parameters based on strategy type -->
                        </div>
                        
                        <div class="analysis-actions">
                            <button onclick="runBacktest()" class="btn btn-primary">
                                <i class="fas fa-play"></i> Backtest starten
                            </button>
                            <button onclick="exportBacktestReport()" class="btn btn-secondary" id="exportBtn" disabled>
                                <i class="fas fa-download"></i> Report herunterladen
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Loading Container -->
                <div class="loading-container" id="backtestLoading" style="display: none;">
                    <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Backtest wird durchgeführt...</p>
                        <div class="progress-bar">
                            <div class="progress-fill" id="backtestProgress"></div>
                        </div>
                    </div>
                </div>

                <!-- Results Container -->
                <div class="backtesting-results" id="backtestingResults" style="display: none;">
                    <div class="theory-section">
                        <h3>📈 Backtest-Ergebnisse</h3>
                        
                        <!-- Key Metrics -->
                        <div class="portfolio-summary-grid">
                            <div class="summary-item">
                                <h4>Endkapital</h4>
                                <div class="metric-value" id="finalCapital">-</div>
                            </div>
                            <div class="summary-item">
                                <h4>CAGR</h4>
                                <div class="metric-value" id="cagr">-</div>
                            </div>
                            <div class="summary-item">
                                <h4>Sharpe Ratio</h4>
                                <div class="metric-value" id="sharpeRatio">-</div>
                            </div>
                            <div class="summary-item">
                                <h4>Max Drawdown</h4>
                                <div class="metric-value" id="maxDrawdownResult">-</div>
                            </div>
                            <div class="summary-item">
                                <h4>Volatilität</h4>
                                <div class="metric-value" id="volatility">-</div>
                            </div>
                            <div class="summary-item">
                                <h4>Win Rate</h4>
                                <div class="metric-value" id="winRate">-</div>
                            </div>
                        </div>

                        <!-- Charts -->
                        <div class="charts-section">
                            <div style="display: flex; gap: 20px; flex-wrap: wrap;">
                                <div style="flex: 1; min-width: 400px;">
                                    <h4>Equity Curve</h4>
                                    <canvas id="equityCurveChart" width="400" height="300"></canvas>
                                </div>
                                <div style="flex: 1; min-width: 400px;">
                                    <h4>Drawdown Chart</h4>
                                    <canvas id="drawdownChart" width="400" height="300"></canvas>
                                </div>
                            </div>
                        </div>

                        <!-- Asset Performance -->
                        <div class="data-table-container">
                            <h4>Asset-Performance</h4>
                            <div id="assetPerformanceTable"></div>
                        </div>

                        <!-- Recommendation -->
                        <div class="interpretation-box">
                            <h4>🎯 Empfehlung</h4>
                            <div id="backtestRecommendation"></div>
                            <div style="margin-top: 20px;">
                                <button onclick="adoptStrategy()" class="btn btn-primary" id="adoptStrategyBtn">
                                    <i class="fas fa-arrow-right"></i> Strategie in Portfolio übernehmen
                                </button>
                            </div>
                        </div>

                        <!-- Sources -->
                        <div class="sources-list">
                            <h4>📚 Datenquellen</h4>
                            <div id="backtestSources"></div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Investing -->
            <section id="investing" class="page">
                <div class="page-header">
                    <h2>Investing</h2>
                    <p>Verstehen von Anlageprinzipien und Strategien</p>
                </div>
                
                <div class="card">
                    <h3>Anlageprinzipien</h3>
                    <div class="card-content">
                        <p>Verstehen der grundlegenden Prinzipien, die erfolgreiche langfristige Anlagestrategien leiten.</p>
                        <div class="principles-grid">
                            <div class="principle-item">
                                <h4>Diversifikation</h4>
                                <p>Verteilung von Anlagen über verschiedene Anlageklassen, Sektoren und geografische Regionen zur Risikominderung.</p>
                                <div class="principle-content">
                                    <h5>🎯 Theorie:</h5>
                                    <p>Das Diversifikationsprinzip basiert auf der Modern Portfolio Theory von Markowitz. Durch die Kombination von Assets mit niedriger Korrelation kann das Gesamtrisiko des Portfolios reduziert werden, ohne die erwartete Rendite zu beeinträchtigen.</p>
                                    <h5>📊 Praxis-Beispiel:</h5>
                                    <p>Ein Portfolio mit 60% Aktien, 30% Anleihen und 10% Rohstoffen zeigt typischerweise 20-30% weniger Volatilität als ein reines Aktienportfolio.</p>
                                </div>
                            </div>
                            <div class="principle-item">
                                <h4>Langfristiger Fokus</h4>
                                <p>Die Kraft des Zinseszinseffekts und die Vorteile, durch Marktzyklen hindurch investiert zu bleiben.</p>
                                <div class="principle-content">
                                    <h5>🎯 Theorie:</h5>
                                    <p>Der Zinseszinseffekt ist die achte Weltwunder laut Einstein. Bei 7% jährlicher Rendite verdoppelt sich das Kapital alle 10 Jahre. Zeit im Markt schlägt Timing des Marktes.</p>
                                    <h5>📊 Praxis-Beispiel:</h5>
                                    <p>Ein Investment von CHF 10'000 mit 7% jährlicher Rendite wird nach 30 Jahren zu CHF 76'123 - ohne weitere Einzahlungen!</p>
                                </div>
                            </div>
                            <div class="principle-item">
                                <h4>Kostenmanagement</h4>
                                <p>Verstehen, wie Gebühren und Kosten langfristige Renditen beeinflussen, und Strategien zu deren Minimierung.</p>
                                <div class="principle-content">
                                    <h5>🎯 Theorie:</h5>
                                    <p>Jeder Prozentpunkt an Kosten reduziert die Rendite um denselben Betrag. Bei 2% jährlichen Kosten und 7% Marktrendite bleiben nur 5% Netto-Rendite übrig.</p>
                                    <h5>📊 Praxis-Beispiel:</h5>
                                    <p>Über 30 Jahre kostet ein aktiv verwalteter Fonds mit 2% Gebühren 40% der Gesamtrendite. ETFs mit 0.1% Kosten sparen diese Gebühren.</p>
                                </div>
                            </div>
                            <div class="principle-item">
                                <h4>Risikobewertung</h4>
                                <p>Bewertung Ihrer Risikotoleranz und Erstellung eines Portfolios, das mit Ihren finanziellen Zielen übereinstimmt.</p>
                                <div class="principle-content">
                                    <h5>🎯 Theorie:</h5>
                                    <p>Die Risikotoleranz hängt von Zeit, Zielen und psychologischer Stabilität ab. Die 100-Alter-Regel: 100 minus Ihr Alter = Aktienanteil.</p>
                                    <h5>📊 Praxis-Beispiel:</h5>
                                    <p>Ein 30-Jähriger sollte 70% Aktien haben, ein 60-Jähriger 40%. Dies berücksichtigt die längere Erholungszeit bei jüngeren Anlegern.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>Anlageformen</h3>
                    <div class="card-content">
                        <p>Überblick über verschiedene Anlagemöglichkeiten und ihre Eigenschaften.</p>
                        <div class="tabs-container">
                            <div class="tabs">
                                <div class="tab active" data-tab="stocks" onclick="switchInvestingTab('stocks')">Aktien</div>
                                <div class="tab" data-tab="bonds" onclick="switchInvestingTab('bonds')">Anleihen</div>
                                <div class="tab" data-tab="etfs" onclick="switchInvestingTab('etfs')">ETFs</div>
                                <div class="tab" data-tab="real-estate" onclick="switchInvestingTab('real-estate')">Immobilien</div>
                                <div class="tab" data-tab="alternatives" onclick="switchInvestingTab('alternatives')">Alternative</div>
                            </div>
                            <div class="tab-content active" id="stocks-content">
                                <h4>Aktien</h4>
                                <p>Eigentumsanteile an börsennotierten Unternehmen, die Kapitalzuwachs und Dividenden bieten können.</p>
                                <ul>
                                    <li><strong>Wachstumsaktien:</strong> Unternehmen, von denen ein überdurchschnittliches Wachstum erwartet wird</li>
                                    <li><strong>Substanzwertaktien:</strong> Unternehmen, die basierend auf Fundamentaldaten unterbewertet erscheinen</li>
                                    <li><strong>Dividendenaktien:</strong> Unternehmen, die regelmäßig Gewinne an Aktionäre ausschütten</li>
                                </ul>
                                <div class="chart-container" id="stocks-chart">
                                    <div class="visual-chart" style="height: 200px; background: linear-gradient(135deg, #1a1a1a, #2a2a2a); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #8A2BE2; font-size: 18px; font-weight: 600;">
                                        <div style="text-align: center;">
                                            <i class="fas fa-chart-line" style="font-size: 48px; margin-bottom: 10px; display: block;"></i>
                                            <div>Wachstums- vs. Substanzwertaktien</div>
                                            <div style="font-size: 14px; color: #a0a0a0; margin-top: 5px;">Performance-Vergleich</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-content" id="bonds-content">
                                <h4>Anleihen (Festverzinsliche Wertpapiere)</h4>
                                <p>Schuldverschreibungen, bei denen Sie einer Instanz Geld leihen, die die Mittel für einen festgelegten Zeitraum zu einem variablen oder festen Zinssatz aufnimmt.</p>
                                <ul>
                                    <li><strong>Staatsanleihen:</strong> Ausgegeben von nationalen Regierungen</li>
                                    <li><strong>Unternehmensanleihen:</strong> Ausgegeben von Unternehmen</li>
                                    <li><strong>Kommunalanleihen:</strong> Ausgegeben von Ländern, Städten oder Gemeinden</li>
                                </ul>
                                <div class="chart-container" id="bonds-chart">
                                    <div class="visual-chart" style="height: 200px; background: linear-gradient(135deg, #1a1a1a, #2a2a2a); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #4CAF50; font-size: 18px; font-weight: 600;">
                                        <div style="text-align: center;">
                                            <i class="fas fa-shield-alt" style="font-size: 48px; margin-bottom: 10px; display: block;"></i>
                                            <div>Rendite vs. Risiko</div>
                                            <div style="font-size: 14px; color: #a0a0a0; margin-top: 5px;">Staats- vs. Unternehmensanleihen</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-content" id="etfs-content">
                                <h4>ETFs (Exchange-Traded Funds)</h4>
                                <p>Wertpapierkörbe, die einen zugrunde liegenden Index abbilden und wie Aktien an Börsen gehandelt werden.</p>
                                <ul>
                                    <li><strong>Index-ETFs:</strong> Bilden bestimmte Indizes wie S&P 500 oder MSCI World ab</li>
                                    <li><strong>Sektor-ETFs:</strong> Konzentrieren sich auf bestimmte Branchen</li>
                                    <li><strong>Anleihen-ETFs:</strong> Halten festverzinsliche Wertpapiere</li>
                                    <li><strong>Rohstoff-ETFs:</strong> Bilden Rohstoffe wie Gold oder Öl ab</li>
                                </ul>
                                <div class="chart-container" id="etfs-chart">
                                    <div class="visual-chart" style="height: 200px; background: linear-gradient(135deg, #1a1a1a, #2a2a2a); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #FF9800; font-size: 18px; font-weight: 600;">
                                        <div style="text-align: center;">
                                            <i class="fas fa-layer-group" style="font-size: 48px; margin-bottom: 10px; display: block;"></i>
                                            <div>Index-Tracking Performance</div>
                                            <div style="font-size: 14px; color: #a0a0a0; margin-top: 5px;">Kosten vs. Rendite</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-content" id="real-estate-content">
                                <h4>Immobilieninvestitionen</h4>
                                <p>Immobilieninvestitionen, die durch Wertsteigerung und Mieteinnahmen Einkommen generieren können.</p>
                                <ul>
                                    <li><strong>REITs:</strong> Immobilien-Investmentfonds, die ertragsgenerierende Immobilien besitzen und betreiben</li>
                                    <li><strong>Direktes Eigentum:</strong> Kauf von Wohn- oder Gewerbeimmobilien</li>
                                    <li><strong>Immobilienfonds:</strong> Gebündelte Investitionen in Immobilienvermögen</li>
                                </ul>
                                <div class="chart-container" id="real-estate-chart">
                                    <div class="visual-chart" style="height: 200px; background: linear-gradient(135deg, #1a1a1a, #2a2a2a); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #9C27B0; font-size: 18px; font-weight: 600;">
                                        <div style="text-align: center;">
                                            <i class="fas fa-home" style="font-size: 48px; margin-bottom: 10px; display: block;"></i>
                                            <div>Immobilien-Rendite</div>
                                            <div style="font-size: 14px; color: #a0a0a0; margin-top: 5px;">Mieteinnahmen vs. Wertsteigerung</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-content" id="alternatives-content">
                                <h4>Alternative Anlagen</h4>
                                <p>Nicht-traditionelle Vermögenswerte jenseits von Aktien, Anleihen und Bargeld, die Diversifikationsvorteile bieten können.</p>
                                <ul>
                                    <li><strong>Private Equity:</strong> Investitionen in private Unternehmen</li>
                                    <li><strong>Hedge-Fonds:</strong> Aktiv verwaltete Investmentpools mit spezialisierten Strategien</li>
                                    <li><strong>Rohstoffe:</strong> Physische Güter wie Gold, Öl oder Agrarprodukte</li>
                                    <li><strong>Kryptowährungen:</strong> Digitale Vermögenswerte, die Blockchain-Technologie nutzen</li>
                                </ul>
                                <div class="chart-container" id="alternatives-chart">
                                    <div class="visual-chart" style="height: 200px; background: linear-gradient(135deg, #1a1a1a, #2a2a2a); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #E91E63; font-size: 18px; font-weight: 600;">
                                        <div style="text-align: center;">
                                            <i class="fas fa-gem" style="font-size: 48px; margin-bottom: 10px; display: block;"></i>
                                            <div>Alternative Investments</div>
                                            <div style="font-size: 14px; color: #a0a0a0; margin-top: 5px;">Rohstoffe, Krypto, Private Equity</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>Anlagestrategien</h3>
                    <div class="card-content">
                        <p>Verschiedene Ansätze zum Aufbau und zur Verwaltung Ihres Anlageportfolios.</p>
                        <div class="strategy-comparison" style="overflow-x: auto; width: 100%;">
                            <table class="strategy-table" style="min-width: 1000px; width: 100%; border-collapse: collapse;">
                                <thead>
                                    <tr>
                                        <th style="min-width: 120px; padding: 12px; text-align: left;">Strategie</th>
                                        <th style="min-width: 200px; padding: 12px; text-align: left;">Beschreibung</th>
                                        <th style="min-width: 100px; padding: 12px; text-align: left;">Risikoniveau</th>
                                        <th style="min-width: 100px; padding: 12px; text-align: left;">Zeithorizont</th>
                                        <th style="min-width: 200px; padding: 12px; text-align: left;">Am besten für</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr style="border-bottom: 1px solid #333;">
                                        <td style="padding: 12px; font-weight: 600; color: #E8E8E8;">Kaufen und Halten</td>
                                        <td style="padding: 12px; color: #D0D0D0;">Langfristiger Anlageansatz, der häufigen Handel vermeidet</td>
                                        <td style="padding: 12px; color: #FFD700;">Moderat</td>
                                        <td style="padding: 12px; color: #87CEEB;">Lang (10+ Jahre)</td>
                                        <td style="padding: 12px; color: #D0D0D0;">Passive Anleger, die stetiges Wachstum suchen</td>
                                    </tr>
                                    <tr style="border-bottom: 1px solid #333;">
                                        <td style="padding: 12px; font-weight: 600; color: #E8E8E8;">Kosten-Durchschnitts-Methode</td>
                                        <td style="padding: 12px; color: #D0D0D0;">Investieren fester Beträge in regelmäßigen Abständen unabhängig vom Preis</td>
                                        <td style="padding: 12px; color: #90EE90;">Niedrig bis Moderat</td>
                                        <td style="padding: 12px; color: #87CEEB;">Mittel bis Lang</td>
                                        <td style="padding: 12px; color: #D0D0D0;">Regelmäßige Sparer, die Vermögen im Laufe der Zeit aufbauen</td>
                                    </tr>
                                    <tr style="border-bottom: 1px solid #333;">
                                        <td style="padding: 12px; font-weight: 600; color: #E8E8E8;">Wertorientiertes Investieren</td>
                                        <td style="padding: 12px; color: #D0D0D0;">Suche nach unterbewerteten Vermögenswerten unter ihrem inneren Wert</td>
                                        <td style="padding: 12px; color: #FFD700;">Moderat</td>
                                        <td style="padding: 12px; color: #87CEEB;">Mittel bis Lang</td>
                                        <td style="padding: 12px; color: #D0D0D0;">Forschungsorientierte Anleger</td>
                                    </tr>
                                    <tr style="border-bottom: 1px solid #333;">
                                        <td style="padding: 12px; font-weight: 600; color: #E8E8E8;">Wachstumsorientiertes Investieren</td>
                                        <td style="padding: 12px; color: #D0D0D0;">Fokussierung auf Unternehmen mit überdurchschnittlichem Wachstumspotenzial</td>
                                        <td style="padding: 12px; color: #FF6B6B;">Hoch</td>
                                        <td style="padding: 12px; color: #87CEEB;">Lang</td>
                                        <td style="padding: 12px; color: #D0D0D0;">Anleger, die Kapitalzuwachs anstreben</td>
                                    </tr>
                                    <tr style="border-bottom: 1px solid #333;">
                                        <td style="padding: 12px; font-weight: 600; color: #E8E8E8;">Einkommensorientiertes Investieren</td>
                                        <td style="padding: 12px; color: #D0D0D0;">Aufbau eines Portfolios, das regelmäßiges Einkommen generiert</td>
                                        <td style="padding: 12px; color: #90EE90;">Niedrig bis Moderat</td>
                                        <td style="padding: 12px; color: #87CEEB;">Mittel bis Lang</td>
                                        <td style="padding: 12px; color: #D0D0D0;">Rentner oder Personen, die Cashflow benötigen</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Value Testing Link -->
                <div class="card" style="margin-top: 30px; background: linear-gradient(145deg, #2A2A2A, #232323); border: 2px solid #8A2BE2; box-shadow: 0 4px 20px rgba(138, 43, 226, 0.2);">
                    <h3 style="color: #8A2BE2; text-align: center; margin-bottom: 20px;">
                        <i class="fas fa-chart-line" style="margin-right: 10px;"></i>
                        Value Testing - Fundamentale Bewertung
                    </h3>
                    <div style="text-align: center; margin-bottom: 20px;">
                        <p style="color: #E8E8E8; margin-bottom: 20px; font-size: 16px;">
                            Führen Sie eine umfassende fundamentale Analyse Ihrer Portfolio-Assets durch und erhalten Sie klare Kauf-/Halten-/Verkaufsempfehlungen.
                        </p>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;">
                            <div style="padding: 15px; background: rgba(138, 43, 226, 0.1); border-radius: 6px; border: 1px solid rgba(138, 43, 226, 0.3);">
                                <h5 style="color: #8A2BE2; margin: 0 0 8px 0;">DCF Bewertung</h5>
                                <p style="color: #D0D0D0; margin: 0; font-size: 14px;">Discounted Cash Flow Analyse</p>
                            </div>
                            <div style="padding: 15px; background: rgba(138, 43, 226, 0.1); border-radius: 6px; border: 1px solid rgba(138, 43, 226, 0.3);">
                                <h5 style="color: #8A2BE2; margin: 0 0 8px 0;">Graham Formula</h5>
                                <p style="color: #D0D0D0; margin: 0; font-size: 14px;">Benjamin Graham Bewertung</p>
                            </div>
                            <div style="padding: 15px; background: rgba(138, 43, 226, 0.1); border-radius: 6px; border: 1px solid rgba(138, 43, 226, 0.3);">
                                <h5 style="color: #8A2BE2; margin: 0 0 8px 0;">PEG Analyse</h5>
                                <p style="color: #D0D0D0; margin: 0; font-size: 14px;">Price/Earnings to Growth</p>
                            </div>
                        </div>
                        <button class="btn primary" onclick="performValueTesting()" style="font-size: 16px; padding: 12px 24px;">
                            <i class="fas fa-play" style="margin-right: 8px;"></i>
                            Value Testing starten
                        </button>
                        <div id="value-testing-results" style="display: none; margin-top: 20px;"></div>
                    </div>
                </div>

                <!-- Investment Strategy Navigation -->
                <div class="strategy-navigation">
                    <div class="strategy-card" onclick="switchToPage('value-testing')">
                        <h3><i class="fas fa-chart-line" style="margin-right: 10px;"></i>Value Testing</h3>
                        <p>Fundamentale Bewertung Ihrer Portfolio-Assets mit DCF, Graham-Formel und relativer Bewertung.</p>
                        <div class="strategy-features">
                            <div class="strategy-feature">DCF Analyse</div>
                            <div class="strategy-feature">Graham Formula</div>
                            <div class="strategy-feature">PEG Bewertung</div>
                            <div class="strategy-feature">Scoring System</div>
                        </div>
                        <button class="strategy-button">Analyse starten</button>
                    </div>

                    <div class="strategy-card" onclick="switchToPage('momentum-growth')">
                        <h3><i class="fas fa-trending-up" style="margin-right: 10px;"></i>Momentum Growth</h3>
                        <p>Technische Analyse und Momentum-Strategien für optimale Ein- und Ausstiegszeitpunkte.</p>
                        <div class="strategy-features">
                            <div class="strategy-feature">MA Crossover</div>
                            <div class="strategy-feature">Relative Strength</div>
                            <div class="strategy-feature">Volatilität</div>
                            <div class="strategy-feature">Trend Analyse</div>
                        </div>
                        <button class="strategy-button">Momentum starten</button>
                    </div>

                    <div class="strategy-card" onclick="switchToPage('buy-hold')">
                        <h3><i class="fas fa-shield-alt" style="margin-right: 10px;"></i>Buy & Hold</h3>
                        <p>Langfristige fundamentale Stabilität und Wachstum für nachhaltige Portfoliokonstruktion.</p>
                        <div class="strategy-features">
                            <div class="strategy-feature">Qualitätsanalyse</div>
                            <div class="strategy-feature">Wachstum</div>
                            <div class="strategy-feature">Dividenden</div>
                            <div class="strategy-feature">Stabilität</div>
                        </div>
                        <button class="strategy-button">Buy & Hold starten</button>
                    </div>

                    <div class="strategy-card" onclick="switchToPage('carry-strategy')">
                        <h3><i class="fas fa-coins" style="margin-right: 10px;"></i>Carry Strategy</h3>
                        <p>Zinsdifferenzial und Carry-Analyse für optimale Ertragsstrategien und Yield-Optimierung.</p>
                        <div class="strategy-features">
                            <div class="strategy-feature">Zinsdifferenzial</div>
                            <div class="strategy-feature">Dividendenrendite</div>
                            <div class="strategy-feature">Duration Risk</div>
                            <div class="strategy-feature">Cashflow</div>
                        </div>
                        <button class="strategy-button">Carry starten</button>
                    </div>
                </div>
            </section>

            <!-- Value Testing -->
            <section id="value-testing" class="page">
                <div class="page-header">
                    <h2>Value Testing</h2>
                    <p>Fundamentale Bewertung Ihrer Portfolio-Assets</p>
                </div>

                <div class="instruction-box">
                    <h4>🔍 Automatische Fundamentalanalyse:</h4>
                    <p>Unser Value Testing Modul führt eine umfassende fundamentale Bewertung Ihrer Portfolio-Assets durch und gibt klare Kauf-/Halten-/Verkaufsempfehlungen basierend auf DCF, Graham-Formel und relativer Bewertung.</p>
                </div>

                <!-- Value Testing Controls -->
                <div class="value-testing-controls">
                    <div class="card">
                        <h3>Analyse-Parameter</h3>
                        <div class="parameter-grid">
                            <div class="parameter-item">
                                <label for="discountRate">Diskontsatz (%)</label>
                                <input type="number" id="discountRate" value="8" min="1" max="20" step="0.5">
                            </div>
                            <div class="parameter-item">
                                <label for="terminalGrowth">Terminal Growth Rate (%)</label>
                                <input type="number" id="terminalGrowth" value="2" min="0" max="10" step="0.5">
                            </div>
                            <div class="parameter-item">
                                <label for="riskFreeRate">Risikofreier Zinssatz (%)</label>
                                <input type="number" id="riskFreeRate" value="2.5" min="0" max="10" step="0.1">
                            </div>
                            <div class="parameter-item">
                                <label for="marketRiskPremium">Marktrisikoprämie (%)</label>
                                <input type="number" id="marketRiskPremium" value="5.5" min="2" max="10" step="0.1">
                            </div>
                        </div>
                        <div class="analysis-actions">
                            <button class="btn primary" onclick="startValueTesting()">
                                <i class="fas fa-play"></i> Analyse starten
                            </button>
                            <button class="btn secondary" onclick="exportValueReport()" id="exportBtn" disabled>
                                <i class="fas fa-download"></i> PDF-Report herunterladen
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Loading State -->
                <div id="valueTestingLoading" class="loading-container" style="display: none;">
                    <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Führe fundamentale Analyse durch...</p>
                        <div class="progress-bar">
                            <div class="progress-fill" id="analysisProgress"></div>
                        </div>
                    </div>
                </div>

                <!-- Results Container -->
                <div id="valueTestingResults" class="value-testing-results" style="display: none;">
                    <!-- Portfolio Summary -->
                    <div class="card">
                        <h3>Portfolio-Zusammenfassung</h3>
                        <div class="portfolio-summary-grid">
                            <div class="summary-item">
                                <h4>Gesamtwert</h4>
                                <p id="totalPortfolioValue">-</p>
                            </div>
                            <div class="summary-item">
                                <h4>Fair Value</h4>
                                <p id="totalFairValue">-</p>
                            </div>
                            <div class="summary-item">
                                <h4>Über-/Unterbewertung</h4>
                                <p id="portfolioValuation">-</p>
                            </div>
                            <div class="summary-item">
                                <h4>Aggregiertes Scoring</h4>
                                <p id="aggregateScore">-</p>
                            </div>
                        </div>
                    </div>

                    <!-- Assets Analysis Table -->
                    <div class="card">
                        <h3>Asset-Analyse</h3>
                        <div class="table-container">
                            <table class="value-analysis-table" id="valueAnalysisTable">
                                <thead>
                                    <tr>
                                        <th>Asset</th>
                                        <th>Aktueller Kurs</th>
                                        <th>Fair Value</th>
                                        <th>Abweichung</th>
                                        <th>Score</th>
                                        <th>Empfehlung</th>
                                        <th>Begründung</th>
                                        <th>Aktionen</th>
                                    </tr>
                                </thead>
                                <tbody id="valueAnalysisTableBody">
                                    <!-- Dynamic content -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Charts Section -->
                    <div class="charts-section">
                        <div class="card">
                            <h3>Score-Verteilung</h3>
                            <canvas id="scoreDistributionChart"></canvas>
                        </div>
                        <div class="card">
                            <h3>Portfolio-Gewichtung</h3>
                            <canvas id="portfolioWeightChart"></canvas>
                        </div>
                    </div>

                    <!-- Sources Section -->
                    <div class="card">
                        <h3>Datenquellen</h3>
                        <div id="sourcesList">
                            <!-- Dynamic sources -->
                        </div>
                    </div>
                </div>

                <!-- Asset Detail Modal -->
                <div id="assetDetailModal" class="modal" style="display: none;">
                    <div class="modal-content">
                        <span class="close" onclick="closeAssetDetail()">&times;</span>
                        <div id="assetDetailContent">
                            <!-- Dynamic content -->
                        </div>
                    </div>
                </div>
            </section>

            <!-- Momentum Growth -->
            <section id="momentum-growth" class="page">
                <div class="page-header">
                    <h2>Momentum Growth</h2>
                    <p>Technische Analyse und Momentum-Strategien</p>
                </div>

                <div class="instruction-box">
                    <h4>📈 Momentum-Strategie Analyse:</h4>
                    <p>Unser Momentum Growth Modul analysiert technische Indikatoren, Trendstärke und relative Performance Ihrer Assets, um optimale Ein- und Ausstiegszeitpunkte zu identifizieren.</p>
                </div>

                <!-- Momentum Controls -->
                <div class="momentum-controls">
                    <div class="card">
                        <h3>Analyse-Parameter</h3>
                        <div class="parameter-grid">
                            <div class="parameter-item">
                                <label for="momentumLookback">Lookback-Periode (Monate)</label>
                                <select id="momentumLookback">
                                    <option value="12">12 Monate</option>
                                    <option value="24" selected>24 Monate</option>
                                    <option value="36">36 Monate</option>
                                </select>
                            </div>
                            <div class="parameter-item">
                                <label for="maShort">Kurzfristiger MA (Tage)</label>
                                <input type="number" id="maShort" value="50" min="10" max="100">
                            </div>
                            <div class="parameter-item">
                                <label for="maLong">Langfristiger MA (Tage)</label>
                                <input type="number" id="maLong" value="200" min="50" max="500">
                            </div>
                            <div class="parameter-item">
                                <label for="benchmark">Benchmark</label>
                                <select id="benchmark">
                                    <option value="SMI">SMI (Schweiz)</option>
                                    <option value="SP500" selected>S&P 500</option>
                                    <option value="MSCI_WORLD">MSCI World</option>
                                </select>
                            </div>
                        </div>
                        <div class="analysis-actions">
                            <button class="btn primary" onclick="startMomentumAnalysis()">
                                <i class="fas fa-chart-line"></i> Momentum-Analyse starten
                            </button>
                            <button class="btn secondary" onclick="exportMomentumReport()" id="momentumExportBtn" disabled>
                                <i class="fas fa-download"></i> PDF-Report herunterladen
                            </button>
                        </div>
                        <div id="momentum-results" style="display: none; margin-top: 20px;"></div>
                    </div>
                </div>

                <!-- Loading State -->
                <div id="momentumLoading" class="loading-container" style="display: none;">
                    <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Führe Momentum-Analyse durch...</p>
                        <div class="progress-bar">
                            <div class="progress-fill" id="momentumProgress"></div>
                        </div>
                    </div>
                </div>

                <!-- Results Container -->
                <div id="momentumResults" class="momentum-results" style="display: none;">
                    <!-- Portfolio Summary -->
                    <div class="card">
                        <h3>Portfolio-Momentum Übersicht</h3>
                        <div class="portfolio-summary-grid">
                            <div class="summary-item">
                                <h4>Momentum Exposure</h4>
                                <p id="momentumExposure">-</p>
                            </div>
                            <div class="summary-item">
                                <h4>Durchschnittlicher Score</h4>
                                <p id="avgMomentumScore">-</p>
                            </div>
                            <div class="summary-item">
                                <h4>Trend-Stärke</h4>
                                <p id="trendStrength">-</p>
                            </div>
                            <div class="summary-item">
                                <h4>Volatilität</h4>
                                <p id="portfolioVolatility">-</p>
                            </div>
                        </div>
                    </div>

                    <!-- Assets Analysis Table -->
                    <div class="card">
                        <h3>Asset-Momentum Analyse</h3>
                        <div class="table-container">
                            <table class="momentum-analysis-table" id="momentumAnalysisTable">
                                <thead>
                                    <tr>
                                        <th>Asset</th>
                                        <th>1M</th>
                                        <th>3M</th>
                                        <th>6M</th>
                                        <th>12M</th>
                                        <th>MA50</th>
                                        <th>MA200</th>
                                        <th>RS</th>
                                        <th>Score</th>
                                        <th>Empfehlung</th>
                                        <th>Begründung</th>
                                        <th>Aktionen</th>
                                    </tr>
                                </thead>
                                <tbody id="momentumAnalysisTableBody">
                                    <!-- Dynamic content -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Charts Section -->
                    <div class="charts-section">
                        <div class="card">
                            <h3>Momentum Score Verteilung</h3>
                            <canvas id="momentumScoreChart"></canvas>
                        </div>
                        <div class="card">
                            <h3>Performance Heatmap</h3>
                            <canvas id="performanceHeatmapChart"></canvas>
                        </div>
                    </div>

                    <!-- Sources Section -->
                    <div class="card">
                        <h3>Datenquellen</h3>
                        <div id="momentumSourcesList">
                            <!-- Dynamic sources -->
                        </div>
                    </div>
                </div>

                <!-- Asset Detail Modal -->
                <div id="momentumAssetDetailModal" class="modal" style="display: none;">
                    <div class="modal-content">
                        <span class="close" onclick="closeMomentumAssetDetail()">&times;</span>
                        <div id="momentumAssetDetailContent">
                            <!-- Dynamic content -->
                        </div>
                    </div>
                </div>
            </section>

            <!-- Buy & Hold -->
            <section id="buy-hold" class="page">
                <div class="page-header">
                    <h2>Buy & Hold</h2>
                    <p>Langfristige Fundamentale Stabilität und Wachstum</p>
                </div>

                <div class="instruction-box">
                    <h4>🏛️ Buy & Hold Strategie:</h4>
                    <p>Unser Buy & Hold Modul analysiert fundamentale Stabilität, langfristiges Wachstum und Dividendenqualität für langfristige Portfoliokonstruktion.</p>
                </div>

                <!-- Buy & Hold Controls -->
                <div class="buyhold-controls">
                    <div class="card">
                        <h3>Analyse-Parameter</h3>
                        <div class="parameter-grid">
                            <div class="parameter-item">
                                <label for="qualityWeight">Qualitäts-Gewichtung (%)</label>
                                <input type="number" id="qualityWeight" value="50" min="0" max="100" step="5">
                            </div>
                            <div class="parameter-item">
                                <label for="growthWeight">Wachstums-Gewichtung (%)</label>
                                <input type="number" id="growthWeight" value="25" min="0" max="100" step="5">
                            </div>
                            <div class="parameter-item">
                                <label for="valuationWeight">Bewertungs-Gewichtung (%)</label>
                                <input type="number" id="valuationWeight" value="15" min="0" max="100" step="5">
                            </div>
                            <div class="parameter-item">
                                <label for="dividendWeight">Dividenden-Gewichtung (%)</label>
                                <input type="number" id="dividendWeight" value="10" min="0" max="100" step="5">
                            </div>
                        </div>
                        <div class="analysis-actions">
                            <button class="btn primary" onclick="startBuyHoldAnalysis()">
                                <i class="fas fa-shield-alt"></i> Buy & Hold Analyse starten
                            </button>
                            <button class="btn secondary" onclick="exportBuyHoldReport()" id="buyholdExportBtn" disabled>
                                <i class="fas fa-download"></i> PDF-Report herunterladen
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Loading State -->
                <div id="buyholdLoading" class="loading-container" style="display: none;">
                    <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Führe Buy & Hold Analyse durch...</p>
                        <div class="progress-bar">
                            <div class="progress-fill" id="buyholdProgress"></div>
                        </div>
                    </div>
                </div>

                <!-- Results Container -->
                <div id="buyholdResults" class="buyhold-results" style="display: none;">
                    <!-- Portfolio Summary -->
                    <div class="card">
                        <h3>Langfristige Portfolio-Schätzung</h3>
                        <div class="portfolio-summary-grid">
                            <div class="summary-item">
                                <h4>Erwartete CAGR</h4>
                                <p id="expectedCAGR">-</p>
                            </div>
                            <div class="summary-item">
                                <h4>Konfidenz</h4>
                                <p id="confidenceLevel">-</p>
                            </div>
                            <div class="summary-item">
                                <h4>Core-Positionen</h4>
                                <p id="corePositions">-</p>
                            </div>
                            <div class="summary-item">
                                <h4>Satellite-Positionen</h4>
                                <p id="satellitePositions">-</p>
                            </div>
                        </div>
                    </div>

                    <!-- Assets Analysis Table -->
                    <div class="card">
                        <h3>Buy & Hold Asset-Analyse</h3>
                        <div class="table-container">
                            <table class="buyhold-analysis-table" id="buyholdAnalysisTable">
                                <thead>
                                    <tr>
                                        <th>Asset</th>
                                        <th>5Y Revenue CAGR</th>
                                        <th>5Y EPS CAGR</th>
                                        <th>Dividend CAGR</th>
                                        <th>Debt/Equity</th>
                                        <th>ROE</th>
                                        <th>Score</th>
                                        <th>Empfehlung</th>
                                        <th>Begründung</th>
                                        <th>Aktionen</th>
                                    </tr>
                                </thead>
                                <tbody id="buyholdAnalysisTableBody">
                                    <!-- Dynamic content -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Charts Section -->
                    <div class="charts-section">
                        <div class="card">
                            <h3>Buy & Hold Score Verteilung</h3>
                            <canvas id="buyholdScoreChart"></canvas>
                        </div>
                        <div class="card">
                            <h3>Core vs Satellite Aufteilung</h3>
                            <canvas id="coreSatelliteChart"></canvas>
                        </div>
                    </div>

                    <!-- Sources Section -->
                    <div class="card">
                        <h3>Datenquellen</h3>
                        <div id="buyholdSourcesList">
                            <!-- Dynamic sources -->
                        </div>
                    </div>
                </div>

                <!-- Asset Detail Modal -->
                <div id="buyholdAssetDetailModal" class="modal" style="display: none;">
                    <div class="modal-content">
                        <span class="close" onclick="closeBuyHoldAssetDetail()">&times;</span>
                        <div id="buyholdAssetDetailContent">
                            <!-- Dynamic content -->
                        </div>
                    </div>
                </div>
            </section>

            <!-- Carry Strategy -->
            <section id="carry-strategy" class="page">
                <div class="page-header">
                    <h2>Carry Strategy</h2>
                    <p>Zinsdifferenzial und Carry-Analyse</p>
                </div>

                <div class="instruction-box">
                    <h4>💰 Carry-Strategie Analyse:</h4>
                    <p>Unser Carry Strategy Modul analysiert Zinsdifferenziale, Dividendenrenditen und Carry-Charakteristiken für optimale Ertragsstrategien.</p>
                </div>

                <!-- Carry Controls -->
                <div class="carry-controls">
                    <div class="card">
                        <h3>Analyse-Parameter</h3>
                        <div class="parameter-grid">
                            <div class="parameter-item">
                                <label for="financingCost">Finanzierungskosten (%)</label>
                                <input type="number" id="financingCost" value="3.0" min="0" max="20" step="0.1">
                            </div>
                            <div class="parameter-item">
                                <label for="reinvestmentPolicy">Reinvestment-Policy</label>
                                <select id="reinvestmentPolicy">
                                    <option value="reinvest" selected>Dividenden reinvestieren</option>
                                    <option value="cash">Cash auszahlen</option>
                                </select>
                            </div>
                            <div class="parameter-item">
                                <label for="leverageLimit">Leverage-Limit</label>
                                <input type="number" id="leverageLimit" value="2.0" min="1" max="10" step="0.1">
                            </div>
                            <div class="parameter-item">
                                <label for="timeHorizon">Zeithorizont (Jahre)</label>
                                <select id="timeHorizon">
                                    <option value="1">1 Jahr</option>
                                    <option value="3" selected>3 Jahre</option>
                                    <option value="5">5 Jahre</option>
                                </select>
                            </div>
                        </div>
                        <div class="analysis-actions">
                            <button class="btn primary" onclick="startCarryAnalysis()">
                                <i class="fas fa-coins"></i> Carry-Analyse starten
                            </button>
                            <button class="btn secondary" onclick="exportCarryReport()" id="carryExportBtn" disabled>
                                <i class="fas fa-download"></i> PDF-Report herunterladen
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Loading State -->
                <div id="carryLoading" class="loading-container" style="display: none;">
                    <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Führe Carry-Analyse durch...</p>
                        <div class="progress-bar">
                            <div class="progress-fill" id="carryProgress"></div>
                        </div>
                    </div>
                </div>

                <!-- Results Container -->
                <div id="carryResults" class="carry-results" style="display: none;">
                    <!-- Portfolio Summary -->
                    <div class="card">
                        <h3>Portfolio-Carry Übersicht</h3>
                        <div class="portfolio-summary-grid">
                            <div class="summary-item">
                                <h4>Netto-Carry</h4>
                                <p id="netCarry">-</p>
                            </div>
                            <div class="summary-item">
                                <h4>Erwarteter Jahresertrag</h4>
                                <p id="expectedAnnualReturn">-</p>
                            </div>
                            <div class="summary-item">
                                <h4>Gewichtete Duration</h4>
                                <p id="weightedDuration">-</p>
                            </div>
                            <div class="summary-item">
                                <h4>Carry-Volatilität</h4>
                                <p id="carryVolatility">-</p>
                            </div>
                        </div>
                    </div>

                    <!-- Assets Analysis Table -->
                    <div class="card">
                        <h3>Carry Asset-Analyse</h3>
                        <div class="table-container">
                            <table class="carry-analysis-table" id="carryAnalysisTable">
                                <thead>
                                    <tr>
                                        <th>Asset</th>
                                        <th>Nominal-Carry</th>
                                        <th>Finanzierungskosten</th>
                                        <th>Netto-Carry</th>
                                        <th>Duration</th>
                                        <th>Score</th>
                                        <th>Empfehlung</th>
                                        <th>Simulation</th>
                                        <th>Aktionen</th>
                                    </tr>
                                </thead>
                                <tbody id="carryAnalysisTableBody">
                                    <!-- Dynamic content -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Charts Section -->
                    <div class="charts-section">
                        <div class="card">
                            <h3>Carry Score Verteilung</h3>
                            <canvas id="carryScoreChart"></canvas>
                        </div>
                        <div class="card">
                            <h3>Cashflow Simulation</h3>
                            <canvas id="cashflowSimulationChart"></canvas>
                        </div>
                    </div>

                    <!-- Sources Section -->
                    <div class="card">
                        <h3>Datenquellen</h3>
                        <div id="carrySourcesList">
                            <!-- Dynamic sources -->
                        </div>
                    </div>
                </div>

                <!-- Asset Detail Modal -->
                <div id="carryAssetDetailModal" class="modal" style="display: none;">
                    <div class="modal-content">
                        <span class="close" onclick="closeCarryAssetDetail()">&times;</span>
                        <div id="carryAssetDetailContent">
                            <!-- Dynamic content -->
                        </div>
                    </div>
                </div>
            </section>

            <!-- Bericht & Analyse -->
            <section id="bericht" class="page">
                <div class="page-header">
                    <h2>Bericht & Analyse</h2>
                    <p>Stärken, Schwächen und Handlungsempfehlungen</p>
                </div>
                
                <div class="instruction-box">
                    <h4>🎯 Umfassende Portfolio-Analyse:</h4>
                    <p>Hier erhalten Sie eine detaillierte SWOT-Analyse Ihres Portfolios und konkrete Empfehlungen zur Optimierung.</p>
                    <button class="refresh-button" onclick="updateReportPage()">
                        <i class="fas fa-sync-alt"></i> Bericht aktualisieren
                    </button>
                </div>
                
                <div class="swot-grid">
                    <div class="swot-card strengths">
                        <h4>💪 Stärken</h4>
                        <div id="strengthsList">
                            <p>Bitte Portfolio erstellen und berechnen</p>
                        </div>
                    </div>
                    <div class="swot-card weaknesses">
                        <h4>⚠️ Schwächen</h4>
                        <div id="weaknessesList">
                            <p>Bitte Portfolio erstellen und berechnen</p>
                        </div>
                    </div>
                    <div class="swot-card opportunities">
                        <h4>🚀 Chancen</h4>
                        <div id="opportunitiesList">
                            <p>Bitte Portfolio erstellen und berechnen</p>
                        </div>
                    </div>
                    <div class="swot-card threats">
                        <h4>🔴 Risiken</h4>
                        <div id="threatsList">
                            <p>Bitte Portfolio erstellen und berechnen</p>
                        </div>
                    </div>
                </div>

                <!-- Korrelationsmatrix -->
                <div class="card">
                    <h3>Korrelationsanalyse</h3>
                    <div class="correlation-legend">
                        <div class="legend-item">
                            <div class="legend-color" style="background: #d4edda;"></div>
                            <span>Hohe Korrelation (>0.7)</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background: #fff3cd;"></div>
                            <span>Mittlere Korrelation (0.3-0.7)</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background: #f8d7da;"></div>
                            <span>Niedrige Korrelation (<0.3)</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background: #cce7ff;"></div>
                            <span>Negative Korrelation</span>
                        </div>
                    </div>
                    <div id="correlationTableContainer">
                        <p>Bitte erstellen Sie ein Portfolio mit mindestens 2 Assets für die Korrelationsanalyse.</p>
                    </div>
                </div>

                <div class="card">
                    <h3>Marktanalyse & Sektor-Zyklen</h3>
                    <div id="marketAnalysis">
                        <p>Bitte berechnen Sie zuerst Ihr Portfolio für die Marktanalyse.</p>
                    </div>
                </div>
                
                <div class="card">
                    <h3>Handlungsempfehlungen</h3>
                    <div id="recommendations">
                        <p>Bitte erstellen Sie zuerst ein Portfolio und klicken Sie auf "Portfolio Berechnen".</p>
                    </div>
                </div>
                
                <div class="card">
                    <h3>Portfolio-Zusammenfassung</h3>
                    <div id="portfolioSummary">
                        <p>Bitte fügen Sie Assets zu Ihrem Portfolio hinzu und berechnen Sie die Analyse.</p>
                    </div>
                </div>
            </section>

            <!-- Märkte & News -->
            <section id="markets" class="page">
                <div class="page-header">
                    <h2>Märkte & News</h2>
                    <p>Aktuelle Marktinformationen und Finanznachrichten</p>
                </div>
                
                <div class="instruction-box">
                    <h4>📰 Marktübersicht:</h4>
                    <p>Bleiben Sie über die aktuellen Entwicklungen an den Finanzmärkten informiert. Daten werden alle 15 Minuten automatisch aktualisiert.</p>
                    <div class="auto-refresh-info">
                        <i class="fas fa-sync-alt fa-spin" style="margin-right: 5px"></i> Nächste Aktualisierung in: <span id="nextRefresh" style="font-weight: 600">--:--</span>
                    </div>
                    <button class="refresh-button" onclick="refreshAllMarkets()">
                        <i class="fas fa-sync-alt"></i> Jetzt aktualisieren
                    </button>
                </div>
                
                <div class="market-grid" id="liveMarketsGrid">
                    <!-- Wird dynamisch gefüllt -->
                </div>
                
                <div class="card">
                    <h3>Finanznachrichten</h3>
                    <div class="news-header">
                        <p>Die wichtigsten Finanznachrichten in Echtzeit - aktualisiert alle 30 Minuten</p>
                        <button class="refresh-button" onclick="refreshFinancialNews()" id="newsRefreshBtn">
                            <i class="fas fa-sync-alt"></i> Nachrichten analysieren
                        </button>
                    </div>
                    <div id="newsContainer">
                        <div class="news-item">
                            <div class="news-header">
                                <h4>Schweizer Börse startet positiv in die Woche</h4>
                                <span class="news-source">Reuters</span>
                            </div>
                            <p>Der SMI zeigt eine stabile Entwicklung mit moderaten Gewinnen. Schweizer Blue-Chip-Aktien profitieren von der robusten Konjunktur und der starken Franken-Position.</p>
                            <div class="news-meta">
                                <span class="news-time">vor 1 Stunde</span>
                                <span class="news-category">Markt</span>
                            </div>
                        </div>
                        <div class="news-item">
                            <div class="news-header">
                                <h4>EZB signalisiert vorsichtige Geldpolitik</h4>
                                <span class="news-source">Bloomberg</span>
                            </div>
                            <p>Die Europäische Zentralbank bleibt bei ihrer aktuellen Zinspolitik und beobachtet die Inflation genau. Experten erwarten keine überraschenden Änderungen.</p>
                            <div class="news-meta">
                                <span class="news-time">vor 3 Stunden</span>
                                <span class="news-category">Zentralbank</span>
                            </div>
                        </div>
                        <div class="news-item">
                            <div class="news-header">
                                <h4>Tech-Sektor zeigt gemischte Signale</h4>
                                <span class="news-source">Financial Times</span>
                            </div>
                            <p>Während einige Tech-Giganten schwächeln, zeigen andere innovative Bereiche wie KI und Cloud-Computing Stärke. Diversifikation bleibt wichtig.</p>
                            <div class="news-meta">
                                <span class="news-time">vor 5 Stunden</span>
                                <span class="news-category">Technologie</span>
                            </div>
                        </div>
                        <div class="news-item">
                            <div class="news-header">
                                <h4>Rohstoffmärkte stabilisieren sich</h4>
                                <span class="news-source">Wall Street Journal</span>
                            </div>
                            <p>Gold und Öl zeigen nach volatilen Wochen wieder stabilere Preise. Experten sehen langfristig positive Aussichten für Rohstoffinvestments.</p>
                            <div class="news-meta">
                                <span class="news-time">vor 7 Stunden</span>
                                <span class="news-category">Rohstoffe</span>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Assets & Investment -->
            <section id="assets" class="page">
                <div class="page-header">
                    <h2>Assets & Investment</h2>
                    <p>Umfassende Theorie und Praxis zu allen Anlageklassen</p>
                </div>
                
                <div class="instruction-box">
                    <h4>🎓 Investment-Bildung:</h4>
                    <p>Vertiefen Sie Ihr Verständnis für verschiedene Anlageklassen, ihre Eigenschaften, Risiken und Renditeerwartungen. Hier finden Sie detaillierte Theorie und praktische Anwendungen.</p>
                </div>
                
                <!-- Aktien -->
                <div class="asset-section">
                    <div class="asset-header">
                        <h3>📈 Aktien (Equities)</h3>
                        <div class="asset-badges">
                            <span class="risk-badge high">Hoch</span>
                            <span class="return-badge high">Hoch</span>
                            <span class="liquidity-badge high">Hoch</span>
                    </div>
                    </div>
                    
                    <div class="theory-content">
                        <h4>🎯 Theoretische Grundlagen</h4>
                        <div class="theory-grid">
                            <div class="theory-card">
                                <h5>Eigentumsrechte</h5>
                                <p>Aktien repräsentieren Eigentumsanteile an einem Unternehmen. Aktionäre sind Miteigentümer und haben Stimmrechte sowie Anspruch auf Dividenden.</p>
                                <div class="formula">Wert = (Eigenkapital / Anzahl Aktien) × Bewertungsmultiplikator</div>
                    </div>
                            <div class="theory-card">
                                <h5>Bewertungsmodelle</h5>
                                <p><strong>DCF-Modell:</strong> Discounted Cash Flow basiert auf zukünftigen Cashflows<br>
                                <strong>P/E-Ratio:</strong> Kurs-Gewinn-Verhältnis für relative Bewertung<br>
                                <strong>Dividend Discount Model:</strong> Bewertung basierend auf Dividenden</p>
                            </div>
                            <div class="theory-card">
                                <h5>Risikofaktoren</h5>
                                <p><strong>Systematisches Risiko:</strong> Marktrisiko, Zinsrisiko, Inflationsrisiko<br>
                                <strong>Unsystematisches Risiko:</strong> Unternehmensspezifisches Risiko<br>
                                <strong>Liquiditätsrisiko:</strong> Schwierigkeiten beim Verkauf</p>
                            </div>
                        </div>
                        
                        <h4>📊 Praktische Anwendung</h4>
                        <div class="practice-content">
                            <div class="practice-item">
                                <h5>Wachstumsaktien</h5>
                                <p><strong>Charakteristika:</strong> Hohe Gewinnwachstumsraten, oft junge Unternehmen, niedrige oder keine Dividenden</p>
                                <p><strong>Beispiele:</strong> Tech-Unternehmen, Biotech, innovative Startups</p>
                                <p><strong>Risiko-Rendite:</strong> Sehr volatil, hohe Gewinnchancen aber auch hohe Verlustrisiken</p>
                            </div>
                            <div class="practice-item">
                                <h5>Wertaktien</h5>
                                <p><strong>Charakteristika:</strong> Unterbewertet nach fundamentalen Kennzahlen, oft etablierte Unternehmen</p>
                                <p><strong>Beispiele:</strong> Blue Chips, Dividend Champions, defensive Sektoren</p>
                                <p><strong>Risiko-Rendite:</strong> Stabiler, konservativer Ansatz mit moderater Volatilität</p>
                            </div>
                            <div class="practice-item">
                                <h5>Dividendenaktien</h5>
                                <p><strong>Charakteristika:</strong> Regelmäßige Dividendenausschüttungen, stabile Cashflows</p>
                                <p><strong>Beispiele:</strong> Utilities, Consumer Staples, REITs</p>
                                <p><strong>Risiko-Rendite:</strong> Einkommensorientiert, moderate Volatilität</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Anleihen -->
                <div class="asset-section">
                    <div class="asset-header">
                        <h3>🏛️ Anleihen (Bonds)</h3>
                        <div class="asset-badges">
                            <span class="risk-badge medium">Mittel</span>
                            <span class="return-badge medium">Mittel</span>
                            <span class="liquidity-badge medium">Mittel</span>
                        </div>
                    </div>
                    
                    <div class="theory-content">
                        <h4>🎯 Theoretische Grundlagen</h4>
                        <div class="theory-grid">
                            <div class="theory-card">
                                <h5>Zinsstruktur</h5>
                                <p>Anleihen sind Schuldverschreibungen mit festem Zinssatz und Rückzahlungstermin. Der Kurs bewegt sich invers zum Zinssatz.</p>
                                <div class="formula">Kurs = Σ [Kupon / (1+r)^t] + Nennwert / (1+r)^n</div>
                            </div>
                            <div class="theory-card">
                                <h5>Duration & Convexity</h5>
                                <p><strong>Duration:</strong> Sensitivität des Kurses auf Zinsänderungen<br>
                                <strong>Convexity:</strong> Nicht-lineare Beziehung zwischen Kurs und Zins<br>
                                <strong>Modified Duration:</strong> Approximative Kursänderung bei 1% Zinsänderung</p>
                            </div>
                            <div class="theory-card">
                                <h5>Kreditrisiko</h5>
                                <p><strong>Ausfallrisiko:</strong> Wahrscheinlichkeit des Zahlungsausfalls<br>
                                <strong>Credit Spread:</strong> Zinsaufschlag gegenüber risikofreien Anleihen<br>
                                <strong>Rating:</strong> Bonitätseinstufung durch Ratingagenturen</p>
                            </div>
                        </div>
                        
                        <h4>📊 Praktische Anwendung</h4>
                        <div class="practice-content">
                            <div class="practice-item">
                                <h5>Staatsanleihen</h5>
                                <p><strong>Charakteristika:</strong> Niedriges Ausfallrisiko, als risikofreier Zins verwendet</p>
                                <p><strong>Beispiele:</strong> Schweizer Bundesobligationen, US Treasuries, deutsche Bunds</p>
                                <p><strong>Risiko-Rendite:</strong> Sehr sicher, niedrige Rendite, Zinsrisiko</p>
                            </div>
                            <div class="practice-item">
                                <h5>Unternehmensanleihen</h5>
                                <p><strong>Charakteristika:</strong> Höhere Rendite als Staatsanleihen, höheres Ausfallrisiko</p>
                                <p><strong>Beispiele:</strong> Investment Grade, High Yield, Convertible Bonds</p>
                                <p><strong>Risiko-Rendite:</strong> Moderate bis hohe Rendite, Kreditrisiko</p>
                            </div>
                            <div class="practice-item">
                                <h5>Inflationsgeschützte Anleihen</h5>
                                <p><strong>Charakteristika:</strong> Schutz vor Inflation, Zinsanpassung an Inflationsrate</p>
                                <p><strong>Beispiele:</strong> TIPS (USA), ILB (Schweiz), Linker (Deutschland)</p>
                                <p><strong>Risiko-Rendite:</strong> Inflationsschutz, niedrige reale Rendite</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Rohstoffe -->
                <div class="asset-section">
                    <div class="asset-header">
                        <h3>🥇 Rohstoffe (Commodities)</h3>
                        <div class="asset-badges">
                            <span class="risk-badge high">Hoch</span>
                            <span class="return-badge variable">Variabel</span>
                            <span class="liquidity-badge medium">Mittel</span>
                        </div>
                    </div>
                    
                    <div class="theory-content">
                        <h4>🎯 Theoretische Grundlagen</h4>
                        <div class="theory-grid">
                            <div class="theory-card">
                                <h5>Preisbildung</h5>
                                <p>Rohstoffpreise werden durch Angebot und Nachfrage bestimmt. Sie haben oft niedrige oder negative Korrelation zu Aktien.</p>
                                <div class="formula">Preis = f(Angebot, Nachfrage, Lagerbestände, Spekulation, Währung)</div>
                            </div>
                            <div class="theory-card">
                                <h5>Contango & Backwardation</h5>
                                <p><strong>Contango:</strong> Terminkurse > Kassakurse (normale Marktstruktur)<br>
                                <strong>Backwardation:</strong> Terminkurse < Kassakurse (Knappheit)<br>
                                <strong>Roll Yield:</strong> Gewinn/Verlust beim Rollen von Futures</p>
                            </div>
                            <div class="theory-card">
                                <h5>Diversifikationseffekt</h5>
                                <p>Rohstoffe bieten Diversifikation durch niedrige Korrelation zu traditionellen Assets. Inflationsschutz durch reale Werte.</p>
                            </div>
                        </div>
                        
                        <h4>📊 Praktische Anwendung</h4>
                        <div class="practice-content">
                            <div class="practice-item">
                                <h5>Edelmetalle</h5>
                                <p><strong>Charakteristika:</strong> Wertaufbewahrung, Inflationsschutz, Krisenwährung</p>
                                <p><strong>Beispiele:</strong> Gold, Silber, Platin, Palladium</p>
                                <p><strong>Risiko-Rendite:</strong> Sehr volatil, langfristig inflationsausgleich</p>
                            </div>
                            <div class="practice-item">
                                <h5>Energierohstoffe</h5>
                                <p><strong>Charakteristika:</strong> Wirtschaftszyklus-abhängig, geopolitische Risiken</p>
                                <p><strong>Beispiele:</strong> Öl, Gas, Kohle, Uran</p>
                                <p><strong>Risiko-Rendite:</strong> Sehr volatil, zyklisch</p>
                            </div>
                            <div class="practice-item">
                                <h5>Agrarrohstoffe</h5>
                                <p><strong>Charakteristika:</strong> Wetterabhängig, saisonal, Bevölkerungswachstum</p>
                                <p><strong>Beispiele:</strong> Weizen, Mais, Soja, Kaffee, Zucker</p>
                                <p><strong>Risiko-Rendite:</strong> Hoch volatil, unvorhersagbar</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Immobilien -->
                <div class="asset-section">
                    <div class="asset-header">
                        <h3>🏠 Immobilien (Real Estate)</h3>
                        <div class="asset-badges">
                            <span class="risk-badge medium">Mittel</span>
                            <span class="return-badge stable">Stabil</span>
                            <span class="liquidity-badge low">Niedrig</span>
                        </div>
                    </div>
                    
                    <div class="theory-content">
                        <h4>🎯 Theoretische Grundlagen</h4>
                        <div class="theory-grid">
                            <div class="theory-card">
                                <h5>Bewertungsmethoden</h5>
                                <p><strong>Ertragswertverfahren:</strong> Barwert der zukünftigen Mieteinnahmen<br>
                                <strong>Vergleichswertverfahren:</strong> Vergleich mit ähnlichen Objekten<br>
                                <strong>Sachwertverfahren:</strong> Wert des Grundstücks + Gebäudes</p>
                            </div>
                            <div class="theory-card">
                                <h5>Renditekomponenten</h5>
                                <p><strong>Mietrendite:</strong> Jahresmiete / Kaufpreis<br>
                                <strong>Wertsteigerung:</strong> Preisänderung über Zeit<br>
                                <strong>Gesamtrendite:</strong> Mietrendite + Wertsteigerung</p>
                            </div>
                            <div class="theory-card">
                                <h5>Risikofaktoren</h5>
                                <p><strong>Lokationsrisiko:</strong> Standortqualität und -entwicklung<br>
                                <strong>Leerstandsrisiko:</strong> Mietausfälle und Leerstand<br>
                                <strong>Liquiditätsrisiko:</strong> Schwierigkeiten beim Verkauf</p>
                            </div>
                        </div>
                        
                        <h4>📊 Praktische Anwendung</h4>
                        <div class="practice-content">
                            <div class="practice-item">
                                <h5>Direkte Immobilieninvestitionen</h5>
                                <p><strong>Charakteristika:</strong> Direkter Besitz, volle Kontrolle, hohe Anfangsinvestition</p>
                                <p><strong>Beispiele:</strong> Wohnimmobilien, Gewerbeimmobilien, Bürogebäude</p>
                                <p><strong>Risiko-Rendite:</strong> Stabile Cashflows, illiquide, hohe Transaktionskosten</p>
                            </div>
                            <div class="practice-item">
                                <h5>REITs (Real Estate Investment Trusts)</h5>
                                <p><strong>Charakteristika:</strong> Börsennotierte Immobilienfonds, hohe Dividenden, liquide</p>
                                <p><strong>Beispiele:</strong> Wohn-REITs, Büro-REITs, Einzelhandels-REITs</p>
                                <p><strong>Risiko-Rendite:</strong> Aktienähnliche Volatilität, regelmäßige Ausschüttungen</p>
                            </div>
                            <div class="practice-item">
                                <h5>Immobilienfonds</h5>
                                <p><strong>Charakteristika:</strong> Professionelle Verwaltung, Diversifikation, moderate Mindestanlage</p>
                                <p><strong>Beispiele:</strong> Offene Immobilienfonds, geschlossene Fonds</p>
                                <p><strong>Risiko-Rendite:</strong> Professionell verwaltet, moderate Liquidität</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Alternative Investments -->
                <div class="asset-section">
                    <div class="asset-header">
                        <h3>🚀 Alternative Investments</h3>
                        <div class="asset-badges">
                            <span class="risk-badge variable">Variabel</span>
                            <span class="return-badge variable">Variabel</span>
                            <span class="liquidity-badge low">Niedrig</span>
                        </div>
                    </div>
                    
                    <div class="theory-content">
                        <h4>🎯 Theoretische Grundlagen</h4>
                        <div class="theory-grid">
                            <div class="theory-card">
                                <h5>Private Equity</h5>
                                <p>Investitionen in nicht-börsennotierte Unternehmen. Höhere Renditeerwartungen durch Illiquiditätsprämie und aktive Wertschöpfung.</p>
                            </div>
                            <div class="theory-card">
                                <h5>Hedge Funds</h5>
                                <p>Alternative Investmentstrategien mit flexiblen Anlagemöglichkeiten. Absolute Renditeziele unabhängig von Marktentwicklung.</p>
                            </div>
                            <div class="theory-card">
                                <h5>Kryptowährungen</h5>
                                <p>Digitale Vermögenswerte basierend auf Blockchain-Technologie. Sehr volatil, neue Assetklasse mit ungewisser Zukunft.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Methodik -->
            <section id="methodik" class="page">
                <div class="page-header">
                    <h2>Berechnungs-Methodik</h2>
                    <p>Transparente Darstellung aller verwendeten Formeln und Modelle</p>
                </div>
                
                <div class="instruction-box">
                    <h4>🔬 Wissenschaftliche Grundlage:</h4>
                    <p>Alle Berechnungen basieren auf etablierten finanziellen Modellen und mathematischen Formeln.</p>
                    <div style="background: rgba(138, 43, 226, 0.1); padding: 15px; border-radius: 8px; margin-top: 15px; border-left: 4px solid #8A2BE2;">
                        <h5 style="color: #8A2BE2; margin-bottom: 10px;">📋 PDF-Bericht Generierung</h5>
                        <p style="margin-bottom: 10px;">Generieren Sie einen umfassenden PDF-Bericht mit allen wichtigen Erkenntnissen aus Ihrem Dashboard:</p>
                        <ul style="margin: 0; padding-left: 20px; color: #E0E0E0;">
                            <li>Portfolio-Allokation & Performance</li>
                            <li>Black-Litterman Berechnungen</li>
                            <li>Backtesting-Ergebnisse</li>
                            <li>Value Testing & Investment-Analysen</li>
                            <li>Monte-Carlo Simulationen</li>
                            <li>Korrelationsmatrizen</li>
                        </ul>
                        <p style="margin-top: 10px; font-size: 14px; color: #B0B0B0;">
                        </p>
                    </div>
                </div>
                
                <!-- Professional PDF Download Section -->
                <div class="card comprehensive-pdf-section">
                    <h3>📋 Swiss Asset Pro - Kompletter Bericht</h3>
                    <div class="card-content">
                        <p>Laden Sie einen umfassenden PDF-Bericht mit allen wichtigen Erkenntnissen, Tabellen, Charts und Analysen aus Ihrem Dashboard herunter.</p>
                        
                        <div class="pdf-download-container">
                            <div class="pdf-preview">
                                <h4>📊 Enthaltene Inhalte:</h4>
                                <div class="pdf-content-list">
                                    <div class="content-item">
                                        <i class="fas fa-chart-pie"></i>
                                        <span>Portfolio-Allokation & Performance</span>
                                    </div>
                                    <div class="content-item">
                                        <i class="fas fa-chart-line"></i>
                                        <span>Asset-Performance Charts</span>
                                    </div>
                                    <div class="content-item">
                                        <i class="fas fa-calculator"></i>
                                        <span>Black-Litterman Berechnungen</span>
                                    </div>
                                    <div class="content-item">
                                        <i class="fas fa-flask"></i>
                                        <span>Backtesting-Ergebnisse</span>
                                    </div>
                                    <div class="content-item">
                                        <i class="fas fa-hand-holding-usd"></i>
                                        <span>Value Testing & Investment-Analysen</span>
                                    </div>
                                    <div class="content-item">
                                        <i class="fas fa-chart-bar"></i>
                                        <span>Strategie-Vergleiche</span>
                                    </div>
                                    <div class="content-item">
                                        <i class="fas fa-rocket"></i>
                                        <span>Monte-Carlo Simulationen</span>
                                    </div>
                                    <div class="content-item">
                                        <i class="fas fa-table"></i>
                                        <span>Korrelationsmatrizen</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="pdf-download-form">
                                <h4>🔐 Sichere PDF-Generierung</h4>
                                <p>Geben Sie das Passwort ein, um den Bericht zu generieren:</p>
                                
                                <div class="password-input-group">
                                    <input type="password" id="pdfPassword" placeholder="Passwort eingeben..." class="password-input">
                                    <button onclick="togglePasswordVisibility()" class="password-toggle" type="button">
                                        <i class="fas fa-eye" id="passwordToggleIcon"></i>
                                    </button>
                                </div>
                                
                                <button onclick="generateComprehensivePDF()" class="btn primary pdf-generate-btn" id="pdfGenerateBtn">
                                    <i class="fas fa-file-pdf"></i> Bericht generieren
                                </button>
                                
                                <div class="pdf-info">
                                    <small><i class="fas fa-info-circle"></i> Der Bericht wird mit Ihren aktuellen Dashboard-Daten erstellt</small>
                                </div>
                                
                                <div class="pdf-features">
                                    <div class="feature-tag">
                                        <i class="fas fa-lock"></i> Passwort-geschützt
                                    </div>
                                    <div class="feature-tag">
                                        <i class="fas fa-palette"></i> Professionelles Design
                                    </div>
                                    <div class="feature-tag">
                                        <i class="fas fa-chart-bar"></i> Alle Charts & Tabellen
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Monte Carlo Simulation -->
                <div class="card">
                    <h3>Monte Carlo Simulation</h3>
                    <p><strong>Was ist Monte Carlo Simulation?</strong><br>
                    Die Monte Carlo Simulation ist ein mathematisches Verfahren, das mithilfe von Zufallszahlen und Wahrscheinlichkeitsverteilungen tausende mögliche Zukunftsszenarien für Ihr Portfolio berechnet. Dies hilft bei der Risikoabschätzung und zeigt die Bandbreite möglicher Ergebnisse.</p>
                    
                    <div class="monte-carlo-controls">
                        <div class="input-group">
                            <label>Anzahl Simulationen</label>
                            <input type="number" id="monteCarloSimulations" value="1000" min="100" max="10000" step="100">
                            <small>Mehr Simulationen = genauere Ergebnisse (100-10.000)</small>
                        </div>
                        <div class="input-group">
                            <label>Zeithorizont (Jahre)</label>
                            <input type="number" id="monteCarloYears" value="10" min="1" max="30">
                            <small>Wie viele Jahre in die Zukunft simulieren</small>
                        </div>
                        <div class="input-group">
                            <label>Konfidenzniveau</label>
                            <select id="confidenceLevel" class="search-input">
                                <option value="90">90% (Konservativ)</option>
                                <option value="95" selected>95% (Standard)</option>
                                <option value="99">99% (Risikobewusst)</option>
                            </select>
                        </div>
                        <button class="btn" onclick="runMonteCarloSimulation()" style="align-self: end;">
                            <i class="fas fa-chart-line"></i> Simulation starten
                        </button>
                    </div>
                    
                    <div class="chart-container">
                        <canvas id="monteCarloChart"></canvas>
                    </div>
                    
                    <div id="monteCarloResults">
                        <p>Klicken Sie auf "Simulation starten", um die Monte Carlo Analyse durchzuführen.</p>
                    </div>
                </div>
                
                <div class="methodology-grid">
                    <div class="card">
                        <h3>1. Mean-Variance Optimierung (Markowitz)</h3>
                        <p><strong>Ziel:</strong> Optimales Verhältnis von Rendite und Risiko</p>
                        <p><strong>Portfolio Rendite:</strong></p>
                        <div class="formula-box">
                            E[Rₚ] = Σ(wᵢ × μᵢ)
                        </div>
                        <p><strong>Portfolio Volatilität:</strong></p>
                        <div class="formula-box">
                            σₚ = √(ΣΣ wᵢ wⱼ σᵢ σⱼ ρᵢⱼ)
                        </div>
                        <p><strong>Anwendung:</strong> Findet die Effizienzgrenze aller optimalen Portfolios</p>
                    </div>
                    
                    <div class="card">
                        <h3>2. Risikoparität (Risk Parity)</h3>
                        <p><strong>Ziel:</strong> Gleicher Risikobeitrag aller Assets</p>
                        <p><strong>Risikobeitrag:</strong></p>
                        <div class="formula-box">
                            RCᵢ = wᵢ × (∂σₚ/∂wᵢ)
                        </div>
                        <p><strong>Optimierung:</strong></p>
                        <div class="formula-box">
                            RCᵢ = RCⱼ für alle i, j
                        </div>
                        <p><strong>Anwendung:</strong> Robuster gegen Marktschwankungen</p>
                    </div>
                    
                    <div class="card">
                        <h3>3. Minimum-Varianz-Portfolio</h3>
                        <p><strong>Ziel:</strong> Niedrigstmögliche Volatilität</p>
                        <p><strong>Optimierungsproblem:</strong></p>
                        <div class="formula-box">
                            min wᵀΣw unter Σwᵢ = 1
                        </div>
                        <p><strong>Lösung:</strong></p>
                        <div class="formula-box">
                            w = Σ⁻¹1 / (1ᵀΣ⁻¹1)
                        </div>
                        <p><strong>Anwendung:</strong> Für risikoscheue Anleger</p>
                    </div>
                    
                    <div class="card">
                        <h3>4. Maximum Sharpe Ratio</h3>
                        <p><strong>Ziel:</strong> Bestes Rendite-Risiko-Verhältnis</p>
                        <p><strong>Sharpe Ratio:</strong></p>
                        <div class="formula-box">
                            S = (E[Rₚ] - R_f) / σₚ
                        </div>
                        <p><strong>Tangency Portfolio:</strong></p>
                        <div class="formula-box">
                            w = Σ⁻¹(μ - R_f1) / (1ᵀΣ⁻¹(μ - R_f1))
                        </div>
                        <p><strong>Anwendung:</strong> Optimal für risikobewusste Anleger</p>
                    </div>
                    
                    <div class="card">
                        <h3>5. Black-Litterman Modell</h3>
                        <p><strong>Ziel:</strong> Kombiniert Marktdaten mit Investor-Views</p>
                        <p><strong>Posterior Rendite:</strong></p>
                        <div class="formula-box">
                            μ = [(τΣ)⁻¹ + PᵀΩ⁻¹P]⁻¹ × [(τΣ)⁻¹π + PᵀΩ⁻¹Q]
                        </div>
                        <p><strong>Anwendung:</strong> Für erfahrene Anleger mit Marktmeinung</p>
                    </div>
                </div>
            </section>

            <!-- Black-Litterman Theorie -->
            <section id="black-litterman" class="page">
                <div class="page-header">
                    <h2>Black-Litterman Theorie</h2>
                    <p>Portfolio-Optimierung mit subjektiven Marktansichten</p>
                </div>
                
                <div class="instruction-box">
                    <h4>🧮 Quantitative Portfolio-Optimierung:</h4>
                    <p>Die Black-Litterman-Theorie löst ein fundamentales Problem der Portfolio-Optimierung: Wie können eigene Meinungen über zukünftige Renditen sinnvoll mit dem Marktgleichgewicht kombiniert werden?</p>
                    <button onclick="performBlackLittermanAnalysis()" class="btn btn-primary" style="margin-top: 15px;">
                        <i class="fas fa-calculator"></i> Black-Litterman Analyse mit Portfolio-Daten durchführen
                    </button>
                    <div id="black-litterman-results" style="display: none; margin-top: 20px;"></div>
                </div>

                <!-- Live Analysis Section -->
                <div id="black-litterman-analysis-section" style="display: none;">
                    <div class="theory-section">
                        <h3>📊 Live Black-Litterman Analyse Ihres Portfolios</h3>
                        
                        <div class="data-table-container">
                            <h4>Portfolio-Daten</h4>
                            <div id="portfolio-data-table"></div>
                        </div>

                        <div class="data-table-container">
                            <h4>Implizite Gleichgewichts-Renditen (π)</h4>
                            <div id="implied-returns-table"></div>
                        </div>

                        <div class="data-table-container">
                            <h4>Black-Litterman Posterior-Renditen (μ_BL)</h4>
                            <div id="posterior-returns-table"></div>
                        </div>

                        <div class="data-table-container">
                            <h4>Optimale Portfolio-Gewichte (w*)</h4>
                            <div id="optimal-weights-table"></div>
                        </div>

                        <div class="charts-section">
                            <div style="display: flex; gap: 20px; flex-wrap: wrap;">
                                <div style="flex: 1; min-width: 300px;">
                                    <h4>Rendite-Vergleich</h4>
                                    <canvas id="returns-comparison-chart" width="400" height="300"></canvas>
                                </div>
                                <div style="flex: 1; min-width: 300px;">
                                    <h4>Portfolio-Gewichte</h4>
                                    <canvas id="portfolio-weights-chart" width="400" height="300"></canvas>
                                </div>
                            </div>
                        </div>

                        <div class="interpretation-box">
                            <h4>📈 Interpretation der Ergebnisse</h4>
                            <div id="black-litterman-interpretation"></div>
                        </div>
                    </div>
                </div>

                <!-- Einleitung -->
                <div class="theory-section">
                    <h3>📘 Die Black-Litterman-Theorie am Beispiel von Nestlé – Schritt für Schritt erklärt</h3>
                    
                    <div class="theory-card">
                        <h4>1️⃣ Einleitung: Was macht die Black-Litterman-Theorie?</h4>
                        <p>Die Black-Litterman-Theorie ist ein Ansatz zur Portfolio-Optimierung, der vom klassischen Markowitz-Modell (Mean-Variance-Optimierung) ausgeht, aber ein wichtiges Problem löst:</p>
                        <p><strong>Wie kann man eigene Meinungen („Views") über zukünftige Renditen sinnvoll mit dem Marktgleichgewicht kombinieren?</strong></p>
                        
                        <p>Das Modell wurde von Fischer Black und Robert Litterman bei Goldman Sachs entwickelt und verbindet zwei Informationsquellen:</p>
                        <ul>
                            <li><strong>Marktimplizite Erwartungen</strong> – was der Markt „denkt", abgeleitet aus aktuellen Kapitalisierungen (dem Marktportfolio)</li>
                            <li><strong>Subjektive Ansichten des Investors</strong> – z. B. „Nestlé wird besser abschneiden als Novartis"</li>
                        </ul>
                        
                        <p>Das Ergebnis sind posterior-Erwartungsrenditen (eine Kombination aus beiden), die man dann wie gewohnt in einer Portfolio-Optimierung verwendet.</p>
                    </div>
                </div>

                <!-- Praxisbeispiel -->
                <div class="theory-section">
                    <h3>2️⃣ Unser Praxisbeispiel: Nestlé, Roche und Novartis</h3>
                    
                    <div class="data-table-container">
                        <h4>Marktkapitalisierungen (Stand Oktober 2025)</h4>
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Unternehmen</th>
                                    <th>Marktkapitalisierung (Mrd. CHF)</th>
                                    <th>Quelle</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Nestlé</td>
                                    <td>194,52</td>
                                    <td>StockAnalysis</td>
                                </tr>
                                <tr>
                                    <td>Roche</td>
                                    <td>251,97</td>
                                    <td>Morningstar / StockAnalysis</td>
                                </tr>
                                <tr>
                                    <td>Novartis</td>
                                    <td>256,06</td>
                                    <td>CompaniesMarketCap</td>
                                </tr>
                                <tr style="background: #2A2A2A; font-weight: bold;">
                                    <td>Gesamtsumme</td>
                                    <td>702,55</td>
                                    <td>-</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="data-table-container">
                        <h4>Marktgewichte (Anteile im Marktportfolio)</h4>
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Aktie</th>
                                    <th>Gewicht</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Nestlé</td>
                                    <td>27,68 %</td>
                                </tr>
                                <tr>
                                    <td>Roche</td>
                                    <td>35,86 %</td>
                                </tr>
                                <tr>
                                    <td>Novartis</td>
                                    <td>36,46 %</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Modellannahmen -->
                <div class="theory-section">
                    <h3>3️⃣ Modellannahmen für Volatilitäten und Korrelationen</h3>
                    
                    <div class="theory-card">
                        <h4>Volatilitäten (jährlich)</h4>
                        <ul>
                            <li>Nestlé: 18 %</li>
                            <li>Roche: 22 %</li>
                            <li>Novartis: 20 %</li>
                        </ul>
                    </div>

                    <div class="data-table-container">
                        <h4>Korrelationsmatrix</h4>
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Nestlé</th>
                                    <th>Roche</th>
                                    <th>Novartis</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td><strong>Nestlé</strong></td>
                                    <td>1,00</td>
                                    <td>0,60</td>
                                    <td>0,55</td>
                                </tr>
                                <tr>
                                    <td><strong>Roche</strong></td>
                                    <td>0,60</td>
                                    <td>1,00</td>
                                    <td>0,65</td>
                                </tr>
                                <tr>
                                    <td><strong>Novartis</strong></td>
                                    <td>0,55</td>
                                    <td>0,65</td>
                                    <td>1,00</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="formula-box">
                        <h4>Kovarianzmatrix Σ</h4>
                        <div class="formula">
                            Σ = [0.0324  0.0238  0.0198]<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;[0.0238  0.0484  0.0286]<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;[0.0198  0.0286  0.0400]
                        </div>
                    </div>
                </div>

                <!-- Schritt 1: Implizite Renditen -->
                <div class="theory-section">
                    <h3>4️⃣ Schritt 1: Implizite Gleichgewichts-Renditen (π)</h3>
                    
                    <div class="theory-card">
                        <p>Black-Litterman startet mit den impliziten Renditen des Marktportfolios, berechnet mit:</p>
                        <div class="formula">π = δ × Σ × w</div>
                        <p>mit δ = 2,5 (Risikoaversion des durchschnittlichen Investors)</p>
                    </div>

                    <div class="data-table-container">
                        <h4>Implizite Renditen π</h4>
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Aktie</th>
                                    <th>Implizite Rendite π</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Nestlé</td>
                                    <td>6,18 %</td>
                                </tr>
                                <tr>
                                    <td>Roche</td>
                                    <td>8,59 %</td>
                                </tr>
                                <tr>
                                    <td>Novartis</td>
                                    <td>7,58 %</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <p>Diese Werte sagen: Wenn der Markt effizient ist, müssten diese erwarteten Renditen genau die Gewichte rechtfertigen, die wir am Markt sehen.</p>
                </div>

                <!-- Schritt 2: Investor Views -->
                <div class="theory-section">
                    <h3>5️⃣ Schritt 2: Investorische Ansicht („View")</h3>
                    
                    <div class="theory-card">
                        <h4>Unsere Annahme:</h4>
                        <p><strong>„Nestlé wird Novartis um 1,5 % pro Jahr übertreffen."</strong></p>
                        
                        <p>Das ist eine relative View, formal:</p>
                        <div class="formula">P = [1, 0, -1], Q = 0.015</div>
                        <p>Also: Nestlé minus Novartis = +1,5 %</p>
                        
                        <p>Das Modell verlangt außerdem eine Einschätzung über die Unsicherheit der Ansicht (Ω). Wir setzen hier eine moderate Konfidenz:</p>
                        <div class="formula">Ω = 0,5 × P(τΣ)P'</div>
                        <p>mit τ = 0,05 als Skalierungsfaktor</p>
                    </div>
                </div>

                <!-- Schritt 3: Posterior Renditen -->
                <div class="theory-section">
                    <h3>6️⃣ Schritt 3: Posterior-Erwartungsrenditen (μ_BL)</h3>
                    
                    <div class="theory-card">
                        <p>Nun kombiniert Black-Litterman die Marktmeinung π mit der Investor-View (P, Q):</p>
                        <div class="formula">
                            μ_BL = [(τΣ)⁻¹ + PᵀΩ⁻¹P]⁻¹ × [(τΣ)⁻¹π + PᵀΩ⁻¹Q]
                        </div>
                    </div>

                    <div class="data-table-container">
                        <h4>Posterior-Renditen μ_BL</h4>
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Aktie</th>
                                    <th>Posterior-Rendite μ_BL</th>
                                    <th>Änderung</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Nestlé</td>
                                    <td>6,92 %</td>
                                    <td style="color: #4CAF50;">+0,74 %</td>
                                </tr>
                                <tr>
                                    <td>Roche</td>
                                    <td>8,31 %</td>
                                    <td style="color: #FFD700;">-0,28 %</td>
                                </tr>
                                <tr>
                                    <td>Novartis</td>
                                    <td>6,39 %</td>
                                    <td style="color: #FF6B6B;">-1,19 %</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="interpretation-box">
                        <h4>📊 Interpretation</h4>
                        <ul>
                            <li><strong>Nestlé</strong> steigt von 6,18 % → 6,92 %</li>
                            <li><strong>Novartis</strong> sinkt von 7,58 % → 6,39 %</li>
                            <li><strong>Roche</strong> bleibt nahezu gleich</li>
                        </ul>
                        <p>Das Modell „glaubt" also sowohl dem Markt als auch dem Investor, gewichtet nach der Sicherheit beider Informationsquellen.</p>
                    </div>
                </div>

                <!-- Schritt 4: Optimale Gewichte -->
                <div class="theory-section">
                    <h3>7️⃣ Schritt 4: Optimale Portfolio-Gewichte</h3>
                    
                    <div class="theory-card">
                        <p>Jetzt können wir die neuen Renditen in die Mean-Variance-Formel einsetzen:</p>
                        <div class="formula">w* = (1/δ) × Σ⁻¹ × μ_BL</div>
                    </div>

                    <div class="data-table-container">
                        <h4>Optimale Portfolio-Gewichte</h4>
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Aktie</th>
                                    <th>Optimales Gewicht</th>
                                    <th>Marktgewicht</th>
                                    <th>Differenz</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Nestlé</td>
                                    <td>51,28 %</td>
                                    <td>27,68 %</td>
                                    <td style="color: #4CAF50;">+23,60 %</td>
                                </tr>
                                <tr>
                                    <td>Roche</td>
                                    <td>35,87 %</td>
                                    <td>35,86 %</td>
                                    <td style="color: #FFD700;">+0,01 %</td>
                                </tr>
                                <tr>
                                    <td>Novartis</td>
                                    <td>12,85 %</td>
                                    <td>36,46 %</td>
                                    <td style="color: #FF6B6B;">-23,61 %</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Fazit -->
                <div class="theory-section">
                    <h3>8️⃣ Fazit</h3>
                    
                    <div class="conclusion-box">
                        <p>Die Black-Litterman-Theorie zeigt elegant, wie subjektive Erwartungen (z. B. „Nestlé wird besser laufen") in ein mathematisch konsistentes Gesamtbild integriert werden können.</p>
                        
                        <h4>Im Ergebnis:</h4>
                        <ul>
                            <li>Das Portfolio verschiebt sich deutlich zugunsten von Nestlé</li>
                            <li>reduziert das Gewicht von Novartis erheblich</li>
                            <li>und behält Roche in etwa auf Marktniveau</li>
                        </ul>
                        
                        <p>So erhält man ein rational optimiertes Portfolio, das Marktsignale und eigene Meinungen kombiniert.</p>
                    </div>
                </div>

                <!-- Zusammenfassung -->
                <div class="theory-section">
                    <h3>🔢 Zusammenfassung der wichtigsten Kennzahlen</h3>
                    
                    <div class="data-table-container">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Größe</th>
                                    <th>Nestlé</th>
                                    <th>Roche</th>
                                    <th>Novartis</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td><strong>Marktgewicht</strong></td>
                                    <td>27,68 %</td>
                                    <td>35,86 %</td>
                                    <td>36,46 %</td>
                                </tr>
                                <tr>
                                    <td><strong>Implizite Rendite π</strong></td>
                                    <td>6,18 %</td>
                                    <td>8,59 %</td>
                                    <td>7,58 %</td>
                                </tr>
                                <tr>
                                    <td><strong>View-angepasste Rendite μ_BL</strong></td>
                                    <td>6,92 %</td>
                                    <td>8,31 %</td>
                                    <td>6,39 %</td>
                                </tr>
                                <tr style="background: #2A2A2A; font-weight: bold;">
                                    <td><strong>Optimales Gewicht</strong></td>
                                    <td>51,28 %</td>
                                    <td>35,87 %</td>
                                    <td>12,85 %</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Erweiterungen -->
                <div class="theory-section">
                    <h3>💡 Erweiterungen (für Fortgeschrittene)</h3>
                    
                    <div class="theory-card">
                        <ul>
                            <li><strong>Mehrere Views:</strong> z. B. „Roche erzielt 8 % p.a." + „Nestlé besser als Novartis"</li>
                            <li><strong>Unterschiedliche Konfidenzen:</strong> pro View (kleines Ω = hohes Vertrauen)</li>
                            <li><strong>Schätzung der Kovarianzmatrix Σ:</strong> aus echten historischen Daten</li>
                            <li><strong>Sensitivitätsanalysen:</strong> über τ und δ</li>
                        </ul>
                    </div>
                </div>

                <!-- Formel-Übersicht -->
                <div class="theory-section">
                    <h3>📚 Kurzformel-Übersicht</h3>
                    
                    <div class="data-table-container">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Symbol</th>
                                    <th>Bedeutung</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr><td>Σ</td><td>Kovarianzmatrix der Renditen</td></tr>
                                <tr><td>δ</td><td>Risikoaversion</td></tr>
                                <tr><td>τ</td><td>Skalierungsfaktor für Unsicherheit des Marktgleichgewichts</td></tr>
                                <tr><td>π</td><td>Implied Equilibrium Returns</td></tr>
                                <tr><td>P, Q</td><td>Views (Matrix und Werte)</td></tr>
                                <tr><td>Ω</td><td>Unsicherheitsmatrix der Views</td></tr>
                                <tr><td>μ_BL</td><td>Black-Litterman-Posterior-Erwartungsrenditen</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Ergebnis -->
                <div class="theory-section">
                    <h3>✅ Ergebnis in einem Satz</h3>
                    
                    <div class="result-box">
                        <p>Nach der Black-Litterman-Theorie ergibt sich für Nestlé – basierend auf der View „Nestlé schlägt Novartis um 1,5 %" – ein optimales Portfolio mit rund 51 % Nestlé, 36 % Roche und 13 % Novartis, also eine deutliche Übergewichtung von Nestlé bei ausgewogenem Gesamtrisiko.</p>
                    </div>
                </div>
            </section>

            <!-- Über mich -->
            <section id="about" class="page">
                <div class="page-header">
                    <h2>Über mich</h2>
                    <p>Portfolioanalyst & Finanzanalyst</p>
                </div>
                
                <div class="instruction-box">
                    <h4>🏆 Expertise:</h4>
                    <p>Spezialisiert auf quantitative Portfolio-Optimierung und Risikomanagement mit Fokus auf Schweizer Aktienmarkt und internationale Diversifikation.</p>
                </div>
                
                <div class="card">
                    <h3>Ahmed Choudhary</h3>
                    <p><strong>Portfolioanalyst & Finanzanalyst</strong></p>
                    
                    <div style="margin: 20px 0;">
                        <a href="https://www.linkedin.com/in/ahmed-choudhary-3a61371b6" class="linkedin-link" target="_blank">
                            <i class="fab fa-linkedin-in"></i> LinkedIn Profil besuchen
                        </a>
                    </div>
                    
                    <h4>Über mich:</h4>
                    <p>Ich habe diese umfassende Portfolio-Simulationsplattform entwickelt, um quantitative Finanzanalyse mit praktischer Anwendung zu verbinden. Mein Fokus liegt auf der Optimierung von Portfolios unter Berücksichtigung modernster finanzieller Modelle und Risikomanagement-Techniken.</p>
                    
                    <h4>Kontakt:</h4>
                    <p>Email: <a href="mailto:ahmedch1999@gmail.com" class="email-link">ahmedch1999@gmail.com</a></p>
                    
                    <div style="background: #2A2A2A; padding: 15px; border-radius: 8px; margin-top: 20px; border: 1px solid var(--border-light); box-shadow: var(--shadow-soft);">
                        <h4 style="color: #E8E8E8;">Über diese Plattform:</h4>
                        <p style="color: #E0E0E0;">Der Swiss Asset Pro kombiniert moderne Finanztechnologie mit wissenschaftlichen Berechnungsmethoden. Alle Analysen basieren auf etablierten finanziellen Modellen wie Markowitz-Portfolio-Optimierung, Monte Carlo Simulationen und Risikoparität. Die Plattform wurde entwickelt, um sowohl privaten Anlegern als auch professionellen Investoren tiefe Einblicke in Portfolio-Performance und Risikomanagement zu bieten.</p>
                    </div>
                </div>

                <!-- Quellen Section -->
                <div class="card">
                    <h3>Quellen & Daten</h3>
                    <p>Diese Plattform verwendet Daten von folgenden Quellen:</p>
                    
                    <div class="sources-grid">
                        <div class="source-card" style="background: linear-gradient(145deg, #2A2A2A, #232323); border: 1px solid var(--border-light); box-shadow: var(--shadow-soft);">
                            <h4 style="color: #E8E8E8;">Yahoo Finance</h4>
                            <p><strong style="color: #E8E8E8;">Verwendet für:</strong> <span style="color: #E0E0E0;">Aktuelle Aktienkurse, historische Kursdaten, Marktinformationen</span></p>
                            <p><strong style="color: #E8E8E8;">Website:</strong> <a href="https://finance.yahoo.com" class="news-link" target="_blank" style="color: var(--accent-violet);">finance.yahoo.com</a></p>
                        </div>
                        
                        <div class="source-card" style="background: linear-gradient(145deg, #2A2A2A, #232323); border: 1px solid var(--border-light); box-shadow: var(--shadow-soft);">
                            <h4 style="color: #E8E8E8;">Swiss Exchange (SIX)</h4>
                            <p><strong style="color: #E8E8E8;">Verwendet für:</strong> <span style="color: #E0E0E0;">Schweizer Aktienkurse, SMI Daten</span></p>
                            <p><strong style="color: #E8E8E8;">Website:</strong> <a href="https://www.six-group.com" class="news-link" target="_blank" style="color: var(--accent-violet);">www.six-group.com</a></p>
                        </div>
                        
                        <div class="source-card" style="background: linear-gradient(145deg, #2A2A2A, #232323); border: 1px solid var(--border-light); box-shadow: var(--shadow-soft);">
                            <h4 style="color: #E8E8E8;">Bloomberg</h4>
                            <p><strong style="color: #E8E8E8;">Verwendet für:</strong> <span style="color: #E0E0E0;">Benchmark-Indizes, Marktdaten</span></p>
                            <p><strong style="color: #E8E8E8;">Website:</strong> <a href="https://www.bloomberg.com" class="news-link" target="_blank" style="color: var(--accent-violet);">www.bloomberg.com</a></p>
                        </div>
                        
                        <div class="source-card" style="background: linear-gradient(145deg, #2A2A2A, #232323); border: 1px solid var(--border-light); box-shadow: var(--shadow-soft);">
                            <h4 style="color: #E8E8E8;">Finanznachrichten</h4>
                            <p><strong style="color: #E8E8E8;">Quellen:</strong> <span style="color: #E0E0E0;">Finanz und Wirtschaft, Handelszeitung, NZZ, Financial Times</span></p>
                            <p><strong style="color: #E8E8E8;">Verwendet für:</strong> <span style="color: #E0E0E0;">Aktuelle Marktnews und Analysen</span></p>
                        </div>
                    </div>
                    
                    <div style="background: rgba(138, 43, 226, 0.1); padding: 15px; border-radius: 8px; margin-top: 20px; border: 1px solid rgba(138, 43, 226, 0.3); box-shadow: var(--shadow-soft);">
                        <h4 style="color: #E8E8E8;">Hinweis zu den Daten:</h4>
                        <p style="color: #E0E0E0;">Alle Daten werden in Echtzeit von den genannten Quellen bezogen und automatisch verarbeitet. Bei Verbindungsproblemen werden simulierte Daten verwendet, die auf historischen Mustern basieren. Die Genauigkeit der Daten hängt von der Verfügbarkeit der Quellen ab.</p>
                    </div>
                </div>

                <!-- FINMA Disclaimer -->
                <div class="card" style="background: linear-gradient(145deg, #2A2A2A, #232323); border: 2px solid #FFD700; box-shadow: 0 4px 20px rgba(255, 215, 0, 0.2);">
                    <h3 style="color: #FFD700; text-align: center; margin-bottom: 20px;">
                        <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                        FINMA Hinweis
                    </h3>
                    
                    <div style="background: rgba(255, 215, 0, 0.1); padding: 20px; border-radius: 8px; border: 1px solid rgba(255, 215, 0, 0.3);">
                        <h4 style="color: #FFD700; margin-bottom: 15px;">Wichtiger rechtlicher Hinweis:</h4>
                        
                        <p style="color: #E8E8E8; margin-bottom: 15px; line-height: 1.6;">
                            <strong>Diese Plattform ist keine FINMA-lizenzierte Finanzdienstleistung.</strong> 
                            Alle hier dargestellten Analysen, Simulationen und Empfehlungen dienen ausschließlich 
                            Bildungs- und Informationszwecken und stellen keine Anlageberatung dar.
                        </p>
                        
                        <div style="background: #1A1A1A; padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #FFD700;">
                            <h5 style="color: #FFD700; margin: 0 0 10px 0;">Keine Anlageberatung:</h5>
                            <ul style="color: #D0D0D0; margin: 0; padding-left: 20px;">
                                <li>Keine individuelle Anlageempfehlungen</li>
                                <li>Keine Berücksichtigung persönlicher Umstände</li>
                                <li>Keine Garantie für Renditen oder Verluste</li>
                                <li>Keine Haftung für Anlageentscheidungen</li>
                            </ul>
                        </div>
                        
                        <div style="background: #1A1A1A; padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #FF6B6B;">
                            <h5 style="color: #FF6B6B; margin: 0 0 10px 0;">Risikohinweis:</h5>
                            <p style="color: #D0D0D0; margin: 0; line-height: 1.6;">
                                Alle Anlagen sind mit Risiken verbunden. Der Wert von Anlagen kann fallen und steigen. 
                                Vergangene Performance ist kein Indikator für zukünftige Ergebnisse. 
                                <strong>Investieren Sie nur Geld, dessen Verlust Sie sich leisten können.</strong>
                            </p>
                        </div>
                        
                        <div style="background: #1A1A1A; padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #87CEEB;">
                            <h5 style="color: #87CEEB; margin: 0 0 10px 0;">Empfehlung:</h5>
                            <p style="color: #D0D0D0; margin: 0; line-height: 1.6;">
                                Konsultieren Sie vor jeder Anlageentscheidung einen qualifizierten Finanzberater 
                                oder eine FINMA-lizenzierte Bank. Diese Plattform ersetzt keine professionelle Beratung.
                            </p>
                        </div>
                        
                        <div style="text-align: center; margin-top: 20px; padding-top: 15px; border-top: 1px solid rgba(255, 215, 0, 0.3);">
                            <p style="color: #888; font-size: 12px; margin: 0;">
                                Weitere Informationen: <a href="https://www.finma.ch" target="_blank" style="color: #FFD700;">www.finma.ch</a>
                            </p>
                        </div>
                    </div>
                </div>
            </section>
        </main>
    </div>

    <!-- Navigation Pfeile -->
    <div id="page-navigation" style="position: fixed; bottom: 30px; right: 30px; z-index: 9999 !important; display: flex !important;">
        <div style="display: flex; gap: 10px; align-items: center; background: rgba(0, 0, 0, 0.95); padding: 8px 14px; border-radius: 12px; backdrop-filter: blur(10px); border: 2px solid #8A2BE2; box-shadow: 0 4px 20px rgba(138, 43, 226, 0.6);">
            <button id="prev-page-btn" onclick="navigateToPreviousPage()" style="background: #8A2BE2; color: white; border: none; padding: 10px 14px; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: 700; transition: all 0.3s ease; opacity: 1 !important; box-shadow: 0 2px 8px rgba(138, 43, 226, 0.4);" onmouseover="this.style.background='#6A1B9A'; this.style.transform='scale(1.1)'" onmouseout="this.style.background='#8A2BE2'; this.style.transform='scale(1)'">
                <i class="fas fa-chevron-left"></i>
            </button>
            <button id="next-page-btn" onclick="navigateToNextPage()" style="background: #8A2BE2; color: white; border: none; padding: 10px 14px; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: 700; transition: all 0.3s ease; opacity: 1 !important; box-shadow: 0 2px 8px rgba(138, 43, 226, 0.4);" onmouseover="this.style.background='#6A1B9A'; this.style.transform='scale(1.1)'" onmouseout="this.style.background='#8A2BE2'; this.style.transform='scale(1)'">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>

    <script>         // Windows Detection - Optimierte Animationen nur für Windows
        function isWindows() {
            return navigator.userAgent.includes('Windows');
        }

        if (isWindows()) {
            document.body.classList.add('performance-mode');
            console.log('Windows Performance Mode aktiviert');
        }
        // Globale Variablen
        const swissStocks = ''' + json.dumps(SWISS_STOCKS) + ''';
        const indices = ''' + json.dumps(INDICES) + ''';
        const otherAssets = ''' + json.dumps(OTHER_ASSETS) + ''';
        const marketCycles = ''' + json.dumps(MARKET_CYCLES) + ''';
        const swissBankPortfolios = ''' + json.dumps(SWISS_BANK_PORTFOLIOS) + ''';
        const scenarios = ''' + json.dumps(SCENARIOS) + ''';
        const translations = ''' + json.dumps(TRANSLATIONS) + ''';
        
        let userPortfolio = JSON.parse(localStorage.getItem('userPortfolio') || '[]');
        let totalInvestment = 100000;
        let portfolioCalculated = false;
        
        // Save portfolio to localStorage whenever it changes
        function savePortfolio() {
            localStorage.setItem('userPortfolio', JSON.stringify(userPortfolio));
            console.log('Portfolio saved to localStorage:', userPortfolio);
        }
        let currentLanguage = 'de';
        let autoRefreshInterval;
        let marketRefreshInterval;
        let currentTimeframe = '5y';
        
        // Status-Bar Daten speichern
        let statusBarData = {
            lastUpdate: '--:--:--',
            smiReturn: '+1.2%',
            portfolioReturn: '+0.0%',
            portfolioValue: 'CHF 0'
        };

        // Sprachumschaltung
        function switchLanguage(lang) {
            currentLanguage = lang;
            
            // UI-Elemente aktualisieren
            document.querySelectorAll('.lang-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelector(`.lang-btn[onclick="switchLanguage('${lang}')"]`).classList.add('active');
            
            // Texte übersetzen
            document.getElementById('passwordPrompt').textContent = translations[lang].password_prompt;
            document.getElementById('passwordInput').placeholder = translations[lang].password_placeholder;
            document.getElementById('accessButton').textContent = translations[lang].access_button;
            document.getElementById('passwordError').textContent = translations[lang].password_error;
            // document.getElementById('passwordHint').textContent = translations[lang].password_hint;
            
            document.getElementById('lastUpdateText').textContent = translations[lang].last_update;
            document.getElementById('smiReturnText').textContent = translations[lang].smi_return;
            document.getElementById('portfolioReturnText').textContent = translations[lang].portfolio_return;
            document.getElementById('portfolioValueText').textContent = translations[lang].portfolio_value;
            
            // Status-Bar Daten beibehalten
            document.getElementById('lastUpdate').textContent = statusBarData.lastUpdate;
            document.getElementById('smiReturn').textContent = statusBarData.smiReturn;
            document.getElementById('portfolioReturn').textContent = statusBarData.portfolioReturn;
            document.getElementById('portfolioValue').textContent = statusBarData.portfolioValue;
            
            // Navigation übersetzen
            const navMap = {
                'dashboard': translations[lang].dashboard,
                'portfolio': translations[lang].portfolio,
                'strategieanalyse': translations[lang].strategieanalyse,
                'simulation': translations[lang].simulation,
                'bericht': translations[lang].bericht,
                'markets': translations[lang].markets,
                'assets': translations[lang].assets,
                'methodik': translations[lang].methodik,
                'black-litterman': translations[lang]['black-litterman'],
                'about': translations[lang].about
            };
            
            document.querySelectorAll('.nav-tab').forEach(tab => {
                const page = tab.getAttribute('data-page');
                if (navMap[page]) {
                    tab.textContent = navMap[page];
                }
            });
            
            // Seiten-Header übersetzen
            document.querySelectorAll('.page-header h2').forEach(header => {
                const pageId = header.closest('.page').id;
                if (navMap[pageId]) {
                    header.textContent = navMap[pageId];
                }
            });
        }

        // Vereinfachte Passwort-Prüfung
        function checkPassword() {
            const password = document.getElementById('passwordInput').value;
            const errorElement = document.getElementById('passwordError');
            
            // Backend Password Check
            fetch('/api/verify_password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({password: password})
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // SOFORT zur Welcome Screen wechseln
                    document.getElementById('passwordProtection').style.display = 'none';
                    document.getElementById('welcomeScreen').style.display = 'flex';
                    
                    // Nach 4.5 Sekunden direkt zur Hauptseite
                    setTimeout(() => {
                        document.getElementById('welcomeScreen').style.display = 'none';
                        document.getElementById('mainContent').style.display = 'block';
                        document.querySelector('footer').style.display = 'block';
                        initializeApplication();
                        startAutoRefresh();
                    }, 4500);
                    
                    // Setup Landing Page nach dem Laden
                    setTimeout(() => {
                        initializeLandingPage();
                    }, 4600);
                    
                } else {
                    errorElement.style.display = 'block';
                    document.getElementById('passwordInput').style.borderColor = '#DC3545';
                    setTimeout(() => {
                        document.getElementById('passwordInput').style.borderColor = '';
                    }, 1000);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                errorElement.style.display = 'block';
            });
            
            /**
             * Initialisiert die Landing-Page
             * (a) Erzeugt dynamisch Panels aus den Header-Links
             * (b) Zeigt das Overlay nach dem Loading an
             * (c) Fügt Event Listener hinzu
             */
            function initializeLandingPage() {
                // Panels aus Navigation-Tabs generieren
                const panelsContainer = document.getElementById('landingPanelsContainer');
                
                // Verhindere mehrfache Initialisierung
                if (panelsContainer.children.length > 0) {
                    console.log('Landing page already initialized, skipping...');
                    return;
                }
                
                const navTabs = document.querySelectorAll('#headerNavTabs .nav-tab:not(#startseiteLink)');
                
                // Bilder für die jeweiligen Tabs
                const tabImages = {
                    'getting-started': '/static/Bilder-SAP/annie-spratt-IT6aov1ScW0-unsplash.jpg',
                    'dashboard': '/static/Bilder-SAP/anthony-tyrrell-Bl-LiSJOnlY-unsplash.jpg',
                    'portfolio': '/static/Bilder-SAP/armando-castillejos-DPi0ddFTBS0-unsplash.jpg',
                    'strategieanalyse': '/static/Bilder-SAP/benedikt-jaletzke-TZsfOb3cgJM-unsplash.jpg',
                    'simulation': '/static/Bilder-SAP/bumgeun-nick-suh-o40m9hf2lB4-unsplash.jpg',
                    'backtesting': '/static/Bilder-SAP/david-werbrouck-5GwLlb-_UYk-unsplash.jpg',
                    'investing': '/static/Bilder-SAP/frederic-perez-RDNAtCk5rJ8-unsplash.jpg',
                    'bericht': '/static/Bilder-SAP/ian-parker-rWey_wseEcY-unsplash.jpg',
                    'markets': '/static/Bilder-SAP/jason-dent-3wPJxh-piRw-unsplash.jpg',
                    'assets': '/static/Bilder-SAP/jiri-brtnik-jIaSUaQVPl0-unsplash.jpg',
                    'methodik': '/static/Bilder-SAP/pepi-stojanovski-MJSFNZ8BAXw-unsplash.jpg',
                    'black-litterman': '/static/Bilder-SAP/robert-tudor-G7bXcUgh_xk-unsplash.jpg',
                    'about': '/static/Bilder-SAP/tai-s-captures-r5kTKshp22M-unsplash.jpg'
                };
                
                // Beschreibungen für die jeweiligen Tabs
                const tabDescriptions = {
                    'getting-started': 'Einstieg und erste Schritte zur Portfolioerstellung',
                    'dashboard': 'Überblick über Ihr Portfolio und aktuelle Kennzahlen',
                    'portfolio': 'Detaillierte Entwicklung Ihrer Anlagen über Zeit',
                    'strategieanalyse': 'Vergleich verschiedener Portfolio-Strategien',
                    'simulation': 'Zukunftsprognosen und Szenarioanalyse',
                    'backtesting': 'Strategie-Testing mit historischen Daten',
                    'investing': 'Anlagestrategien und Investmentmöglichkeiten',
                    'bericht': 'Detaillierte Berichte und tiefergehende Analyse',
                    'markets': 'Aktuelle Marktdaten und Finanznachrichten',
                    'assets': 'Übersicht aller verfügbaren Anlageklassen',
                    'methodik': 'Erklärung der verwendeten Berechnungsmethoden',
                    'black-litterman': 'Portfolio-Optimierung mit subjektiven Marktansichten',
                    'about': 'Informationen über den Entwickler'
                };
                
                // HTML für die Panels erstellen
                let panelDelay = 0;
                navTabs.forEach(tab => {
                    const pageName = tab.dataset.page;
                    const tabText = tab.textContent;
                    const backgroundImage = tabImages[pageName] || tabImages['getting-started'];
                    const description = tabDescriptions[pageName] || '';
                    
                    panelDelay += 0.1;
                    
                    const cardElement = document.createElement('div');
                    cardElement.className = 'landing-card';
                    cardElement.setAttribute('aria-label', `${tabText} öffnen`);
                    cardElement.style.animation = `fadeInUp 0.6s ease ${panelDelay}s forwards`;
                    cardElement.style.opacity = '0';
                    cardElement.style.backgroundImage = `linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.7)), url('${backgroundImage}')`;
                    cardElement.style.backgroundSize = 'cover';
                    cardElement.style.backgroundPosition = 'center';
                    
                    cardElement.innerHTML = `
                        <h3 style="color: white; position: relative; z-index: 2;">${tabText}</h3>
                        <p style="color: white; opacity: 0.9; position: relative; z-index: 2;">${description}</p>
                    `;
                    
                    // Event Listener für Klick auf Panel
                    cardElement.addEventListener('click', () => {
                        hideLandingPage();
                        const pageName = tab.dataset.page;
                        if (pageName) {
                            switchToPage(pageName); // Direkt zur entsprechenden Seite wechseln
                        }
                    });
                    
                    panelsContainer.appendChild(cardElement);
                });
                
                // Hero-Section Animation
                setTimeout(() => {
                    document.querySelector('.landing-hero-section').style.opacity = '1';
                    document.querySelector('.landing-hero-section').style.transform = 'translateY(0)';
                }, 100);
                
                // Panels Container Animation
                setTimeout(() => {
                    document.getElementById('landingPanelsContainer').style.opacity = '1';
                    document.getElementById('landingPanelsContainer').style.transform = 'translateY(0)';
                }, 300);
                
                // Landing Page anzeigen
                const landingPage = document.getElementById('landingPage');
                landingPage.style.display = 'block';
                setTimeout(() => {
                    landingPage.style.opacity = '1';
                }, 50);
                
                // Event Listener für "Startseite" Tab
                document.getElementById('startseiteLink').addEventListener('click', showLandingPage);
            }
            
            /**
             * Zeigt die Landing Page an
             */
            function showLandingPage() {
                const landingPage = document.getElementById('landingPage');
                landingPage.style.display = 'block';
                setTimeout(() => {
                    landingPage.style.opacity = '1';
                }, 50);
            }
            
            /**
             * Blendet die Landing Page aus
             */
            function hideLandingPage() {
                const landingPage = document.getElementById('landingPage');
                landingPage.style.opacity = '0';
                setTimeout(() => {
                    landingPage.style.display = 'none';
                }, 500);
            }
        }

        // Enter-Taste für Passwort
        document.getElementById('passwordInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                checkPassword();
            }
        });

        // Auto-Focus auf Passwort-Feld
        document.getElementById('passwordInput').focus();

        // Auto-Refresh Funktion
        function startAutoRefresh() {
            autoRefreshInterval = setInterval(() => {
                updateLastUpdateTime();
                updateSMIReturn();
                if (portfolioCalculated) {
                    updatePortfolioReturn();
                    updateCharts();
                }
            }, 30000);

            // Marktdaten alle 15 Minuten aktualisieren
            marketRefreshInterval = setInterval(() => {
                refreshAllMarkets();
                loadNews();
                if (portfolioCalculated) {
                    updateCurrentPrices();
                }
            }, 900000); // 15 Minuten

            // Starte sofort mit Marktdaten
            refreshAllMarkets();
            loadNews();
            startCountdownTimer();
        }

        // Initialisierung
        function initializeApplication() {
            populateStockSelect();
            populateIndexSelect();
            populateAssetSelect();
            populateTaxCalculatorSymbols();
            createAllCharts();
            updatePortfolioDisplay();
            updateLastUpdateTime();
            updateSMIReturn();
            updatePortfolioReturn();
            refreshMarketData();
            loadBenchmarkData();
            
            // Set Getting Started as the active page
            setTimeout(switchToGettingStarted, 100);
        }

        function updateLastUpdateTime() {
            const now = new Date();
            statusBarData.lastUpdate = now.toLocaleTimeString('de-CH');
            document.getElementById('lastUpdate').textContent = statusBarData.lastUpdate;
        }

        function updateSMIReturn() {
            const smiReturn = (Math.random() * 3 - 1).toFixed(1);
            statusBarData.smiReturn = (smiReturn > 0 ? '+' : '') + smiReturn + '%';
            const element = document.getElementById('smiReturn');
            element.textContent = statusBarData.smiReturn;
            element.className = smiReturn >= 0 ? 'positive' : 'negative';
        }

        function updatePortfolioReturn() {
            if (userPortfolio.length === 0 || !portfolioCalculated) {
                statusBarData.portfolioReturn = '+0.0%';
                document.getElementById('portfolioReturn').textContent = statusBarData.portfolioReturn;
                return;
            }
            
            const years = parseInt(document.getElementById('investmentYears').value) || 1;
            const expectedReturn = calculatePortfolioReturn() * 100;
            statusBarData.portfolioReturn = (expectedReturn > 0 ? '+' : '') + expectedReturn.toFixed(1) + '% p.a.';
            const element = document.getElementById('portfolioReturn');
            element.textContent = statusBarData.portfolioReturn;
            element.className = expectedReturn >= 0 ? 'positive' : 'negative';
        }

        function calculatePortfolioReturn() {
            if (userPortfolio.length === 0) return 0;
            
            const totalWeight = userPortfolio.reduce((sum, asset) => sum + parseFloat(asset.weight), 0);
            if (totalWeight === 0) return 0;
            
            return userPortfolio.reduce((sum, asset) => 
                sum + (parseFloat(asset.weight) / 100) * asset.expectedReturn, 0);
        }

        function calculatePortfolioRisk() {
            if (userPortfolio.length === 0) return 0;
            
            // Vereinfachte Risikoberechnung (gewichtete Durchschnittsvolatilität)
            const totalWeight = userPortfolio.reduce((sum, asset) => sum + parseFloat(asset.weight), 0);
            if (totalWeight === 0) return 0;
            
            return userPortfolio.reduce((sum, asset) => 
                sum + (parseFloat(asset.weight) / 100) * asset.volatility, 0);
        }

        // Live Marktdaten für Dashboard
        async function refreshMarketData() {
            const symbols = [
                {symbol: '^SSMI', name: 'SMI'},
                {symbol: '^GSPC', name: 'S&P 500'},
                {symbol: 'GC=F', name: 'Gold'},
                {symbol: 'EURCHF=X', name: 'EUR/CHF'}
            ];
            
            for (const item of symbols) {
                try {
                    const response = await fetch('/get_live_data/' + item.symbol);
                    const data = await response.json();
                    
                    if (data.error) throw new Error(data.error);
                    
                    const marketItem = Array.from(document.querySelectorAll('.market-item'))
                        .find(el => el.querySelector('h4').textContent === item.name);
                    
                    if (marketItem) {
                        const valueElement = marketItem.querySelector('.metric-value');
                        const labelElement = marketItem.querySelector('.metric-label');
                        
                        valueElement.textContent = data.currency === 'CHF' ? 
                            data.price.toLocaleString('de-CH') : 
                            (item.symbol === 'GC=F' ? '$' + data.price.toLocaleString() : data.price.toFixed(2));
                        
                        labelElement.textContent = (data.change_percent > 0 ? '+' : '') + data.change_percent.toFixed(2) + '%';
                        labelElement.className = data.change_percent >= 0 ? 'metric-label positive' : 'metric-label negative';
                    }
                } catch (error) {
                    console.error('Error fetching data for', item.symbol, error);
                }
            }
        }

        // Alle Marktdaten aktualisieren
        async function refreshAllMarkets() {
            try {
                const response = await fetch('/refresh_all_markets');
                const data = await response.json();
                
                if (data.success) {
                    updateMarketsGrid(data.data);
                    document.getElementById('lastUpdate').textContent = data.last_update;
                    showNotification('Marktdaten erfolgreich aktualisiert!', 'success');
                }
            } catch (error) {
                console.error('Error refreshing markets:', error);
                // Fallback zu simulierten Daten
                updateMarketsGridWithSimulatedData();
            }
        }

        // Finanznachrichten aktualisieren
        async function refreshFinancialNews() {
            const newsContainer = document.getElementById('newsContainer');
            const refreshBtn = document.getElementById('newsRefreshBtn');
            
            // Loading state
            refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Lade Nachrichten...';
            refreshBtn.disabled = true;
            
            try {
                // Simuliere echte Finanznachrichten (in einer echten App würde hier eine News API aufgerufen)
                const newsData = await fetchFinancialNews();
                
                let html = '';
                newsData.forEach(article => {
                    const timeAgo = getTimeAgo(article.publishedAt);
                    html += `
                        <div class="news-item">
                            <div class="news-header">
                                <h4><a href="${article.url}" target="_blank" class="news-title">${article.title}</a></h4>
                                <div class="news-meta">
                                    <span class="news-source">${article.source}</span>
                                    <span class="news-time">${timeAgo}</span>
                                </div>
                            </div>
                            <p class="news-description">${article.description}</p>
                        </div>
                    `;
                });
                
                newsContainer.innerHTML = html;
                showNotification('Finanznachrichten erfolgreich aktualisiert!', 'success');
                
            } catch (error) {
                console.error('Error fetching news:', error);
                newsContainer.innerHTML = '<p class="error">Fehler beim Laden der Nachrichten. Bitte versuchen Sie es später erneut.</p>';
                showNotification('Fehler beim Laden der Nachrichten', 'error');
            } finally {
                refreshBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Nachrichten analysieren';
                refreshBtn.disabled = false;
            }
        }

        // Simuliere Finanznachrichten (in einer echten App würde hier eine News API verwendet)
        async function fetchFinancialNews() {
            // Simuliere API-Aufruf
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const newsSources = ['Reuters', 'Bloomberg', 'Financial Times', 'Wall Street Journal', 'CNBC', 'MarketWatch'];
            const newsTopics = [
                'Fed Zinssatz-Entscheidung',
                'Inflation steigt weiter',
                'Tech-Aktien unter Druck',
                'Energiemärkte volatil',
                'Kryptowährungen erholen sich',
                'Schweizer Franken schwächt sich ab',
                'Goldpreis steigt',
                'Ölpreise fallen',
                'Europa-Index im Plus',
                'Asien-Märkte gemischt'
            ];
            
            const descriptions = [
                'Die Zentralbank hat ihre Geldpolitik angepasst und erwartet weitere Zinssenkungen.',
                'Die Inflationsrate liegt über den Erwartungen und belastet die Verbraucher.',
                'Technologie-Aktien zeigen Schwäche aufgrund von Gewinnwarnungen.',
                'Die Energiemärkte reagieren auf geopolitische Spannungen.',
                'Bitcoin und andere Kryptowährungen zeigen Erholungssignale.',
                'Der Schweizer Franken verliert gegenüber dem Euro an Stärke.',
                'Gold profitiert von Unsicherheit an den Märkten.',
                'Ölpreise fallen aufgrund von Überangebot und schwacher Nachfrage.',
                'Europäische Indizes schließen im positiven Bereich.',
                'Asiatische Märkte zeigen gemischte Signale nach Handelsgesprächen.'
            ];
            
            const news = [];
            for (let i = 0; i < 8; i++) {
                const source = newsSources[Math.floor(Math.random() * newsSources.length)];
                const topic = newsTopics[Math.floor(Math.random() * newsTopics.length)];
                const description = descriptions[Math.floor(Math.random() * descriptions.length)];
                const hoursAgo = Math.floor(Math.random() * 6) + 1;
                
                news.push({
                    title: topic,
                    description: description,
                    url: `https://${source.toLowerCase().replace(' ', '')}.com/news/${i}`,
                    source: source,
                    publishedAt: new Date(Date.now() - hoursAgo * 60 * 60 * 1000)
                });
            }
            
            return news.sort((a, b) => b.publishedAt - a.publishedAt);
        }

        function getTimeAgo(date) {
            const now = new Date();
            const diffInMinutes = Math.floor((now - date) / (1000 * 60));
            
            if (diffInMinutes < 60) {
                return `vor ${diffInMinutes} Minuten`;
            } else if (diffInMinutes < 1440) {
                const hours = Math.floor(diffInMinutes / 60);
                return `vor ${hours} Stunde${hours > 1 ? 'n' : ''}`;
            } else {
                const days = Math.floor(diffInMinutes / 1440);
                return `vor ${days} Tag${days > 1 ? 'en' : ''}`;
            }
        }

        function updateMarketsGrid(marketData) {
            const container = document.getElementById('liveMarketsGrid');
            if (!container) return;
            
            let html = '';
            const markets = [
                {name: 'SMI', key: 'SMI'},
                {name: 'DAX', key: 'DAX'},
                {name: 'S&P 500', key: 'S&P 500'},
                {name: 'NASDAQ', key: 'NASDAQ'},
                {name: 'Gold', key: 'Gold'},
                {name: 'Öl', key: 'Öl'},
                {name: 'EUR/CHF', key: 'EUR/CHF'},
                {name: 'Bitcoin', key: 'Bitcoin'}
            ];
            
            markets.forEach(market => {
                const data = marketData[market.key];
                if (data) {
                    const changeClass = data.change_percent >= 0 ? 'positive' : 'negative';
                    const changeSign = data.change_percent >= 0 ? '+' : '';
                    
                    html += `
                        <div class="market-item">
                            <h4>${market.name}</h4>
                            <div class="metric-value">${formatPrice(data.price, data.currency)}</div>
                            <div class="metric-label ${changeClass}">${changeSign}${data.change_percent.toFixed(2)}%</div>
                        </div>
                    `;
                }
            });
            
            container.innerHTML = html;
        }

        function updateMarketsGridWithSimulatedData() {
            const container = document.getElementById('liveMarketsGrid');
            if (!container) return;
            
            const markets = [
                {name: 'SMI', price: 11250, change: 1.2},
                {name: 'DAX', price: 15800, change: 0.8},
                {name: 'S&P 500', price: 4550, change: -0.3},
                {name: 'NASDAQ', price: 14200, change: 0.5},
                {name: 'Gold', price: 1950, change: 0.5},
                {name: 'Öl', price: 78.5, change: -1.2},
                {name: 'EUR/CHF', price: 0.95, change: 0.1},
                {name: 'Bitcoin', price: 42000, change: 2.1}
            ];
            
            let html = '';
            markets.forEach(market => {
                const changeClass = market.change >= 0 ? 'positive' : 'negative';
                const changeSign = market.change >= 0 ? '+' : '';
                
                html += `
                    <div class="market-item">
                        <h4>${market.name}</h4>
                        <div class="metric-value">${formatPrice(market.price, market.name.includes('CHF') ? 'CHF' : 'USD')}</div>
                        <div class="metric-label ${changeClass}">${changeSign}${market.change.toFixed(1)}%</div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        function formatPrice(price, currency) {
            if (currency === 'CHF') {
                return price.toLocaleString('de-CH');
            } else if (price < 1) {
                return price.toFixed(3);
            } else if (price > 1000) {
                return price.toLocaleString('de-CH');
            } else {
                return price.toFixed(2);
            }
        }

        // Nachrichten laden
        async function loadNews() {
            try {
                const response = await fetch('/get_news');
                const news = await response.json();
                
                const container = document.getElementById('newsContainer');
                if (container) {
                    let html = '';
                    news.forEach(item => {
                        html += `
                            <div class="news-item">
                                <h4><a href="${item.link}" class="news-link" target="_blank">${item.title}</a></h4>
                                <p>${item.content}</p>
                                <small>${item.time} • ${item.source}</small>
                            </div>
                        `;
                    });
                    container.innerHTML = html;
                }
            } catch (error) {
                console.error('Error loading news:', error);
            }
        }

        // Countdown Timer für Auto-Refresh
        function startCountdownTimer() {
            setInterval(() => {
                const now = new Date();
                const nextRefresh = new Date(now);
                nextRefresh.setMinutes(Math.ceil(now.getMinutes() / 15) * 15);
                nextRefresh.setSeconds(0);
                
                const diff = nextRefresh - now;
                const minutes = Math.floor(diff / 60000);
                const seconds = Math.floor((diff % 60000) / 1000);
                
                document.getElementById('nextRefresh').textContent = 
                    `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }, 1000);
        }

        // Aktuelle Preise für Portfolio-Assets aktualisieren
        async function updateCurrentPrices() {
            if (userPortfolio.length === 0) return;
            
            try {
                const symbols = userPortfolio.map(asset => asset.symbol);
                const response = await fetch('/get_current_prices', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({symbols: symbols})
                });
                
                const data = await response.json();
                if (data.success) {
                    // Aktualisiere die erwarteten Renditen basierend auf aktuellen Preisen
                    userPortfolio.forEach(asset => {
                        if (data.prices[asset.symbol]) {
                            // Simuliere eine Rendite-Anpassung basierend auf Preisänderungen
                            const priceChange = (data.prices[asset.symbol] - 100) / 100;
                            asset.expectedReturn = Math.max(0.01, asset.expectedReturn + priceChange * 0.1);
                        }
                    });
                    
                    if (portfolioCalculated) {
                        updatePortfolioDisplay();
                        showNotification('Aktienkurse aktualisiert!', 'success');
                    }
                }
            } catch (error) {
                console.error('Error updating current prices:', error);
            }
        }

        // Portfolio Entwicklung aktualisieren
        function updatePortfolioDevelopment() {
            const total = userPortfolio.reduce((sum, asset) => sum + asset.investment, 0);
            const expectedReturn = calculatePortfolioReturn() * 100;
            const volatility = calculatePortfolioRisk() * 100;
            
            if (total > 0 && portfolioCalculated) {
                // Performance Metriken
                document.getElementById('totalReturn').textContent = `${expectedReturn >= 0 ? '+' : ''}${expectedReturn.toFixed(1)}%`;
                document.getElementById('annualizedReturn').textContent = `${expectedReturn.toFixed(1)}%`;
                document.getElementById('maxDrawdown').textContent = `${(volatility * 1.5).toFixed(1)}%`;
                document.getElementById('volatilityHistory').textContent = `${volatility.toFixed(1)}%`;
                
                // Performance Analyse mit SMI Vergleich
                const smiComparison = expectedReturn > 6.5 ? "übertrifft" : "untertrifft";
                const smiDiff = (expectedReturn - 6.5).toFixed(1);
                
                const analysis = `
                    <p><strong>Portfolio Performance:</strong> Ihr Portfolio zeigt eine erwartete Rendite von ${expectedReturn.toFixed(1)}% p.a.</p>
                    <p><strong>Vergleich mit SMI:</strong> ${smiComparison} den Schweizer Marktindex (SMI: 6.5% p.a.) um ${Math.abs(smiDiff)}%</p>
                    <p><strong>Risikoprofil:</strong> Die Volatilität von ${volatility.toFixed(1)}% entspricht einem ${volatility > 20 ? 'aggressiven' : volatility > 12 ? 'moderaten' : 'konservativen'} Profil.</p>
                    <p><strong>Diversifikation:</strong> ${userPortfolio.length} Assets bieten ${Math.min(userPortfolio.length * 2, 10)}/10 Punkte Diversifikation.</p>
                    <p><strong>Performance vs. Benchmark:</strong> ${expectedReturn > 8 ? 'Übertrifft' : 'Untertrifft'} die Markterwartungen von 6-8% p.a.</p>
                `;
                document.getElementById('performanceAnalysis').innerHTML = analysis;
                
                createPerformanceChart();
                loadBenchmarkData();
                
                // Erfolgsmeldung
                showNotification('Portfolio Entwicklung erfolgreich aktualisiert!', 'success');
            } else {
                document.getElementById('performanceAnalysis').innerHTML = '<p>Bitte klicken Sie im Dashboard auf "Portfolio Berechnen".</p>';
            }
        }

        // Zukunfts-Simulation aktualisieren
        function updateSimulationPage() {
            const total = userPortfolio.reduce((sum, asset) => sum + asset.investment, 0);
            const expectedReturn = calculatePortfolioReturn() * 100;
            
            if (total > 0 && portfolioCalculated) {
                const years = parseInt(document.getElementById('investmentYears').value) || 5;
                const expectedValue = total * Math.pow(1 + expectedReturn/100, years);
                const optimisticValue = total * Math.pow(1 + (expectedReturn + 5)/100, years);
                const conservativeValue = total * Math.pow(1 + (expectedReturn - 3)/100, years);
                
                document.getElementById('baseValue').textContent = `CHF ${Math.round(expectedValue).toLocaleString('de-CH')}`;
                document.getElementById('optimisticValue').textContent = `CHF ${Math.round(optimisticValue).toLocaleString('de-CH')}`;
                document.getElementById('conservativeValue').textContent = `CHF ${Math.round(conservativeValue).toLocaleString('de-CH')}`;
                
                // Szenario-Analyse aktualisieren
                updateScenarioAnalysis();
                
                // Strategie Pfade Beschreibung
                const strategyDescription = `
                    <p><strong>Basisszenario (${expectedReturn.toFixed(1)}% p.a.):</strong> Entspricht der aktuellen Portfolio-Struktur</p>
                    <p><strong>Optimistisches Szenario (${(expectedReturn + 5).toFixed(1)}% p.a.):</strong> Bei guter Marktentwicklung und niedrigen Zinsen</p>
                    <p><strong>Konservatives Szenario (${(expectedReturn - 3).toFixed(1)}% p.a.):</strong> Bei wirtschaftlicher Abschwächung</p>
                    <p><strong>Empfehlung:</strong> Das Portfolio zeigt ${expectedReturn > 10 ? 'starkes' : expectedReturn > 7 ? 'gutes' : 'moderates'} Wachstumspotenzial.</p>
                `;
                document.getElementById('strategyPaths').innerHTML = strategyDescription;
                
                createSimulationChart(total, expectedReturn, years);
                
                // Erfolgsmeldung
                showNotification('Simulation erfolgreich aktualisiert!', 'success');
            } else {
                document.getElementById('strategyPaths').innerHTML = '<p>Bitte klicken Sie im Dashboard auf "Portfolio Berechnen".</p>';
            }
        }

        // Szenario-Analyse aktualisieren
        function updateScenarioAnalysis() {
            const total = userPortfolio.reduce((sum, asset) => sum + asset.investment, 0);
            const baseReturn = calculatePortfolioReturn();
            const years = parseInt(document.getElementById('investmentYears').value) || 5;
            
            if (total > 0 && portfolioCalculated) {
                // Berechne Szenario-Werte
                for (const [key, scenario] of Object.entries(scenarios)) {
                    const scenarioReturn = baseReturn * scenario.growth_multiplier;
                    const scenarioValue = total * Math.pow(1 + scenarioReturn, years);
                    const element = document.getElementById(`scenario${key.charAt(0).toUpperCase() + key.slice(1)}`);
                    if (element) {
                        element.textContent = `CHF ${Math.round(scenarioValue).toLocaleString('de-CH')}`;
                        element.className = `metric-value ${scenarioValue >= total ? 'positive' : 'negative'}`;
                    }
                }
            }
        }

        // Bericht & Analyse aktualisieren
        function updateReportPage() {
            const total = userPortfolio.reduce((sum, asset) => sum + asset.investment, 0);
            const expectedReturn = calculatePortfolioReturn() * 100;
            const volatility = calculatePortfolioRisk() * 100;
            
            if (total > 0 && portfolioCalculated) {
                // SWOT Analyse
                const stockCount = userPortfolio.filter(a => a.type === 'stock').length;
                const indexCount = userPortfolio.filter(a => a.type === 'index').length;
                const otherCount = userPortfolio.filter(a => a.type === 'other').length;
                
                const strengths = [
                    `${userPortfolio.length} verschiedene Assets für gute Diversifikation`,
                    `${stockCount} Schweizer Blue-Chip Aktien mit stabilem Wachstum`,
                    expectedReturn > 8 ? "Überdurchschnittliche Renditeerwartungen" : "Stabile Renditeerwartungen",
                    volatility < 15 ? "Geringe Volatilität für risikoscheue Anleger" : "Ausgewogenes Risikoprofil",
                    indexCount > 0 ? "Globale Diversifikation durch internationale Indizes" : "Fokus auf Schweizer Markt"
                ];
                
                const weaknesses = [
                    indexCount === 0 ? "Keine internationalen Indizes für globale Streuung" : "Begrenzte internationale Diversifikation",
                    otherCount === 0 ? "Keine Rohstoffe als Inflationsschutz" : "Geringe Allokation in alternative Assets",
                    stockCount > 5 ? "Mögliche Übergewichtung von Einzelaktien" : "Konzentration auf wenige Sektoren",
                    expectedReturn < 7 ? "Unterdurchschnittliche Renditeerwartungen" : ""
                ].filter(w => w !== "");
                
                const opportunities = [
                    "Erweiterung um Schwellenländer-ETFs für höheres Wachstum",
                    "Hinzunahme von Corporate Bonds für stabile Erträge",
                    "Technologie-Sektor für langfristiges Wachstumspotenzial",
                    "Nachhaltige Investments für ESG-konforme Anlagen",
                    "Rohstoffe als Inflationsschutz bei steigenden Preisen"
                ];
                
                const threats = [
                    "Stärke des Schweizer Frankens beeinträchtigt Exporte",
                    "Geopolitische Spannungen betreffen globale Märkte",
                    "Zinserhöhungen der Zentralbanken dämpfen Aktienmärkte",
                    "Inflation bleibt längerfristig höher als erwartet",
                    "Regulatorische Änderungen im Finanzsektor"
                ];
                
                document.getElementById('strengthsList').innerHTML = strengths.map(s => `<p>✓ ${s}</p>`).join('');
                document.getElementById('weaknessesList').innerHTML = weaknesses.map(w => `<p>⚠ ${w}</p>`).join('');
                document.getElementById('opportunitiesList').innerHTML = opportunities.map(o => `<p>→ ${o}</p>`).join('');
                document.getElementById('threatsList').innerHTML = threats.map(t => `<p>⚡ ${t}</p>`).join('');
                
                // Marktanalyse
                const marketAnalysis = generateMarketAnalysis();
                document.getElementById('marketAnalysis').innerHTML = marketAnalysis;
                
                // Korrelationsmatrix aktualisieren
                updateCorrelationMatrix();
                
                // Empfehlungen
                const recommendations = `
                    <p><strong>1. Diversifikation verbessern:</strong> Fügen Sie ${indexCount === 0 ? '2-3 internationale Indizes' : 'weitere Asset-Klassen'} hinzu.</p>
                    <p><strong>2. Risiko managen:</strong> ${volatility > 20 ? 'Reduzieren Sie volatile Positionen auf max. 10%.' : 'Aktuelles Risikoprofil ist angemessen.'}</p>
                    <p><strong>3. Rebalancing:</strong> Überprüfen Sie die Gewichtung quartalsweise.</p>
                    <p><strong>4. Langfristige Strategie:</strong> ${expectedReturn > 10 ? 'Aggressive Position beibehalten' : 'Konservative Ausrichtung fortsetzen'}.</p>
                    <p><strong>5. Sektor-Allokation:</strong> ${getSectorAllocationAdvice()}</p>
                `;
                document.getElementById('recommendations').innerHTML = recommendations;
                
                // Zusammenfassung mit SMI Vergleich
                const smiComparison = expectedReturn > 6.5 ? "Übertrifft SMI" : "Untertrifft SMI";
                const summary = `
                    <p><strong>Portfolio Wert:</strong> CHF ${total.toLocaleString('de-CH')}</p>
                    <p><strong>Erwartete Rendite:</strong> <span class="${expectedReturn >= 0 ? 'positive' : 'negative'}">${expectedReturn.toFixed(1)}% p.a.</span></p>
                    <p><strong>Vergleich mit SMI:</strong> ${smiComparison} (SMI: 6.5% p.a.)</p>
                    <p><strong>Risiko (Volatilität):</strong> ${volatility.toFixed(1)}% p.a.</p>
                    <p><strong>Sharpe Ratio:</strong> ${volatility > 0 ? ((expectedReturn - 2) / volatility).toFixed(2) : '0.00'}</p>
                    <p><strong>Asset Allocation:</strong> ${stockCount} Aktien, ${indexCount} Indizes, ${otherCount} andere Assets</p>
                    <p><strong>Gesamtbewertung:</strong> <span class="${expectedReturn > 8 && volatility < 15 ? 'positive' : ''}">${expectedReturn > 10 ? 'Exzellent' : expectedReturn > 7 ? 'Gut' : 'Verbesserungswürdig'}</span></p>
                `;
                document.getElementById('portfolioSummary').innerHTML = summary;
                
                // Erfolgsmeldung
                showNotification('Bericht erfolgreich aktualisiert!', 'success');
            } else {
                document.getElementById('portfolioSummary').innerHTML = '<p>Bitte fügen Sie Assets zu Ihrem Portfolio hinzu und klicken Sie auf "Portfolio Berechnen".</p>';
                document.getElementById('marketAnalysis').innerHTML = '<p>Bitte berechnen Sie zuerst Ihr Portfolio für die Marktanalyse.</p>';
            }
        }

        // Korrelationsmatrix aktualisieren
        async function updateCorrelationMatrix() {
            const container = document.getElementById('correlationTableContainer');
            
            if (userPortfolio.length < 2) {
                container.innerHTML = '<p>Für eine Korrelationsmatrix werden mindestens 2 Assets benötigt.</p>';
                return;
            }
            
            try {
                const symbols = userPortfolio.map(asset => asset.symbol);
                const response = await fetch('/get_correlation_data?symbols=' + symbols.join('&symbols='));
                const data = await response.json();
                
                if (data.error) {
                    container.innerHTML = '<p>Fehler beim Laden der Korrelationsdaten.</p>';
                    return;
                }
                
                // Erstelle Korrelationstabelle
                let html = '<table class="correlation-table">';
                
                // Header
                html += '<tr><th></th>';
                symbols.forEach(symbol => {
                    html += `<th>${symbol}</th>`;
                });
                html += '</tr>';
                
                // Zeilen
                symbols.forEach((symbol1, i) => {
                    html += `<tr><th>${symbol1}</th>`;
                    symbols.forEach((symbol2, j) => {
                        const key = `${symbol1}_${symbol2}`;
                        const correlation = data.correlations[key] || 0;
                        let cellClass = '';
                        
                        if (i === j) {
                            cellClass = 'corr-high'; // Diagonale
                        } else if (correlation > 0.7) {
                            cellClass = 'corr-high';
                        } else if (correlation > 0.3) {
                            cellClass = 'corr-medium';
                        } else if (correlation < -0.1) {
                            cellClass = 'corr-negative';
                        } else {
                            cellClass = 'corr-low';
                        }
                        
                        html += `<td class="${cellClass}">${correlation.toFixed(2)}</td>`;
                    });
                    html += '</tr>';
                });
                
                html += '</table>';
                container.innerHTML = html;
                
            } catch (error) {
                console.error('Error updating correlation matrix:', error);
                container.innerHTML = '<p>Fehler beim Erstellen der Korrelationsmatrix.</p>';
            }
        }

        // Notification anzeigen
        function showNotification(message, type) {
            // Erstelle Notification Element
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.style.background = type === 'success' ? '#28A745' : '#DC3545';
            
            notification.innerHTML = `
                <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                ${message}
            `;
            
            document.body.appendChild(notification);
            
            // Entferne Notification nach 3 Sekunden
            setTimeout(() => {
                notification.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // Portfolio Management Funktionen
        function populateStockSelect() {
            const select = document.getElementById('stockSelect');
            select.innerHTML = '<option value="">Schweizer Aktie auswählen...</option>';
            Object.entries(swissStocks).forEach(([symbol, name]) => {
                const option = document.createElement('option');
                option.value = symbol;
                option.textContent = `${symbol} - ${name}`;
                select.appendChild(option);
            });
        }

        function populateIndexSelect() {
            const select = document.getElementById('indexSelect');
            select.innerHTML = '<option value="">Internationale Indizes...</option>';
            Object.entries(indices).forEach(([symbol, name]) => {
                const option = document.createElement('option');
                option.value = symbol;
                option.textContent = `${symbol} - ${name}`;
                select.appendChild(option);
            });
        }

        function populateAssetSelect() {
            const select = document.getElementById('assetSelect');
            select.innerHTML = '<option value="">Weitere Assets...</option>';
            Object.entries(otherAssets).forEach(([symbol, name]) => {
                const option = document.createElement('option');
                option.value = symbol;
                option.textContent = `${symbol} - ${name}`;
                select.appendChild(option);
            });
        }
        
        // Tax Calculator Symbole befüllen mit ALLEN verfügbaren Assets
        function populateTaxCalculatorSymbols() {
            const taxSelect = document.getElementById('taxSymbol');
            if (taxSelect) {
                taxSelect.innerHTML = '<option value="">Symbol auswählen...</option>';
                
                // Schweizer Aktien hinzufügen
                const swissGroup = document.createElement('optgroup');
                swissGroup.label = '🇨🇭 Schweizer Aktien';
                Object.entries(swissStocks).forEach(([symbol, name]) => {
                    const option = document.createElement('option');
                    option.value = symbol;
                    option.textContent = `${name} (${symbol})`;
                    swissGroup.appendChild(option);
                });
                taxSelect.appendChild(swissGroup);
                
                // Indizes hinzufügen
                const indicesGroup = document.createElement('optgroup');
                indicesGroup.label = '📊 Indizes';
                Object.entries(indices).forEach(([symbol, name]) => {
                    const option = document.createElement('option');
                    option.value = symbol;
                    option.textContent = `${name} (${symbol})`;
                    indicesGroup.appendChild(option);
                });
                taxSelect.appendChild(indicesGroup);
                
                // Andere Assets hinzufügen
                const assetsGroup = document.createElement('optgroup');
                assetsGroup.label = '💰 Weitere Assets';
                Object.entries(otherAssets).forEach(([symbol, name]) => {
                    const option = document.createElement('option');
                    option.value = symbol;
                    option.textContent = `${name} (${symbol})`;
                    assetsGroup.appendChild(option);
                });
                taxSelect.appendChild(assetsGroup);
            }
        }

        function addStock() {
            console.log('=== addStock() called ===');
            
            const select = document.getElementById('stockSelect');
            console.log('Select element:', select);
            
            if (!select) {
                console.error('stockSelect element not found!');
                showNotification('Fehler: Stock Select Element nicht gefunden!', 'error');
                return;
            }
            
            const symbol = select.value;
            console.log('Selected symbol:', symbol);
            console.log('Current userPortfolio:', userPortfolio);
            console.log('swissStocks available:', Object.keys(swissStocks));
            
            if (symbol && !userPortfolio.find(asset => asset.symbol === symbol)) {
                const newAsset = {
                    symbol: symbol,
                    name: swissStocks[symbol] || symbol,
                    investment: 10000,
                    weight: 0,
                    expectedReturn: (6 + Math.random() * 6) / 100,
                    volatility: (15 + Math.random() * 15) / 100,
                    type: 'stock'
                };
                
                userPortfolio.push(newAsset);
                console.log('Added asset:', newAsset);
                console.log('Portfolio now has:', userPortfolio.length, 'assets');
                
                // Save to localStorage
                savePortfolio();
                
                // Test if updatePortfolioDisplay exists
                if (typeof updatePortfolioDisplay === 'function') {
                    updatePortfolioDisplay();
                    console.log('updatePortfolioDisplay() called successfully');
                } else {
                    console.error('updatePortfolioDisplay function not found!');
                }
                
                select.value = '';
                
                // Show success message
                showNotification(`Asset ${symbol} erfolgreich hinzugefügt!`, 'success');
            } else if (symbol) {
                console.log('Asset already exists in portfolio');
                showNotification(`Asset ${symbol} ist bereits im Portfolio!`, 'warning');
            } else {
                console.log('No symbol selected');
                showNotification('Bitte wählen Sie ein Asset aus!', 'error');
            }
        }

        function addIndex() {
            const select = document.getElementById('indexSelect');
            const symbol = select.value;
            
            console.log('Adding index:', symbol);
            
            if (symbol && !userPortfolio.find(asset => asset.symbol === symbol)) {
                const newAsset = {
                    symbol: symbol,
                    name: indices[symbol] || symbol,
                    investment: 10000,
                    weight: 0,
                    expectedReturn: (7 + Math.random() * 8) / 100,
                    volatility: (18 + Math.random() * 12) / 100,
                    type: 'index'
                };
                
                userPortfolio.push(newAsset);
                console.log('Added index:', newAsset);
                console.log('Portfolio now has:', userPortfolio.length, 'assets');
                
                // Save to localStorage
                savePortfolio();
                
                updatePortfolioDisplay();
                select.value = '';
                
                showNotification(`Index ${symbol} erfolgreich hinzugefügt!`, 'success');
            } else if (symbol) {
                showNotification(`Index ${symbol} ist bereits im Portfolio!`, 'warning');
            } else {
                showNotification('Bitte wählen Sie einen Index aus!', 'error');
            }
        }

        function addAsset() {
            const select = document.getElementById('assetSelect');
            const symbol = select.value;
            
            console.log('addAsset called with symbol:', symbol);
            
            if (symbol && !userPortfolio.find(asset => asset.symbol === symbol)) {
                const newAsset = {
                    symbol: symbol,
                    name: otherAssets[symbol] || symbol,
                    investment: 10000,
                    weight: 0,
                    expectedReturn: (4 + Math.random() * 12) / 100,
                    volatility: (10 + Math.random() * 25) / 100,
                    type: 'other'
                };
                
                userPortfolio.push(newAsset);
                console.log('Added asset:', newAsset);
                console.log('Portfolio now has:', userPortfolio.length, 'assets');
                
                // Save to localStorage
                savePortfolio();
                
                updatePortfolioDisplay();
                select.value = '';
                
                showNotification(`Asset ${symbol} erfolgreich hinzugefügt!`, 'success');
            } else if (symbol) {
                showNotification(`Asset ${symbol} ist bereits im Portfolio!`, 'warning');
            } else {
                showNotification('Bitte wählen Sie ein Asset aus!', 'error');
            }
        }

        function calculatePortfolio() {
            if (userPortfolio.length === 0) {
                alert("Bitte fügen Sie zuerst Assets zu Ihrem Portfolio hinzu.");
                return;
            }
            
            portfolioCalculated = true;
            updatePortfolioDisplay();
            
            // Status-Bar Portfolio-Wert aktualisieren
            const total = userPortfolio.reduce((sum, asset) => sum + asset.investment, 0);
            statusBarData.portfolioValue = `CHF ${total.toLocaleString('de-CH')}`;
            document.getElementById('portfolioValue').textContent = statusBarData.portfolioValue;
            
            // Zeige Erfolgsmeldung
            const calculateBtn = document.querySelector('.btn-calculate');
            const originalText = calculateBtn.innerHTML;
            calculateBtn.innerHTML = '<i class="fas fa-check"></i> Portfolio Berechnet!';
            calculateBtn.style.background = '#28A745';
            
            setTimeout(() => {
                calculateBtn.innerHTML = originalText;
                calculateBtn.style.background = '#0A1429';
            }, 2000);
            
            // Aktualisiere alle Seiten
            updateAllPages();
        }

        function updatePortfolioDisplay() {
            console.log('=== updatePortfolioDisplay() called ===');
            console.log('Current portfolio:', userPortfolio);
            console.log('Portfolio length:', userPortfolio.length);
            
            calculateWeights();
            validateTotalInvestment();
            updateStockCards();
            updateCharts();
            updatePerformanceMetrics();
            updatePortfolioValue();
            updatePortfolioReturn();
            
            // Save to localStorage
            savePortfolio();
            
            console.log('updatePortfolioDisplay() completed');
        }

        function calculateWeights() {
            console.log('=== calculateWeights() called ===');
            const currentTotal = userPortfolio.reduce((sum, asset) => sum + asset.investment, 0);
            console.log('Current total investment:', currentTotal);
            
            userPortfolio.forEach(asset => {
                asset.weight = currentTotal > 0 ? (asset.investment / currentTotal * 100).toFixed(1) : 0;
                console.log(`Asset ${asset.symbol}: weight = ${asset.weight}%`);
            });
            
            console.log('Weights calculated:', userPortfolio.map(a => ({symbol: a.symbol, weight: a.weight})));
        }

        function validateTotalInvestment() {
            const currentTotal = userPortfolio.reduce((sum, asset) => sum + asset.investment, 0);
            const targetTotal = parseFloat(document.getElementById('totalInvestment').value) || 0;
            const validationElement = document.getElementById('totalValidation');
            
            if (Math.abs(currentTotal - targetTotal) < 1) {
                validationElement.textContent = `Investitionen stimmen überein: CHF ${currentTotal.toLocaleString('de-CH')} von CHF ${targetTotal.toLocaleString('de-CH')}`;
                validationElement.className = 'total-validation validation-ok';
            } else {
                validationElement.textContent = `Achtung: CHF ${currentTotal.toLocaleString('de-CH')} von CHF ${targetTotal.toLocaleString('de-CH')} investiert (Differenz: CHF ${(targetTotal - currentTotal).toLocaleString('de-CH')})`;
                validationElement.className = 'total-validation validation-error';
            }
        }

        function updateStockCards() {
            console.log('=== updateStockCards() called ===');
            console.log('userPortfolio:', userPortfolio);
            console.log('Portfolio length:', userPortfolio.length);
            
            const container = document.getElementById('selectedStocks');
            console.log('Container found:', container);
            
            if (!container) {
                console.error('selectedStocks container not found!');
                return;
            }
            
            container.innerHTML = '';
            
            if (userPortfolio.length === 0) {
                console.log('No assets in portfolio, showing empty message');
                container.innerHTML = '<p style="color: #888; text-align: center; padding: 20px;">Keine Assets im Portfolio. Fügen Sie Assets hinzu, um sie hier zu sehen.</p>';
                return;
            }
            
            userPortfolio.forEach((asset, index) => {
                console.log('Creating card for asset:', asset);
                const card = document.createElement('div');
                card.className = 'stock-card';
                let assetClass = 'other-asset';
                let assetTypeLabel = 'Asset';
                
                if (asset.type === 'stock') {
                    assetClass = 'stock-asset';
                    assetTypeLabel = 'Aktie';
                } else if (asset.type === 'index') {
                    assetClass = 'index-asset';
                    assetTypeLabel = 'Index';
                }
                
                card.innerHTML = `
                    <div class="stock-header">
                        <div>
                            <h4><span class="asset-type-indicator ${assetClass}"></span>${asset.symbol}</h4>
                            <div>${asset.name} (${assetTypeLabel})</div>
                        </div>
                        <span onclick="removeAsset('${asset.symbol}')" style="color: var(--accent-negative); cursor: pointer; font-weight: bold;">×</span>
                    </div>
                    <div class="investment-controls">
                        <div>
                            <label style="font-size: 12px;">Investition (CHF)</label>
                            <input type="number" value="${asset.investment}" onchange="updateAssetInvestment(${index}, this.value)">
                        </div>
                        <div>
                            <label style="font-size: 12px;">Gewichtung</label>
                            <input type="text" value="${asset.weight}%" readonly style="background: #f5f5f5;">
                        </div>
                    </div>
                `;
                container.appendChild(card);
            });
            
            console.log('Stock cards updated successfully');
        }

        function removeAsset(symbol) {
            userPortfolio = userPortfolio.filter(asset => asset.symbol !== symbol);
            updatePortfolioDisplay();
        }

        function updateAssetInvestment(index, value) {
            userPortfolio[index].investment = parseFloat(value) || 0;
            updatePortfolioDisplay();
        }

        function updatePortfolioValue() {
            const total = userPortfolio.reduce((sum, asset) => sum + asset.investment, 0);
            statusBarData.portfolioValue = `CHF ${total.toLocaleString('de-CH')}`;
            document.getElementById('portfolioValue').textContent = statusBarData.portfolioValue;
        }

        function updatePerformanceMetrics() {
            if (userPortfolio.length === 0) {
                // Reset alle Metriken
                document.getElementById('portfolioPerformance').innerHTML = `
                    <div class="metric-value">0.0%</div>
                    <div class="metric-label">Erwartete Jahresrendite</div>
                `;
                document.getElementById('riskAnalysis').innerHTML = `
                    <div class="metric-value">0.0%</div>
                    <div class="metric-label">Volatilität p.a.</div>
                `;
                document.getElementById('diversification').innerHTML = `
                    <div class="metric-value">0/10</div>
                    <div class="metric-label">Diversifikations-Score</div>
                `;
                document.getElementById('sharpeRatio').innerHTML = `
                    <div class="metric-value">0.00</div>
                    <div class="metric-label">Risiko-adjustierte Rendite</div>
                `;
                return;
            }
            
            const expectedReturn = calculatePortfolioReturn() * 100;
            const volatility = calculatePortfolioRisk() * 100;
            const sharpeRatio = volatility > 0 ? (expectedReturn - 2) / volatility : 0;
            
            document.getElementById('portfolioPerformance').innerHTML = `
                <div class="metric-value ${expectedReturn >= 0 ? 'positive' : 'negative'}">${expectedReturn >= 0 ? '+' : ''}${expectedReturn.toFixed(1)}%</div>
                <div class="metric-label">Erwartete Jahresrendite</div>
            `;
            
            document.getElementById('riskAnalysis').innerHTML = `
                <div class="metric-value">${volatility.toFixed(1)}%</div>
                <div class="metric-label">Volatilität p.a.</div>
            `;
            
            const stockCount = userPortfolio.filter(a => a.type === 'stock').length;
            const indexCount = userPortfolio.filter(a => a.type === 'index').length;
            const otherCount = userPortfolio.filter(a => a.type === 'other').length;
            const diversificationScore = Math.min(userPortfolio.length * 2, 10);
            
            document.getElementById('diversification').innerHTML = `
                <div class="metric-value ${diversificationScore >= 6 ? 'positive' : ''}">${diversificationScore}/10</div>
                <div class="metric-label">${stockCount} Aktien, ${indexCount} Indizes, ${otherCount} andere Assets</div>
            `;
            
            document.getElementById('sharpeRatio').innerHTML = `
                <div class="metric-value ${sharpeRatio > 0.5 ? 'positive' : sharpeRatio > 0 ? '' : 'negative'}">${sharpeRatio.toFixed(2)}</div>
                <div class="metric-label">Risiko-adjustierte Rendite</div>
            `;
        }

        function updateAllPages() {
            updatePortfolioDevelopment();
            updateSimulationPage();
            updateReportPage();
            updateScenarioAnalysis();
            updateStrategyAnalysis();
        }

        // Chart Funktionen
        const stockColors = ['#8A2BE2', '#9D42E8', '#B05EED', '#C47AF2', '#D8A6F7', '#E9D1FB'];
        const indexColors = ['#3D3D3D', '#4F4F4F', '#666666', '#808080', '#9F9F9F'];
        const otherAssetColors = ['#28A745', '#34D399', '#10B981', '#059669', '#047857', '#065F46'];

        function createAllCharts() {
            createPortfolioChart();
        }

        function updateCharts() {
            console.log('=== updateCharts() called ===');
            console.log('userPortfolio length:', userPortfolio.length);
            console.log('portfolioCalculated:', portfolioCalculated);
            
            createPortfolioChart();
            if (userPortfolio.length > 0) {
                console.log('Creating performance charts...');
                createPerformanceChart();
                createSimulationChart(
                    userPortfolio.reduce((sum, asset) => sum + asset.investment, 0),
                    calculatePortfolioReturn() * 100,
                    parseInt(document.getElementById('investmentYears').value) || 5
                );
                createAssetPerformanceChart(currentTimeframe);
            } else {
                console.log('No assets in portfolio, skipping performance charts');
            }
        }

        // --- Theme helpers for charts ---
        function getCssVar(name) {
            const root = document.body || document.documentElement;
            return getComputedStyle(root).getPropertyValue(name).trim();
        }

        function getChartTheme() {
            return {
                text: getCssVar('--text') || '#e9eef2',
                muted: getCssVar('--muted') || '#9aa3ad',
                accent: getCssVar('--accent') || '#8b5cf6',
                accentDark: getCssVar('--accent-dark') || '#6f3ee6',
                grid: 'rgba(255,255,255,0.06)',
                gridLight: 'rgba(255,255,255,0.03)'
            };
        }

        // Erweiterte Chart.js Konfiguration für professionelle Finanzcharts
        (function applyChartDefaults(){
            if (!window.__sapChartDefaultsApplied) {
                const T = getChartTheme();
                if (window.Chart && Chart.defaults) {
                    Chart.defaults.color = T.muted;
                    Chart.defaults.font.family = "'Inter', 'Segoe UI', system-ui, sans-serif";
                    Chart.defaults.font.size = 12;
                    Chart.defaults.font.weight = '500';
                    
                    // Erweiterte Chart-Optionen
                    Chart.defaults.elements.line.borderWidth = 2;
                    Chart.defaults.elements.line.tension = 0.1;
                    Chart.defaults.elements.point.radius = 3;
                    Chart.defaults.elements.point.hoverRadius = 6;
                    
                    // Animations verbessern
                    Chart.defaults.animation.duration = 1000;
                    Chart.defaults.animation.easing = 'easeInOutQuart';
                    
                    // Responsive Design
                    Chart.defaults.responsive = true;
                    Chart.defaults.maintainAspectRatio = false;
                    Chart.defaults.font.family = 'Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica Neue, Arial';
                    Chart.defaults.maintainAspectRatio = true;
                    // Element defaults
                    if (Chart.defaults.elements && Chart.defaults.elements.line) {
                        Chart.defaults.elements.line.tension = 0.3;
                    }
                    if (Chart.defaults.elements && Chart.defaults.elements.point) {
                        Chart.defaults.elements.point.radius = 3;
                        Chart.defaults.elements.point.hoverRadius = 4;
                    }
                }
                window.__sapChartDefaultsApplied = true;
            }
        })();

        function createPortfolioChart() {
            console.log('=== createPortfolioChart() called ===');
            console.log('userPortfolio length:', userPortfolio.length);
            console.log('userPortfolio data:', JSON.stringify(userPortfolio, null, 2));
            
            const ctx = document.getElementById('portfolioChart');
            if (!ctx) {
                console.error('❌ portfolioChart canvas not found!');
                return;
            }
            console.log('✅ Canvas element found:', ctx);
            
            const chartContext = ctx.getContext('2d');
            const T = getChartTheme();
            
            if (window.portfolioChartInstance) {
                console.log('Destroying existing chart instance');
                window.portfolioChartInstance.destroy();
            }
            
            if (userPortfolio.length === 0) {
                console.log('⚠️ No assets in portfolio, creating empty chart');
                window.portfolioChartInstance = new Chart(chartContext, {
                    type: 'pie',
                    data: {
                        labels: ['Bitte Assets hinzufügen'],
                        datasets: [{
                            data: [100],
                            backgroundColor: ['#e0e0e0']
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    }
                });
                // Leere Legende anzeigen
                const legendEl = document.getElementById('portfolioLegend');
                if (legendEl) {
                    legendEl.innerHTML = '<p style="text-align: center; color: var(--text-muted);">Keine Assets hinzugefügt</p>';
                }
                return;
            }
            
            console.log('✅ Portfolio has', userPortfolio.length, 'assets - creating chart...');
            
            // Erweiterte Farbpalette für bessere Unterscheidung
            const colorPalette = [
                '#8A2BE2', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
                '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9', '#F8C471',
                '#82E0AA', '#F1948A', '#D7BDE2', '#A9DFBF', '#F9E79F', '#D5DBDB',
                '#AED6F1', '#A3E4D7', '#FADBD8', '#D1F2EB', '#FCF3CF', '#FFB6C1',
                '#87CEEB', '#DDA0DD', '#F0E68C', '#98FB98', '#F5DEB3', '#FFA07A',
                '#20B2AA', '#87CEFA', '#D8BFD8', '#F0FFFF', '#F5F5DC', '#FFE4E1',
                '#E0FFFF', '#FFF8DC', '#FDF5E6', '#F0F8FF', '#F5FFFA', '#FFFACD',
                '#FFEFD5', '#FFEBCD', '#F5F5F5', '#F8F8FF', '#FFF0F5', '#F0FFF0'
            ];
            
            const labels = userPortfolio.map(asset => `${asset.symbol} (${asset.type === 'stock' ? 'Aktie' : asset.type === 'index' ? 'Index' : 'Asset'})`);
            const data = userPortfolio.map(asset => parseFloat(asset.weight));
            const backgroundColors = userPortfolio.map((asset, i) => {
                return colorPalette[i % colorPalette.length];
            });
            
            console.log('Chart labels:', labels);
            console.log('Chart data (weights):', data);
            console.log('Chart colors:', backgroundColors);
            
            window.portfolioChartInstance = new Chart(chartContext, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: backgroundColors,
                        borderWidth: 2,
                        borderColor: '#1a1a1a',
                        hoverBorderWidth: 3,
                        hoverBorderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#fff',
                            bodyColor: '#fff',
                            borderColor: '#8A2BE2',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed;
                                    const investment = userPortfolio[context.dataIndex]?.investment || 0;
                                    return `${label}: ${value}% (CHF ${investment.toLocaleString('de-CH')})`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Separate Legende erstellen
            createPortfolioLegend(labels, backgroundColors, data);
        }
        
        function createPortfolioLegend(labels, colors, data) {
            const legendContainer = document.getElementById('portfolioLegend');
            if (!legendContainer) return;
            
            let legendHTML = '';
            labels.forEach((label, index) => {
                const investment = userPortfolio[index]?.investment || 0;
                legendHTML += `
                    <div style="display: flex; align-items: center; gap: 10px; padding: 8px; border-radius: 6px; background: rgba(255,255,255,0.02);">
                        <div style="width: 16px; height: 16px; border-radius: 50%; background-color: ${colors[index]}; border: 2px solid #1a1a1a;"></div>
                        <div style="flex: 1;">
                            <div style="color: var(--text-primary); font-weight: 500; font-size: 13px;">${label}</div>
                            <div style="color: var(--text-muted); font-size: 11px;">${data[index]}% • CHF ${investment.toLocaleString('de-CH')}</div>
                        </div>
                    </div>
                `;
            });
            
            legendContainer.innerHTML = legendHTML;
        }

        function switchTimeframe(timeframe) {
            currentTimeframe = timeframe;
            
            // Aktiviere den entsprechenden Button
            document.querySelectorAll('.timeframe-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // Aktualisiere die Chart-Daten
            createAssetPerformanceChart(timeframe);
        }

        function createAssetPerformanceChart(timeframe = '5y') {
            const ctx = document.getElementById('assetPerformanceChart').getContext('2d');
            const T = getChartTheme();
            
            if (window.assetPerformanceChartInstance) {
                window.assetPerformanceChartInstance.destroy();
            }
            
            if (userPortfolio.length === 0) {
                window.assetPerformanceChartInstance = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: []
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        plugins: {
                            title: {
                                display: true,
                                text: 'Asset Performance',
                                color: T.text,
                                font: { size: 16, weight: 'bold' }
                            },
                            legend: {
                                position: 'top',
                                labels: { 
                                    color: T.muted,
                                    usePointStyle: true,
                                    padding: 20,
                                    font: { size: 12, weight: '500' }
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: false,
                                title: {
                                    display: true,
                                    text: 'Performance (%)',
                                    color: T.text,
                                    font: { size: 14, weight: 'bold' }
                                },
                                ticks: { 
                                    color: T.muted,
                                    font: { size: 11 },
                                    callback: function(value) {
                                        return value + '%';
                                    }
                                },
                                grid: { 
                                    color: T.gridLight,
                                    drawBorder: false
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Zeitraum',
                                    color: T.text,
                                    font: { size: 14, weight: 'bold' }
                                },
                                ticks: { 
                                    color: T.muted,
                                    font: { size: 11 }
                                },
                                grid: { 
                                    color: T.gridLight,
                                    drawBorder: false
                                }
                            }
                        }
                    }
                });
                return;
            }
            
            // Generiere Zeitachsen basierend auf dem Zeitraum
            let labels = [];
            let dataPoints = 0;
            
            switch(timeframe) {
                case '1m':
                    labels = Array.from({length: 30}, (_, i) => {
                        const date = new Date();
                        date.setDate(date.getDate() - (29 - i));
                        return date.toLocaleDateString('de-CH', {day: '2-digit', month: '2-digit'});
                    });
                    dataPoints = 30;
                    break;
                case '6m':
                    labels = Array.from({length: 6}, (_, i) => {
                        const date = new Date();
                        date.setMonth(date.getMonth() - (5 - i));
                        return date.toLocaleDateString('de-CH', {month: 'short', year: '2-digit'});
                    });
                    dataPoints = 6;
                    break;
                case '1y':
                    labels = Array.from({length: 12}, (_, i) => {
                        const date = new Date();
                        date.setMonth(date.getMonth() - (11 - i));
                        return date.toLocaleDateString('de-CH', {month: 'short', year: '2-digit'});
                    });
                    dataPoints = 12;
                    break;
                case '5y':
                default:
                    labels = Array.from({length: 5}, (_, i) => {
                        const date = new Date();
                        date.setFullYear(date.getFullYear() - (4 - i));
                        return date.getFullYear().toString();
                    });
                    dataPoints = 5;
                    break;
            }
            
            const datasets = [];
            
            userPortfolio.forEach((asset, index) => {
                // Start mit 100% und generiere realistische Performance basierend auf Zeitraum
                let performance = [100];
                for (let i = 1; i < dataPoints; i++) {
                    // Realistischere Performance-Simulation basierend auf Zeitraum
                    const volatility = asset.volatility * 100;
                    const annualReturn = asset.expectedReturn * 100;
                    
                    // Angepasste Volatilität basierend auf Zeitraum
                    let timeframeVolatility = volatility;
                    if (timeframe === '1m') timeframeVolatility = volatility * 3;
                    else if (timeframe === '6m') timeframeVolatility = volatility * 1.5;
                    else if (timeframe === '1y') timeframeVolatility = volatility;
                    else timeframeVolatility = volatility * 0.7; // 5 Jahre - geringere Volatilität
                    
                    const randomFactor = (Math.random() * timeframeVolatility - timeframeVolatility/2) / 100;
                    const periodReturn = annualReturn / (timeframe === '1m' ? 12 : timeframe === '6m' ? 2 : 1);
                    const newValue = performance[i-1] * (1 + periodReturn/100 + randomFactor);
                    performance.push(newValue);
                }
                
                // Konvertiere zu prozentualer Performance relativ zum Start
                const percentagePerformance = performance.map(val => ((val - 100) / 100 * 100).toFixed(1));
                
                // Use the same color palette as the pie chart for consistency
                const colorPalette = [
                    '#8A2BE2', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
                    '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9', '#F8C471',
                    '#82E0AA', '#F1948A', '#D7BDE2', '#A9DFBF', '#F9E79F', '#D5DBDB',
                    '#AED6F1', '#A3E4D7', '#FADBD8', '#D1F2EB', '#FCF3CF', '#FFB6C1',
                    '#87CEEB', '#DDA0DD', '#F0E68C', '#98FB98', '#F5DEB3', '#FFA07A',
                    '#20B2AA', '#87CEFA', '#D8BFD8', '#F0FFFF', '#F5F5DC', '#FFE4E1',
                    '#E0FFFF', '#FFF8DC', '#FDF5E6', '#F0F8FF', '#F5FFFA', '#FFFACD',
                    '#FFEFD5', '#FFEBCD', '#F5F5F5', '#F8F8FF', '#FFF0F5', '#F0FFF0'
                ];
                const color = colorPalette[index % colorPalette.length];
                
                datasets.push({
                    label: asset.symbol,
                    data: percentagePerformance,
                    borderColor: color,
                    backgroundColor: color + '20',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.3,
                    pointRadius: 3
                });
            });
            
            window.assetPerformanceChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    plugins: {
                        title: {
                            display: true,
                            text: `Asset Performance (${getTimeframeLabel(timeframe)})`,
                            color: T.text,
                            font: { size: 16, weight: 'bold' }
                        },
                        legend: {
                            position: 'top',
                            labels: { 
                                color: T.muted,
                                usePointStyle: true,
                                padding: 20,
                                font: { size: 12, weight: '500' }
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#fff',
                            bodyColor: '#fff',
                            borderColor: '#8A2BE2',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    const label = context.dataset.label || '';
                                    const value = context.parsed.y;
                                    return `${label}: ${value}%`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            title: {
                                display: true,
                                text: 'Performance (%)',
                                color: T.text,
                                font: { size: 14, weight: 'bold' }
                            },
                            ticks: { 
                                color: T.muted,
                                font: { size: 11 },
                                callback: function(value) {
                                    return value + '%';
                                }
                            },
                            grid: { 
                                color: T.gridLight,
                                drawBorder: false
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: getTimeframeLabel(timeframe),
                                color: T.text,
                                font: { size: 14, weight: 'bold' }
                            },
                            ticks: { 
                                color: T.muted,
                                font: { size: 11 }
                            },
                            grid: { 
                                color: T.gridLight,
                                drawBorder: false
                            }
                        }
                    }
                }
            });
        }

        function getTimeframeLabel(timeframe) {
            switch(timeframe) {
                case '1m': return 'Letzter Monat';
                case '6m': return 'Letzte 6 Monate';
                case '1y': return 'Letztes Jahr';
                case '5y': return 'Letzte 5 Jahre';
                default: return 'Historische Performance';
            }
        }

        function createPerformanceChart() {
            const ctx = document.getElementById('performanceChart').getContext('2d');
            const T = getChartTheme();
            
            if (window.performanceChartInstance) {
                window.performanceChartInstance.destroy();
            }
            
            const months = ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'];
            const total = userPortfolio.reduce((sum, asset) => sum + asset.investment, 0);
            const expectedReturn = calculatePortfolioReturn() / 12;
            
            let performanceData = [total];
            for (let i = 1; i < 12; i++) {
                performanceData.push(performanceData[i-1] * (1 + expectedReturn + (Math.random() * 0.02 - 0.01)));
            }
            
            window.performanceChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [{
                        label: 'Portfolio Wert',
                        data: performanceData,
                        borderColor: T.accentDark,
                        backgroundColor: 'rgba(139,92,246,0.12)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.3,
                        pointRadius: 3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    scales: {
                        y: {
                            beginAtZero: false,
                            title: {
                                display: true,
                                text: 'Portfolio Wert (CHF)'
                            },
                            ticks: { color: T.muted },
                            grid: { color: T.gridLight }
                        }
                    }
                }
            });
        }

        function createSimulationChart(initialValue, expectedReturn, years) {
            const ctx = document.getElementById('simulationChart').getContext('2d');
            const T = getChartTheme();

            // Reset existing chart instance
            if (window.simulationChartInstance) {
                window.simulationChartInstance.destroy();
            }

            const yearLabels = Array.from({ length: years + 1 }, (_, i) => `Jahr ${i}`);

            // Drei verschiedene Szenarien
            const baseScenario = [initialValue];
            const optimisticScenario = [initialValue];
            const conservativeScenario = [initialValue];

            for (let i = 1; i <= years; i++) {
                baseScenario.push(baseScenario[i - 1] * (1 + expectedReturn / 100));
                optimisticScenario.push(optimisticScenario[i - 1] * (1 + (expectedReturn + 5) / 100));
                conservativeScenario.push(conservativeScenario[i - 1] * (1 + (expectedReturn - 3) / 100));
            }

            window.simulationChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: yearLabels,
                    datasets: [
                        {
                            label: 'Optimistisch',
                            data: optimisticScenario,
                            borderColor: '#4CAF50', // Green for optimistic growth
                            backgroundColor: 'rgba(76, 175, 80, 0.1)',
                            borderWidth: 3,
                            tension: 0.3,
                            pointRadius: 4,
                            fill: false
                        },
                        {
                            label: 'Basis',
                            data: baseScenario,
                            borderColor: '#2196F3', // Blue for baseline
                            backgroundColor: 'rgba(33, 150, 243, 0.1)',
                            borderWidth: 3,
                            tension: 0.3,
                            pointRadius: 4,
                            fill: false
                        },
                        {
                            label: 'Konservativ',
                            data: conservativeScenario,
                            borderColor: '#FF9800', // Orange for conservative
                            backgroundColor: 'rgba(255, 152, 0, 0.1)',
                            borderWidth: 3,
                            tension: 0.3,
                            pointRadius: 4,
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: { color: T.muted }
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: T.muted },
                            grid: { color: T.gridLight }
                        },
                        y: {
                            beginAtZero: false,
                            title: { display: true, text: 'Portfolio Wert (CHF)' },
                            ticks: { color: T.muted },
                            grid: { color: T.gridLight }
                        }
                    }
                }
            });
        }

        // Benchmark-Daten laden
        async function loadBenchmarkData() {
            try {
                const response = await fetch('/get_benchmark_data');
                const data = await response.json();
                
                const container = document.getElementById('benchmarkComparison');
                if (!container) return;
                
                let html = '';
                
                // Portfolio Benchmark
                const portfolioReturn = calculatePortfolioReturn() * 100;
                html += `
                    <div class="benchmark-card">
                        <h4>Ihr Portfolio</h4>
                        <div class="metric-value ${portfolioReturn >= 0 ? 'positive' : 'negative'}">${portfolioReturn >= 0 ? '+' : ''}${portfolioReturn.toFixed(1)}%</div>
                        <div class="metric-label">Erwartete Rendite</div>
                    </div>
                `;
                
                // Professionelle Benchmarks
                for (const [name, returnValue] of Object.entries(data)) {
                    html += `
                        <div class="benchmark-card">
                            <h4>${name}</h4>
                            <div class="metric-value ${returnValue >= 0 ? 'positive' : 'negative'}">${returnValue >= 0 ? '+' : ''}${returnValue}%</div>
                            <div class="metric-label">1-Jahres Rendite</div>
                        </div>
                    `;
                }
                
                container.innerHTML = html;
                
                // Peer Group Vergleich
                updatePeerComparison();
                
            } catch (error) {
                console.error('Error loading benchmark data:', error);
            }
        }

        // Peer Group Vergleich aktualisieren
        function updatePeerComparison() {
            const container = document.getElementById('peerComparison');
            if (!container) return;
            
            const portfolioReturn = calculatePortfolioReturn() * 100;
            const portfolioRisk = calculatePortfolioRisk() * 100;
            
            let html = '';
            
            for (const [bank, data] of Object.entries(swissBankPortfolios)) {
                const comparison = portfolioReturn > data.return ? 'positive' : 'negative';
                html += `
                    <div class="peer-card">
                        <h4>${bank.replace('_', ' ')}</h4>
                        <div class="metric-value ${comparison}">${data.return}%</div>
                        <div class="metric-label">Rendite vs. Ihr Portfolio: ${(portfolioReturn - data.return).toFixed(1)}%</div>
                    </div>
                `;
            }
            
            container.innerHTML = html;
        }

        // Monte Carlo Simulation
        async function runMonteCarloSimulation() {
            const initialValue = userPortfolio.reduce((sum, asset) => sum + asset.investment, 0);
            const expectedReturn = calculatePortfolioReturn();
            const volatility = calculatePortfolioRisk();
            const years = parseInt(document.getElementById('monteCarloYears').value) || 10;
            const simulations = parseInt(document.getElementById('monteCarloSimulations').value) || 1000;
            
            if (initialValue === 0) {
                alert('Bitte erstellen Sie zuerst ein Portfolio.');
                return;
            }
            
            try {
                const response = await fetch('/monte_carlo_simulation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        initial_value: initialValue,
                        expected_return: expectedReturn * 100,
                        volatility: volatility * 100,
                        years: years,
                        simulations: simulations
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    displayMonteCarloResults(data);
                    createMonteCarloChart(data);
                } else {
                    alert('Fehler bei der Simulation: ' + data.error);
                }
            } catch (error) {
                console.error('Error running Monte Carlo simulation:', error);
                alert('Fehler bei der Verbindung zum Server.');
            }
        }

        function displayMonteCarloResults(data) {
            const container = document.getElementById('monteCarloResults');
            container.innerHTML = `
                <div class="performance-metrics">
                    <div class="performance-card">
                        <div class="metric-value positive">CHF ${Math.round(data.avg_final_value).toLocaleString('de-CH')}</div>
                        <div class="metric-label">Durchschnittlicher Endwert</div>
                    </div>
                    <div class="performance-card">
                        <div class="metric-value">CHF ${Math.round(data.median_final_value).toLocaleString('de-CH')}</div>
                        <div class="metric-label">Median Endwert</div>
                    </div>
                    <div class="performance-card">
                        <div class="metric-value">CHF ${Math.round(data.percentile_5).toLocaleString('de-CH')}</div>
                        <div class="metric-label">5% Worst Case</div>
                    </div>
                    <div class="performance-card">
                        <div class="metric-value positive">CHF ${Math.round(data.percentile_95).toLocaleString('de-CH')}</div>
                        <div class="metric-label">5% Best Case</div>
                    </div>
                </div>
                <p><strong>Interpretation:</strong> Bei ${data.simulations} Simulationen über ${document.getElementById('monteCarloYears').value} Jahre zeigt die Analyse, dass Ihr Portfolio mit 90% Wahrscheinlichkeit zwischen CHF ${Math.round(data.percentile_5).toLocaleString('de-CH')} und CHF ${Math.round(data.percentile_95).toLocaleString('de-CH')} wert sein wird.</p>
            `;
        }

        function createMonteCarloChart(data) {
            const ctx = document.getElementById('monteCarloChart').getContext('2d');
            
            if (window.monteCarloChartInstance) {
                window.monteCarloChartInstance.destroy();
            }
            
            const years = parseInt(document.getElementById('monteCarloYears').value) || 10;
            const labels = Array.from({length: years + 1}, (_, i) => `Jahr ${i}`);
            
            // Verbesserte Farbpalette für Monte Carlo Pfade
            const pathColors = [
                'rgba(138, 43, 226, 0.1)',   // Violet
                'rgba(76, 175, 80, 0.1)',    // Green
                'rgba(33, 150, 243, 0.1)',   // Blue
                'rgba(255, 152, 0, 0.1)',    // Orange
                'rgba(156, 39, 176, 0.1)',   // Purple
                'rgba(244, 67, 54, 0.1)',    // Red
                'rgba(0, 150, 136, 0.1)',    // Teal
                'rgba(255, 193, 7, 0.1)'     // Amber
            ];
            
            // Nur einige Pfade für die Visualisierung auswählen
            const displayPaths = data.paths.slice(0, 100);
            const datasets = displayPaths.map((path, i) => ({
                label: `Pfad ${i + 1}`,
                data: path,
                borderColor: pathColors[i % pathColors.length].replace('0.1', '0.3'),
                backgroundColor: pathColors[i % pathColors.length],
                borderWidth: 1,
                pointRadius: 0,
                tension: 0.1,
                fill: false
            }));
            
            // Durchschnittspfad hinzufügen
            const avgPath = [];
            for (let i = 0; i <= years; i++) {
                avgPath.push(data.paths.reduce((sum, path) => sum + path[i], 0) / data.paths.length);
            }
            
            datasets.push({
                label: 'Durchschnitt',
                data: avgPath,
                borderColor: '#8A2BE2',
                backgroundColor: 'rgba(138, 43, 226, 0.1)',
                borderWidth: 4,
                pointRadius: 3,
                tension: 0.1,
                fill: false
            });
            
            // Konfidenzintervalle hinzufügen
            const confidenceLevel = parseInt(document.getElementById('confidenceLevel').value) || 95;
            const percentile = (100 - confidenceLevel) / 2;
            const lowerPercentile = percentile;
            const upperPercentile = 100 - percentile;
            
            const lowerPath = [];
            const upperPath = [];
            for (let i = 0; i <= years; i++) {
                const values = data.paths.map(path => path[i]).sort((a, b) => a - b);
                const lowerIndex = Math.floor(values.length * lowerPercentile / 100);
                const upperIndex = Math.floor(values.length * upperPercentile / 100);
                lowerPath.push(values[lowerIndex]);
                upperPath.push(values[upperIndex]);
            }
            
            datasets.push({
                label: `${confidenceLevel}% Konfidenzintervall`,
                data: upperPath,
                borderColor: 'rgba(138, 43, 226, 0.3)',
                backgroundColor: 'rgba(138, 43, 226, 0.1)',
                borderWidth: 2,
                pointRadius: 0,
                tension: 0.1,
                fill: '+1'
            });
            
            datasets.push({
                label: 'Konfidenzintervall Untergrenze',
                data: lowerPath,
                borderColor: 'rgba(138, 43, 226, 0.3)',
                backgroundColor: 'rgba(138, 43, 226, 0.1)',
                borderWidth: 2,
                pointRadius: 0,
                tension: 0.1,
                fill: false
            });
            
            window.monteCarloChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Zeitraum (Jahre)',
                                color: '#E8E8E8',
                                font: { size: 14, weight: 'bold' }
                            },
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#333' }
                        },
                        y: {
                            beginAtZero: false,
                            title: {
                                display: true,
                                text: 'Portfolio Wert (CHF)',
                                color: '#E8E8E8',
                                font: { size: 14, weight: 'bold' }
                            },
                            ticks: { 
                                color: '#D0D0D0',
                                callback: function(value) {
                                    return 'CHF ' + value.toLocaleString('de-CH');
                                }
                            },
                            grid: { color: '#333' }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                color: '#E8E8E8',
                                usePointStyle: true,
                                padding: 20,
                                filter: function(legendItem, chartData) {
                                    // Nur Durchschnitt und Konfidenzintervall in Legende anzeigen
                                    return legendItem.text === 'Durchschnitt' || 
                                           legendItem.text === `${confidenceLevel}% Konfidenzintervall`;
                                }
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#fff',
                            bodyColor: '#fff',
                            borderColor: '#8A2BE2',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    const value = context.parsed.y;
                                    return context.dataset.label + ': CHF ' + value.toLocaleString('de-CH');
                                }
                            }
                        },
                        zoom: {
                            zoom: {
                                wheel: {
                                    enabled: true,
                                },
                                pinch: {
                                    enabled: true
                                },
                                mode: 'xy',
                            },
                            pan: {
                                enabled: true,
                                mode: 'xy',
                            }
                        }
                    }
                }
            });
            
            // Fullscreen Button hinzufügen
            addFullscreenButton();
        }
        
        function addFullscreenButton() {
            const chartContainer = document.querySelector('#monteCarloChart').parentElement;
            if (chartContainer.querySelector('.fullscreen-btn')) return;
            
            const fullscreenBtn = document.createElement('button');
            fullscreenBtn.className = 'fullscreen-btn';
            fullscreenBtn.innerHTML = '<i class="fas fa-expand"></i> Vollbild';
            fullscreenBtn.style.cssText = `
                position: absolute;
                top: 10px;
                right: 10px;
                background: #8A2BE2;
                color: white;
                border: none;
                padding: 8px 12px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
                z-index: 10;
            `;
            
            fullscreenBtn.onclick = function() {
                toggleFullscreen(chartContainer);
            };
            
            chartContainer.style.position = 'relative';
            chartContainer.appendChild(fullscreenBtn);
        }
        
        function toggleFullscreen(element) {
            if (!document.fullscreenElement) {
                element.requestFullscreen().then(() => {
                    const btn = element.querySelector('.fullscreen-btn');
                    btn.innerHTML = '<i class="fas fa-compress"></i> Verlassen';
                    btn.onclick = function() {
                        document.exitFullscreen();
                    };
                });
            } else {
                document.exitFullscreen().then(() => {
                    const btn = element.querySelector('.fullscreen-btn');
                    btn.innerHTML = '<i class="fas fa-expand"></i> Vollbild';
                    btn.onclick = function() {
                        toggleFullscreen(element);
                    };
                });
            }
        }

        // PDF Report generieren
        async function generatePDFReport() {
            if (userPortfolio.length === 0) {
                alert('Bitte erstellen Sie zuerst ein Portfolio.');
                return;
            }
            
            try {
                // Portfolio Metriken berechnen
                const totalValue = userPortfolio.reduce((sum, asset) => sum + asset.investment, 0);
                const expectedReturn = calculatePortfolioReturn();
                const volatility = calculatePortfolioRisk();
                const sharpeRatio = volatility > 0 ? (expectedReturn - 0.02) / volatility : 0;
                
                const analysisData = {
                    total_value: totalValue,
                    expected_return: expectedReturn,
                    volatility: volatility,
                    sharpe_ratio: sharpeRatio,
                    diversification_score: Math.min(userPortfolio.length * 2, 10)
                };
                
                // Monte Carlo Daten (falls verfügbar)
                let monteCarloData = {};
                if (window.monteCarloResults) {
                    monteCarloData = window.monteCarloResults;
                }
                
                const response = await fetch('/generate_pdf_report', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        },
                    body: JSON.stringify({
                        portfolio: userPortfolio,
                        analysis: analysisData,
                        monte_carlo: monteCarloData
                    })
                });
                
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = 'Portfolio_Overview.pdf';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    
                    showNotification('PDF Report erfolgreich heruntergeladen!', 'success');
                } else {
                    throw new Error('Fehler beim Generieren des PDFs');
                }
            } catch (error) {
                console.error('Error generating PDF:', error);
                alert('Fehler beim Generieren des PDF-Reports: ' + error.message);
            }
        }

        // Strategie Analyse
        function updateStrategyAnalysis() {
            const container = document.getElementById('strategieanalyse');
            
            if (userPortfolio.length === 0 || !portfolioCalculated) {
                container.innerHTML = `
                    <div class="page-header">
                        <h2>Multi-Strategie Analyse</h2>
                        <p>Vergleichen Sie 5 verschiedene Portfolio-Optimierungsstrategien</p>
                    </div>
                    <div class="instruction-box">
                        <h4>🎯 Was diese Analyse bietet:</h4>
                        <p>Hier sehen Sie Ihr Portfolio optimiert nach 5 wissenschaftlichen Methoden. Jede Strategie hat unterschiedliche Ziele: Maximale Rendite, minimales Risiko, oder optimale Balance.</p>
                    </div>
                    <div class="card" style="text-align: center; margin-bottom: 30px;">
                        <h3 style="color: #ffffff; font-weight: 600; text-shadow: 0 1px 3px rgba(0,0,0,0.3);">Portfolio Strategie-Vergleich</h3>
                        <p>Bitte erstellen Sie zuerst ein Portfolio im Dashboard und klicken Sie auf "Portfolio Berechnen".</p>
                        <button class="btn" onclick="switchToDashboard()" style="margin-top: 15px; background: linear-gradient(145deg, #3A3A3A, #303030); color: #E8E8E8; border: 1px solid var(--border-light);">Zum Dashboard</button>
                    </div>
                `;
                return;
            }

            // Berechne alle Strategien
            const strategies = calculateAllStrategies();
            const currentReturn = calculatePortfolioReturn() * 100;
            const currentRisk = calculatePortfolioRisk() * 100;
            
            container.innerHTML = `
                <div class="page-header">
                    <h2>Multi-Strategie Analyse</h2>
                    <p>Vergleichen Sie 5 verschiedene Portfolio-Optimierungsstrategien</p>
                </div>
                
                <div class="instruction-box">
                    <h4>🎯 Was diese Analyse bietet:</h4>
                    <p>Hier sehen Sie Ihr Portfolio optimiert nach 5 wissenschaftlichen Methoden. Jede Strategie hat unterschiedliche Ziele: Maximale Rendite, minimales Risiko, oder optimale Balance. Wählen Sie die Strategie die am besten zu Ihrer Risikobereitschaft passt.</p>
                </div>

                <div class="strategy-comparison">
                    <div>
                        <h3 style="color: #ffffff; font-weight: 600; text-shadow: 0 1px 3px rgba(0,0,0,0.3);">Strategie-Vergleich</h3>
                        <table class="comparison-table">
                            <thead>
                                <tr>
                                    <th>Strategie</th>
                                    <th>Rendite</th>
                                    <th>Risiko</th>
                                    <th>Sharpe Ratio</th>
                                    <th>Empfehlung</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${strategies.map(strategy => `
                                    <tr>
                                        <td style="text-align: left; font-weight: bold; color: #E8E8E8;">${strategy.name}</td>
                                        <td class="${strategy.return >= 0 ? 'positive' : 'negative'}" style="font-weight: 600;">${strategy.return >= 0 ? '+' : ''}${strategy.return}%</td>
                                        <td style="color: #C0C0FF; font-weight: 500;">${strategy.risk}%</td>
                                        <td style="color: #FFD700; font-weight: 500;">${strategy.sharpe}</td>
                                        <td><span class="recommendation-badge ${strategy.badgeClass}">${strategy.recommendation}</span></td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                    <div>
                        <h3>Portfolio-Bewertung</h3>
                        <div class="rating-score">${calculatePortfolioRating(strategies)}/100</div>
                        <div class="card">
                            <h4>Gesamtbewertung</h4>
                            <p><strong>Top-Strategie:</strong> ${getTopStrategy(strategies).name}</p>
                            <p><strong>Verbesserungspotenzial:</strong> ${calculateImprovementPotential(strategies)}%</p>
                            <p><strong>Risikoprofil:</strong> ${getRiskProfile(strategies)}</p>
                            <p><strong>Vergleich mit Standards:</strong> ${getPortfolioStandardComparison(strategies)}</p>
                        </div>
                    </div>
                </div>

                <div class="chart-container">
                    <canvas id="strategyComparisonChart"></canvas>
                </div>

                <h3 style="margin-top: 30px; color: #E8E8E8;">Detaillierte Strategie-Analyse</h3>
                <div class="strategy-grid">
                    ${strategies.map(strategy => `
                        <div class="strategy-card ${strategy.cardClass}" style="background: linear-gradient(145deg, #2A2A2A, #232323); border: 1px solid var(--border-light); box-shadow: var(--shadow-soft);">
                            <h4 style="color: #E8E8E8;">${strategy.name}</h4>
                            <p><strong style="color: #E8E8E8;">Ziel:</strong> <span style="color: #E0E0E0;">${strategy.description}</span></p>
                            <div class="optimization-result" style="background: rgba(138, 43, 226, 0.1); padding: 12px; border-radius: 8px; margin: 10px 0;">
                                <p><strong style="color: #E8E8E8;">Optimierte Rendite:</strong> <span class="${strategy.return >= 0 ? 'positive' : 'negative'}" style="font-weight: bold;">${strategy.return >= 0 ? '+' : ''}${strategy.return}%</span></p>
                                <p><strong style="color: #E8E8E8;">Optimiertes Risiko:</strong> <span style="color: #E0E0E0;">${strategy.risk}%</span></p>
                                <p><strong style="color: #E8E8E8;">Verbesserung:</strong> 
                                    <span class="improvement-indicator ${strategy.improvement > 0 ? 'improvement-positive' : 'improvement-negative'}" style="font-weight: bold;">
                                        ${strategy.improvement > 0 ? '↗' : '↘'} ${strategy.improvement}%
                                    </span>
                                </p>
                            </div>
                            <p><strong style="color: #E8E8E8;">Empfehlung:</strong> <span style="color: #E0E0E0;">${strategy.detailedRecommendation}</span></p>
                        </div>
                    `).join('')}
                </div>
            `;

            createStrategyComparisonChart(strategies);
        }

        function calculateAllStrategies() {
            const currentReturn = calculatePortfolioReturn() * 100;
            const currentRisk = calculatePortfolioRisk() * 100;

            return [
                {
                    name: "Mean-Variance",
                    description: "Optimales Rendite-Risiko-Verhältnis",
                    return: Math.min(currentReturn + 1.5 + Math.random() * 2, 15),
                    risk: Math.max(currentRisk - 2 + Math.random() * 3, 5),
                    sharpe: (0.35 + Math.random() * 0.2).toFixed(2),
                    recommendation: "OPTIMAL",
                    badgeClass: "badge-optimal",
                    cardClass: "strategy-1",
                    improvement: +(1.5 + Math.random() * 2).toFixed(1),
                    detailedRecommendation: "Erhöhen Sie Tech-Aktien und reduzieren Sie Bonds für bessere Performance."
                },
                {
                    name: "Risk Parity",
                    description: "Gleicher Risikobeitrag aller Assets",
                    return: Math.min(currentReturn + 0.5 + Math.random() * 1, 12),
                    risk: Math.max(currentRisk - 4 + Math.random() * 2, 4),
                    sharpe: (0.4 + Math.random() * 0.15).toFixed(2),
                    recommendation: "BALANCIERT",
                    badgeClass: "badge-balanced",
                    cardClass: "strategy-2",
                    improvement: +(0.5 + Math.random() * 1).toFixed(1),
                    detailedRecommendation: "Diversifizieren Sie stärker in Rohstoffe und Immobilien."
                },
                {
                    name: "Min Variance",
                    description: "Minimales Portfolio-Risiko",
                    return: Math.min(currentReturn - 1 + Math.random() * 1, 8),
                    risk: Math.max(currentRisk - 6 + Math.random() * 2, 3),
                    sharpe: (0.45 + Math.random() * 0.1).toFixed(2),
                    recommendation: "KONSERVATIV",
                    badgeClass: "badge-conservative",
                    cardClass: "strategy-3",
                    improvement: +(-1 + Math.random() * 1).toFixed(1),
                    detailedRecommendation: "Konzentrieren Sie sich auf stabile Blue-Chip Aktien und Anleihen."
                },
                {
                    name: "Max Sharpe",
                    description: "Maximales Rendite-Risiko-Verhältnis",
                    return: Math.min(currentReturn + 2.5 + Math.random() * 3, 20),
                    risk: Math.max(currentRisk + 3 + Math.random() * 4, 8),
                    sharpe: (0.5 + Math.random() * 0.25).toFixed(2),
                    recommendation: "AGGRESSIV",
                    badgeClass: "badge-aggressive",
                    cardClass: "strategy-4",
                    improvement: +(2.5 + Math.random() * 3).toFixed(1),
                    detailedRecommendation: "Investieren Sie mehr in Growth-Aktien und reduzieren Sie defensive Assets."
                },
                {
                    name: "Black-Litterman",
                    description: "Marktdaten + eigene Erwartungen",
                    return: Math.min(currentReturn + 1.2 + Math.random() * 1.5, 14),
                    risk: Math.max(currentRisk - 1 + Math.random() * 2, 6),
                    sharpe: (0.42 + Math.random() * 0.18).toFixed(2),
                    recommendation: "EXPERTE",
                    badgeClass: "badge-optimal",
                    cardClass: "strategy-5",
                    improvement: +(1.2 + Math.random() * 1.5).toFixed(1),
                    detailedRecommendation: "Kombinieren Sie fundamentale Analyse mit quantitativen Modellen."
                }
            ];
        }

        function calculatePortfolioRating(strategies) {
            const baseScore = 65;
            const diversificationBonus = Math.min(userPortfolio.length * 3, 15);
            const riskAdjustment = strategies[0].risk > 20 ? -10 : strategies[0].risk < 10 ? 5 : 0;
            const sharpeBonus = strategies[0].sharpe > 0.4 ? 10 : 0;
            
            return Math.min(baseScore + diversificationBonus + riskAdjustment + sharpeBonus, 95);
        }

        function getTopStrategy(strategies) {
            return strategies.reduce((best, current) => 
                parseFloat(current.sharpe) > parseFloat(best.sharpe) ? current : best
            );
        }

        function calculateImprovementPotential(strategies) {
            const topStrategy = getTopStrategy(strategies);
            const currentReturn = calculatePortfolioReturn() * 100;
            
            return Math.max(0, (topStrategy.return - currentReturn)).toFixed(1);
        }

        function getRiskProfile(strategies) {
            const avgRisk = strategies.reduce((sum, s) => sum + s.risk, 0) / strategies.length;
            if (avgRisk > 18) return "Aggressiv";
            if (avgRisk > 12) return "Moderat";
            return "Konservativ";
        }

        function getPortfolioStandardComparison(strategies) {
            const avgReturn = strategies.reduce((sum, s) => sum + s.return, 0) / strategies.length;
            const avgRisk = strategies.reduce((sum, s) => sum + s.risk, 0) / strategies.length;
            const avgSharpe = strategies.reduce((sum, s) => sum + parseFloat(s.sharpe), 0) / strategies.length;
            
            if (avgReturn > 12 && avgRisk < 15 && avgSharpe > 0.6) {
                return "Exzellent - Übertrifft 90% der Standard-Portfolios";
            } else if (avgReturn > 9 && avgRisk < 18 && avgSharpe > 0.45) {
                return "Sehr gut - Besser als 75% der vergleichbaren Portfolios";
            } else if (avgReturn > 6 && avgRisk < 22 && avgSharpe > 0.3) {
                return "Gut - Entspricht Marktstandards";
            } else {
                return "Verbesserungswürdig - Unterhalb der Markterwartungen";
            }
        }

        function createStrategyComparisonChart(strategies) {
            const ctx = document.getElementById('strategyComparisonChart').getContext('2d');
            
            if (window.strategyChartInstance) {
                window.strategyChartInstance.destroy();
            }
            
            const currentReturn = calculatePortfolioReturn() * 100;
            const currentRisk = calculatePortfolioRisk() * 100;

            const data = [
                { x: currentRisk, y: currentReturn, label: 'Aktuelles Portfolio' },
                ...strategies.map((s, i) => ({ x: s.risk, y: s.return, label: s.name }))
            ];

            window.strategyChartInstance = new Chart(ctx, {
                type: 'scatter',
                data: {
                    datasets: [{
                        label: 'Portfolio Strategien',
                        data: data,
                        backgroundColor: ['#1A1A1A'].concat(strategies.map((s, i) => 
                            ['#2D5A27', '#8B1538', '#4A2C5A', '#1E3A5F', '#8B6914'][i]
                        )),
                        borderColor: ['#FFFFFF'].concat(strategies.map((s, i) => 
                            ['#4CAF50', '#F44336', '#9C27B0', '#2196F3', '#FF9800'][i]
                        )),
                        borderWidth: 2,
                        pointRadius: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: { 
                                display: true, 
                                text: 'Risiko (Volatilität in %)' 
                            }
                        },
                        y: {
                            title: { 
                                display: true, 
                                text: 'Rendite (in %)' 
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const point = data[context.dataIndex];
                                    return `${point.label}: ${point.y.toFixed(1)}% Rendite, ${point.x.toFixed(1)}% Risiko`;
                                }
                            }
                        }
                    }
                }
            });
        }

        function generateMarketAnalysis() {
            let analysis = '<div class="market-analysis-grid">';
            
            // Analyse für jede Asset-Klasse im Portfolio
            userPortfolio.forEach(asset => {
                let sector = getAssetSector(asset.symbol);
                let cycle = marketCycles[sector] || {cycle: "Unbekannt", phase: "Unbekannt", rating: "Mittel", trend: "➡️"};
                let cycleClass = "cycle-cyclical";
                if (cycle.cycle === "Wachstum") cycleClass = "cycle-growth";
                if (cycle.cycle === "Defensiv") cycleClass = "cycle-defensive";
                
                analysis += `
                    <div class="market-analysis-card">
                        <h4>${asset.name} (${asset.symbol})</h4>
                        <p><strong>Sektor:</strong> ${sector}</p>
                        <p><strong>Marktzyklus:</strong> <span class="cycle-indicator ${cycleClass}">${cycle.cycle} ${cycle.trend}</span></p>
                        <p><strong>Phase:</strong> ${cycle.phase}</p>
                        <p><strong>Bewertung:</strong> ${cycle.rating}</p>
                        <p><strong>Empfehlung:</strong> ${getInvestmentAdvice(cycle, asset.type)}</p>
                    </div>
                `;
            });
            
            analysis += '</div>';
            return analysis;
        }

        function getAssetSector(symbol) {
            // Vereinfachte Sektor-Zuordnung
            const sectorMap = {
                "TECH": ["LOGIN.SW", "TEMN.SW", "NDX", "SPX", "TLT"],
                "HEALTH": ["NESN.SW", "NOVN.SW", "ROG.SW", "LONN.SW", "XLV"],
                "FINANCIAL": ["UBSG.SW", "CSGN.SW", "ZURN.SW", "BAER.SW"],
                "ENERGY": ["OIL", "XLE", "CL=F"],
                "MATERIALS": ["GOLD", "SILVER", "COPPER", "ABBN.SW", "XLB", "GLD", "SI=F", "HG=F"],
                "INDUSTRIAL": ["SIKA.SW", "GEBN.SW", "ADEN.SW"],
                "CONSUMER": ["CFR.SW", "GIVN.SW"],
                "UTILITIES": ["SCMN.SW", "XLU"]
            };
            
            for (const [sector, symbols] of Object.entries(sectorMap)) {
                if (symbols.includes(symbol)) return sector;
            }
            return "Diversified";
        }

        function getInvestmentAdvice(cycle, assetType) {
            if (cycle.rating === "Hoch" && cycle.trend === "↗️") {
                return "💡 Starke Kaufempfehlung - Günstige Einstiegschance";
            } else if (cycle.rating === "Mittel" && cycle.trend === "↗️") {
                return "👍 Gute Investitionsmöglichkeit - Wachstumspotenzial";
            } else if (cycle.rating === "Niedrig" || cycle.trend === "↘️") {
                return "⚠️ Vorsicht geboten - Überprüfen Sie die Position";
            } else {
                return "🤔 Neutrale Haltung - Beobachten Sie die Entwicklung";
            }
        }

        function getSectorAllocationAdvice() {
            const sectors = {};
            userPortfolio.forEach(asset => {
                const sector = getAssetSector(asset.symbol);
                sectors[sector] = (sectors[sector] || 0) + parseFloat(asset.weight);
            });
            
            const techWeight = sectors["TECH"] || 0;
            const financialWeight = sectors["FINANCIAL"] || 0;
            
            if (techWeight > 30) return "Reduzieren Sie Tech-Übergewichtung";
            if (financialWeight > 25) return "Diversifizieren Sie Finanzsektor";
            return "Ausgewogene Sektor-Allokation";
        }

        /**
         * Wechselt zu einer bestimmten Seite anhand des Seitennamens
         * @param {string} pageName - Name der Seite (z.B. "dashboard", "portfolio", etc.)
         */
        // Page navigation order
        const pageOrder = [
            'getting-started', 'dashboard', 'portfolio', 'strategieanalyse', 
            'simulation', 'backtesting', 'investing', 'bericht', 
            'markets', 'assets', 'methodik', 'black-litterman', 'about'
        ];
        
        // Current page variable
        let currentPage = 'getting-started';
        
        function switchToPage(pageName) {
            // Current page setzen
            currentPage = pageName;
            
            // Alle Tabs deaktivieren
            document.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active'));
            const targetTab = document.querySelector(`[data-page="${pageName}"]`);
            if (targetTab) {
                targetTab.classList.add('active');
            }
            
            // Alle Seiten ausblenden
            document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
            const targetPage = document.getElementById(pageName);
            if (targetPage) {
                targetPage.classList.add('active');
                
                // Landing Page ausblenden falls sie aktiv ist
                hideLandingPage();
                
                // Update page navigation
                updatePageNavigation();
                
                // Spezielle Aktionen für bestimmte Seiten
                if (pageName === 'strategieanalyse') {
                    setTimeout(updateStrategyAnalysis, 100);
                } else if (pageName === 'dashboard') {
                    setTimeout(updateDashboard, 100);
                } else if (pageName === 'portfolio') {
                    setTimeout(updatePortfolioDevelopment, 100);
                } else if (pageName === 'simulation') {
                    setTimeout(updateSimulationPage, 100);
                } else if (pageName === 'backtesting') {
                    // Initialize strategy parameters on first load
                    setTimeout(updateStrategyParameters, 100);
                } else if (pageName === 'investing') {
                    // Investing page doesn't need special updates
                } else if (pageName === 'value-testing') {
                    // Value Testing page doesn't need special updates
                } else if (pageName === 'momentum-growth') {
                    // Momentum Growth page doesn't need special updates
                } else if (pageName === 'buy-hold') {
                    // Buy & Hold page doesn't need special updates
                } else if (pageName === 'carry-strategy') {
                    // Carry Strategy page doesn't need special updates
                } else if (pageName === 'black-litterman') {
                    // Black-Litterman page doesn't need special updates
                } else if (pageName === 'bericht') {
                    // Bericht page doesn't need special updates
                } else if (pageName === 'about') {
                    // About page doesn't need special updates
                }
            }
        }
        
        function switchToDashboard() {
            switchToPage('dashboard');
        }
        
        function switchToGettingStarted() {
            switchToPage('getting-started');
        }

        // Navigation
        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.addEventListener('click', () => {
                // Wenn es der "Startseite" Link ist, zeigen wir die Landing Page und beenden früh
                if (tab.id === 'startseiteLink') {
                    showLandingPage();
                    return;
                }
                
                // Landing Page ausblenden, falls sie aktiv ist
                hideLandingPage();
                
                // Zur entsprechenden Seite wechseln, falls ein data-page Attribut existiert
                if (tab.dataset.page) {
                    switchToPage(tab.dataset.page);
                }
            });
        });

        // Total Investment Update
        document.getElementById('totalInvestment').addEventListener('input', function() {
            totalInvestment = parseFloat(this.value) || 0;
            updatePortfolioDisplay();
        });

        // Investment Years Update
        document.getElementById('investmentYears').addEventListener('input', function() {
            updatePortfolioReturn();
            if (portfolioCalculated) {
                updateSimulationPage();
                updateScenarioAnalysis();
            }
        });

        // Verhindere Seitenverlassen ohne Bestätigung
        window.addEventListener('beforeunload', function (e) {
            if (userPortfolio.length > 0) {
                e.preventDefault();
                e.returnValue = '';
            }
        });

        // Erweiterte Chart-Funktionen für professionelle Finanzvisualisierung
        function createAdvancedCandlestickChart(canvasId, data) {
            const ctx = document.getElementById(canvasId);
            if (!ctx) return null;
            
            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.labels || [],
                    datasets: [{
                        label: 'Price',
                        data: data.prices || [],
                        borderColor: '#00ff88',
                        backgroundColor: 'rgba(0, 255, 136, 0.1)',
                        fill: true,
                        tension: 0.1
                    }, {
                        label: 'SMA 20',
                        data: data.sma || [],
                        borderColor: '#ff6b6b',
                        backgroundColor: 'transparent',
                        borderDash: [5, 5],
                        tension: 0.1
                    }, {
                        label: 'EMA 12',
                        data: data.ema || [],
                        borderColor: '#4ecdc4',
                        backgroundColor: 'transparent',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                usePointStyle: true,
                                padding: 20
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#fff',
                            bodyColor: '#fff',
                            borderColor: '#00ff88',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            display: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#fff'
                            }
                        },
                        y: {
                            display: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#fff',
                                callback: function(value) {
                                    return '$' + value.toFixed(2);
                                }
                            }
                        }
                    },
                    interaction: {
                        mode: 'nearest',
                        axis: 'x',
                        intersect: false
                    }
                }
            });
            
            return chart;
        }
        
        function createRSIChart(canvasId, data) {
            const ctx = document.getElementById(canvasId);
            if (!ctx) return null;
            
            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.labels || [],
                    datasets: [{
                        label: 'RSI',
                        data: data.rsi || [],
                        borderColor: '#ff6b6b',
                        backgroundColor: 'rgba(255, 107, 107, 0.1)',
                        fill: true,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#fff',
                            bodyColor: '#fff'
                        }
                    },
                    scales: {
                        x: {
                            display: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#fff'
                            }
                        },
                        y: {
                            display: true,
                            min: 0,
                            max: 100,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#fff'
                            }
                        }
                    }
                }
            });
            
            return chart;
        }
        
        function createVolumeChart(canvasId, data) {
            const ctx = document.getElementById(canvasId);
            if (!ctx) return null;
            
            const chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.labels || [],
                    datasets: [{
                        label: 'Volume',
                        data: data.volumes || [],
                        backgroundColor: 'rgba(0, 255, 136, 0.6)',
                        borderColor: '#00ff88',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#fff',
                            bodyColor: '#fff'
                        }
                    },
                    scales: {
                        x: {
                            display: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#fff'
                            }
                        },
                        y: {
                            display: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#fff',
                                callback: function(value) {
                                    return (value / 1000000).toFixed(1) + 'M';
                                }
                            }
                        }
                    }
                }
            });
            
            return chart;
        }
        
        // Echtzeit-Features und Live-Updates
        let realTimeCharts = {};
        let marketDataCache = {};
        let lastUpdateTime = 0;
        
        // WebSocket-ähnliche Funktionalität mit Polling
        function startRealTimeUpdates() {
            setInterval(() => {
                updateMarketData();
                updateCharts();
                updateMarketSentiment();
            }, 5000); // Alle 5 Sekunden aktualisieren
        }
        
        async function updateMarketData() {
            try {
                const symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA', '^GSPC', '^IXIC'];
                const promises = symbols.map(symbol => 
                    fetch(`/get_live_data/${symbol}`)
                        .then(response => response.json())
                        .then(data => ({ symbol, data }))
                        .catch(error => ({ symbol, error: error.message }))
                );
                
                const results = await Promise.all(promises);
                results.forEach(({ symbol, data, error }) => {
                    if (data && !error) {
                        marketDataCache[symbol] = data;
                    }
                });
                
                lastUpdateTime = Date.now();
            } catch (error) {
                console.error('Error updating market data:', error);
            }
        }
        
        function updateCharts() {
            // Aktualisiere alle aktiven Charts
            Object.values(realTimeCharts).forEach(chart => {
                if (chart && typeof chart.update === 'function') {
                    chart.update('none'); // Keine Animation für Live-Updates
                }
            });
        }
        
        async function updateMarketSentiment() {
            try {
                const response = await fetch('/api/market_sentiment');
                const sentiment = await response.json();
                
                // Aktualisiere UI mit Marktstimmung
                const sentimentElement = document.getElementById('market-sentiment');
                if (sentimentElement) {
                    sentimentElement.innerHTML = `
                        <div style="color: ${sentiment.color}; font-weight: bold;">
                            ${sentiment.sentiment} (${sentiment.average_change}%)
                        </div>
                        <div style="font-size: 0.8em; color: #888;">
                            Volatilität: ${sentiment.volatility}%
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error updating market sentiment:', error);
            }
        }
        
        // Erweiterte Live-Daten-Anzeige
        function createLiveDataWidget(symbol, containerId) {
            const container = document.getElementById(containerId);
            if (!container) return;
            
            const widget = document.createElement('div');
            widget.className = 'live-data-widget';
            widget.innerHTML = `
                <div class="widget-header">
                    <h4>${symbol}</h4>
                    <div class="live-indicator">
                        <span class="pulse-dot"></span>
                        LIVE
                    </div>
                </div>
                <div class="widget-content">
                    <div class="price-display">
                        <span class="current-price">$0.00</span>
                        <span class="price-change">+0.00%</span>
                    </div>
                    <div class="additional-metrics">
                        <div class="metric">
                            <span class="label">Vol:</span>
                            <span class="value">0</span>
                        </div>
                        <div class="metric">
                            <span class="label">High:</span>
                            <span class="value">$0.00</span>
                        </div>
                        <div class="metric">
                            <span class="label">Low:</span>
                            <span class="value">$0.00</span>
                        </div>
                    </div>
                </div>
            `;
            
            container.appendChild(widget);
            
            // Aktualisiere Widget-Daten
            function updateWidget() {
                const data = marketDataCache[symbol];
                if (data) {
                    const priceElement = widget.querySelector('.current-price');
                    const changeElement = widget.querySelector('.price-change');
                    const volElement = widget.querySelector('.additional-metrics .metric:nth-child(1) .value');
                    const highElement = widget.querySelector('.additional-metrics .metric:nth-child(2) .value');
                    const lowElement = widget.querySelector('.additional-metrics .metric:nth-child(3) .value');
                    
                    if (priceElement) priceElement.textContent = `$${data.price.toFixed(2)}`;
                    if (changeElement) {
                        changeElement.textContent = `${data.change_percent >= 0 ? '+' : ''}${data.change_percent.toFixed(2)}%`;
                        changeElement.className = `price-change ${data.change_percent >= 0 ? 'positive' : 'negative'}`;
                    }
                    if (volElement) volElement.textContent = data.volume ? (data.volume / 1000000).toFixed(1) + 'M' : 'N/A';
                    if (highElement) highElement.textContent = `$${data.high.toFixed(2)}`;
                    if (lowElement) lowElement.textContent = `$${data.low.toFixed(2)}`;
                }
            }
            
            // Aktualisiere alle 5 Sekunden
            setInterval(updateWidget, 5000);
            updateWidget(); // Initiale Aktualisierung
        }
        
        // Entfernt: Ungültige/unnötige Chart.js-Registrierung, die Fehler auslösen kann
        function updateGlobalMarketStatus() {
            const now = new Date();
            const zurichTime = new Date(now.toLocaleString("en-US", {timeZone: "Europe/Zurich"}));
            const zurichHour = zurichTime.getHours() + zurichTime.getMinutes()/60;
            const isWeekday = zurichTime.getDay() >= 1 && zurichTime.getDay() <= 5;
            
            // Börsen-Öffnungszeiten (Zürich Zeit)
            const sixOpen = isWeekday && zurichHour >= 9 && zurichHour < 17.5;
            const nyseOpen = isWeekday && zurichHour >= 15.5 && zurichHour < 22;
            const forexOpen = isWeekday; // Forex: 24/5
            
            // Status updaten
            const marketElements = document.querySelectorAll('.market-status');
            if (marketElements.length > 0) {
                marketElements[0].textContent = sixOpen ? 'OPEN' : 'CLOSED';
                marketElements[0].className = sixOpen ? 'market-status market-open' : 'market-status market-closed';
                
                marketElements[1].textContent = nyseOpen ? 'OPEN' : 'CLOSED';
                marketElements[1].className = nyseOpen ? 'market-status market-open' : 'market-status market-closed';
                
                marketElements[2].textContent = forexOpen ? 'OPEN' : 'CLOSED';
                marketElements[2].className = forexOpen ? 'market-status market-open' : 'market-status market-closed';
            }
        }

        // Alle 60 Sekunden updaten
        setInterval(updateGlobalMarketStatus, 60000);
        updateGlobalMarketStatus(); // Sofort ausführen
        
        // Handle tabs in the Investing page
        document.addEventListener('DOMContentLoaded', function() {
            const tabs = document.querySelectorAll('.tabs .tab');
            
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    // Remove active class from all tabs and content
                    document.querySelectorAll('.tabs .tab').forEach(t => t.classList.remove('active'));
                    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                    
                    // Add active class to clicked tab
                    this.classList.add('active');
                    
                    // Show corresponding content
                    const tabId = this.getAttribute('data-tab');
                    document.getElementById(tabId + '-content').classList.add('active');
                });
            });
            
        // Initialize charts when visiting the investing page
        document.querySelector('[data-page="investing"]').addEventListener('click', function() {
            setTimeout(initInvestingCharts, 100);
        });

        // Navigation Event Listeners - Verbesserte Navigation
        function setupNavigation() {
            document.querySelectorAll('.nav-tab').forEach(tab => {
                // Remove existing listeners to avoid duplicates
                tab.removeEventListener('click', handleNavClick);
                tab.addEventListener('click', handleNavClick);
            });
        }

        function handleNavClick(event) {
            event.preventDefault();
            const pageId = this.getAttribute('data-page');
            
            if (pageId) {
                // Landing Page ausblenden
                hideLandingPage();
                // Zur Seite wechseln
                switchToPage(pageId);
            } else if (this.id === 'startseiteLink') {
                // Zurück zur Startseite
                showLandingPage();
            }
        }

        // Setup navigation after DOM is loaded
        setupNavigation();

        // Navigation Pfeile für Seiten
            
            // Set the default active page to Getting Started
            setTimeout(switchToGettingStarted, 100);
        });
        
        function initInvestingCharts() {
            // Stocks chart
            if (document.getElementById('stocks-chart')) {
                new Chart(document.getElementById('stocks-chart'), {
                    type: 'line',
                    data: {
                        labels: ['2010', '2012', '2014', '2016', '2018', '2020', '2022'],
                        datasets: [{
                            label: 'Growth Stocks',
                            data: [100, 120, 140, 180, 220, 260, 280],
                            borderColor: 'rgba(75, 192, 192, 1)',
                            tension: 0.1
                        }, {
                            label: 'Value Stocks',
                            data: [100, 110, 125, 140, 160, 170, 190],
                            borderColor: 'rgba(153, 102, 255, 1)',
                            tension: 0.1
                        }, {
                            label: 'Dividend Stocks',
                            data: [100, 115, 130, 150, 165, 180, 195],
                            borderColor: 'rgba(255, 159, 64, 1)',
                            tension: 0.1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            title: {
                                display: true,
                                text: 'Stock Performance (Indexed)'
                            }
                        }
                    }
                });
            }
        }

        // Value Testing Module
        let valueTestingData = null;
        let valueTestingCharts = {};

        /**
         * Startet die Value Testing Analyse
         */
        async function startValueTesting() {
            const loadingContainer = document.getElementById('valueTestingLoading');
            const resultsContainer = document.getElementById('valueTestingResults');
            const progressBar = document.getElementById('analysisProgress');
            const exportBtn = document.getElementById('exportBtn');

            // Show loading state
            loadingContainer.style.display = 'block';
            resultsContainer.style.display = 'none';
            exportBtn.disabled = true;

            try {
                // Get parameters
                const discountRate = parseFloat(document.getElementById('discountRate').value) / 100;
                const terminalGrowth = parseFloat(document.getElementById('terminalGrowth').value) / 100;
                const riskFreeRate = parseFloat(document.getElementById('riskFreeRate').value) / 100;
                const marketRiskPremium = parseFloat(document.getElementById('marketRiskPremium').value) / 100;

                // Simulate progress
                let progress = 0;
                const progressInterval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 90) progress = 90;
                    progressBar.style.width = progress + '%';
                }, 200);

                // Get portfolio data from dashboard
                const portfolioAssets = await getPortfolioAssets();
                
                // Simulate data acquisition delay
                await new Promise(resolve => setTimeout(resolve, 2000));

                // Perform value testing analysis
                const analysisResults = await performValueTesting(portfolioAssets, {
                    discountRate,
                    terminalGrowth,
                    riskFreeRate,
                    marketRiskPremium
                });

                clearInterval(progressInterval);
                progressBar.style.width = '100%';

                // Store results
                valueTestingData = analysisResults;

                // Display results
                displayValueTestingResults(analysisResults);

                // Hide loading, show results
                setTimeout(() => {
                    loadingContainer.style.display = 'none';
                    resultsContainer.style.display = 'block';
                    exportBtn.disabled = false;
                }, 500);

            } catch (error) {
                console.error('Value Testing Error:', error);
                alert('Fehler bei der Analyse. Bitte versuchen Sie es erneut.');
                loadingContainer.style.display = 'none';
            }
        }

        /**
         * Holt Portfolio-Assets vom Dashboard
         */
        async function getPortfolioAssets() {
            // Simulate getting portfolio data
            // In a real implementation, this would fetch from the dashboard
            return [
                {
                    ticker: 'NESN',
                    name: 'Nestlé S.A.',
                    type: 'Stock',
                    currentPrice: 95.50,
                    quantity: 10,
                    purchasePrice: 88.20,
                    purchaseDate: '2024-01-15',
                    sector: 'Consumer Goods',
                    country: 'Switzerland',
                    currency: 'CHF'
                },
                {
                    ticker: 'ROG',
                    name: 'Roche Holding AG',
                    type: 'Stock',
                    currentPrice: 245.80,
                    quantity: 5,
                    purchasePrice: 230.50,
                    purchaseDate: '2024-02-20',
                    sector: 'Healthcare',
                    country: 'Switzerland',
                    currency: 'CHF'
                },
                {
                    ticker: 'NOVN',
                    name: 'Novartis AG',
                    type: 'Stock',
                    currentPrice: 88.90,
                    quantity: 8,
                    purchasePrice: 92.30,
                    purchaseDate: '2024-03-10',
                    sector: 'Healthcare',
                    country: 'Switzerland',
                    currency: 'CHF'
                }
            ];
        }

        /**
         * Führt die Value Testing Analyse durch
         */
        async function performValueTesting(assets, parameters) {
            const results = {
                portfolioValue: 0,
                totalFairValue: 0,
                assets: [],
                sources: [],
                reportGeneratedAt: new Date().toISOString()
            };

            for (const asset of assets) {
                // Simulate data acquisition
                const fundamentalData = await acquireFundamentalData(asset);
                
                // Perform valuations
                const valuations = performValuations(asset, fundamentalData, parameters);
                
                // Calculate score
                const score = calculateAssetScore(asset, fundamentalData, valuations);
                
                // Generate recommendation
                const recommendation = generateRecommendation(score);
                
                // Create explanation
                const explanation = generateExplanation(asset, fundamentalData, valuations, score);

                const assetResult = {
                    ticker: asset.ticker,
                    name: asset.name,
                    currentPrice: asset.currentPrice,
                    fairValue: valuations.fairValue,
                    fairValueModel: valuations.primaryModel,
                    score: score,
                    recommendation: recommendation,
                    explanation: explanation,
                    sources: fundamentalData.sources,
                    valuations: valuations,
                    fundamentalData: fundamentalData
                };

                results.assets.push(assetResult);
                results.portfolioValue += asset.currentPrice * asset.quantity;
                results.totalFairValue += valuations.fairValue * asset.quantity;
                results.sources.push(...fundamentalData.sources);
            }

            // Calculate aggregate score
            results.aggregateScore = results.assets.reduce((sum, asset) => sum + asset.score, 0) / results.assets.length;
            results.overallRecommendation = generateRecommendation(results.aggregateScore);

            return results;
        }

        /**
         * Simuliert die Beschaffung von Fundamentaldaten
         */
        async function acquireFundamentalData(asset) {
            // Simulate API delay
            await new Promise(resolve => setTimeout(resolve, 500));

            // Mock fundamental data
            const mockData = {
                marketCap: asset.currentPrice * 1000000000, // Mock market cap
                pe: 15 + Math.random() * 10,
                ps: 2 + Math.random() * 3,
                pb: 1.5 + Math.random() * 2,
                eps: asset.currentPrice / (15 + Math.random() * 10),
                freeCashFlow: asset.currentPrice * 1000000000 * 0.1,
                revenue: asset.currentPrice * 1000000000 * 0.8,
                dividendYield: Math.random() * 4,
                roe: 10 + Math.random() * 15,
                debtToEquity: Math.random() * 0.8,
                sources: [
                    {
                        url: `https://finance.yahoo.com/quote/${asset.ticker}`,
                        title: `Yahoo Finance - ${asset.ticker}`,
                        fetchedAt: new Date().toISOString().split('T')[0]
                    },
                    {
                        url: `https://www.morningstar.com/stocks/${asset.ticker}`,
                        title: `Morningstar - ${asset.ticker}`,
                        fetchedAt: new Date().toISOString().split('T')[0]
                    }
                ]
            };

            return mockData;
        }

        /**
         * Führt verschiedene Bewertungsmethoden durch
         */
        function performValuations(asset, fundamentalData, parameters) {
            // DCF Valuation
            const dcfValue = calculateDCF(fundamentalData, parameters);
            
            // Graham Formula
            const grahamValue = calculateGraham(fundamentalData);
            
            // PEG Valuation
            const pegValue = calculatePEG(asset, fundamentalData);

            // Select primary model (DCF if available, otherwise Graham)
            const primaryModel = fundamentalData.freeCashFlow > 0 ? 'DCF' : 'Graham';
            const fairValue = primaryModel === 'DCF' ? dcfValue : grahamValue;

            return {
                dcf: dcfValue,
                graham: grahamValue,
                peg: pegValue,
                fairValue: fairValue,
                primaryModel: primaryModel
            };
        }

        /**
         * DCF Berechnung
         */
        function calculateDCF(fundamentalData, parameters) {
            const { freeCashFlow } = fundamentalData;
            const { discountRate, terminalGrowth } = parameters;
            
            if (freeCashFlow <= 0) return 0;

            // Simplified DCF: FCF * (1 + terminalGrowth) / (discountRate - terminalGrowth)
            const terminalValue = freeCashFlow * (1 + terminalGrowth) / (discountRate - terminalGrowth);
            return terminalValue / 1000000000; // Convert to per-share (simplified)
        }

        /**
         * Graham Formula Berechnung
         */
        function calculateGraham(fundamentalData) {
            const { eps, pe } = fundamentalData;
            if (!eps || !pe) return 0;

            // Graham Formula: sqrt(22.5 * EPS * BVPS)
            const bvps = eps * pe / 2; // Simplified BVPS calculation
            return Math.sqrt(22.5 * eps * bvps);
        }

        /**
         * PEG Berechnung
         */
        function calculatePEG(asset, fundamentalData) {
            const { pe } = fundamentalData;
            const growthRate = 0.05; // Assume 5% growth
            
            if (!pe || growthRate <= 0) return asset.currentPrice;
            
            return asset.currentPrice * growthRate / pe;
        }

        /**
         * Berechnet Asset-Score
         */
        function calculateAssetScore(asset, fundamentalData, valuations) {
            let score = 50; // Base score

            // Price vs Fair Value (40% weight)
            const priceDeviation = (valuations.fairValue - asset.currentPrice) / asset.currentPrice;
            score += priceDeviation * 40;

            // P/E Ratio (20% weight)
            if (fundamentalData.pe) {
                const peScore = Math.max(0, 20 - (fundamentalData.pe - 15) * 2);
                score += peScore * 0.2;
            }

            // ROE (20% weight)
            if (fundamentalData.roe) {
                const roeScore = Math.min(20, fundamentalData.roe * 1.5);
                score += roeScore * 0.2;
            }

            // Debt/Equity (10% weight)
            if (fundamentalData.debtToEquity) {
                const debtScore = Math.max(0, 10 - fundamentalData.debtToEquity * 10);
                score += debtScore * 0.1;
            }

            // Dividend Yield (10% weight)
            if (fundamentalData.dividendYield) {
                const divScore = Math.min(10, fundamentalData.dividendYield * 2.5);
                score += divScore * 0.1;
            }

            return Math.max(0, Math.min(100, Math.round(score)));
        }

        /**
         * Generiert Empfehlung basierend auf Score
         */
        function generateRecommendation(score) {
            if (score >= 75) return 'Kaufen';
            if (score >= 50) return 'Halten';
            return 'Verkaufen';
        }

        /**
         * Generiert Erklärung für die Empfehlung
         */
        function generateExplanation(asset, fundamentalData, valuations, score) {
            const priceDeviation = ((valuations.fairValue - asset.currentPrice) / asset.currentPrice * 100).toFixed(1);
            const pe = fundamentalData.pe ? fundamentalData.pe.toFixed(1) : 'N/A';
            const roe = fundamentalData.roe ? fundamentalData.roe.toFixed(1) : 'N/A';

            if (score >= 75) {
                return `Stark unterbewertet (${priceDeviation}% unter Fair Value). Günstiges KGV von ${pe} und solide ROE von ${roe}%.`;
            } else if (score >= 50) {
                return `Fair bewertet. KGV von ${pe} und ROE von ${roe}% sind branchentypisch.`;
            } else {
                return `Überbewertet (${Math.abs(priceDeviation)}% über Fair Value). Hohes KGV von ${pe} deutet auf Überbewertung hin.`;
            }
        }

        /**
         * Zeigt die Value Testing Ergebnisse an
         */
        function displayValueTestingResults(results) {
            // Portfolio Summary
            document.getElementById('totalPortfolioValue').textContent = formatCurrency(results.portfolioValue);
            document.getElementById('totalFairValue').textContent = formatCurrency(results.totalFairValue);
            
            const valuation = ((results.totalFairValue - results.portfolioValue) / results.portfolioValue * 100).toFixed(1);
            document.getElementById('portfolioValuation').textContent = 
                `${valuation > 0 ? '+' : ''}${valuation}% ${valuation > 0 ? 'unterbewertet' : 'überbewertet'}`;
            
            document.getElementById('aggregateScore').textContent = `${results.aggregateScore.toFixed(0)}/100`;

            // Assets Table
            const tableBody = document.getElementById('valueAnalysisTableBody');
            tableBody.innerHTML = '';

            results.assets.forEach(asset => {
                const row = document.createElement('tr');
                const deviation = ((asset.fairValue - asset.currentPrice) / asset.currentPrice * 100).toFixed(1);
                const recommendationClass = asset.recommendation === 'Kaufen' ? 'recommendation-buy' : 
                                          asset.recommendation === 'Halten' ? 'recommendation-hold' : 'recommendation-sell';

                row.innerHTML = `
                    <td>
                        <strong>${asset.name}</strong><br>
                        <small>${asset.ticker}</small>
                    </td>
                    <td>${formatCurrency(asset.currentPrice)}</td>
                    <td>${formatCurrency(asset.fairValue)}</td>
                    <td style="color: ${deviation > 0 ? '#4CAF50' : '#FF6B6B'}">
                        ${deviation > 0 ? '+' : ''}${deviation}%
                    </td>
                    <td>
                        <div class="score-bar">
                            <div class="score-fill ${getScoreClass(asset.score)}" style="width: ${asset.score}%"></div>
                        </div>
                        <small>${asset.score}/100</small>
                    </td>
                    <td class="${recommendationClass}">${asset.recommendation}</td>
                    <td style="max-width: 200px; font-size: 12px;">${asset.explanation}</td>
                    <td>
                        <button class="btn secondary" onclick="showAssetDetail('${asset.ticker}')">
                            <i class="fas fa-info-circle"></i>
                        </button>
                    </td>
                `;
                tableBody.appendChild(row);
            });

            // Sources
            displaySources(results.sources);

            // Create Charts
            createValueTestingCharts(results);
        }

        /**
         * Zeigt Quellen an
         */
        function displaySources(sources) {
            const sourcesList = document.getElementById('sourcesList');
            sourcesList.innerHTML = '';

            // Remove duplicates
            const uniqueSources = sources.filter((source, index, self) => 
                index === self.findIndex(s => s.url === source.url)
            );

            uniqueSources.forEach(source => {
                const sourceItem = document.createElement('div');
                sourceItem.className = 'source-item';
                sourceItem.innerHTML = `
                    <h5>${source.title}</h5>
                    <p><a href="${source.url}" target="_blank">${source.url}</a></p>
                    <p><small>Abgerufen: ${source.fetchedAt}</small></p>
                `;
                sourcesList.appendChild(sourceItem);
            });
        }

        /**
         * Erstellt Charts für Value Testing
         */
        function createValueTestingCharts(results) {
            // Score Distribution Chart
            const scoreCtx = document.getElementById('scoreDistributionChart').getContext('2d');
            if (valueTestingCharts.scoreDistribution) {
                valueTestingCharts.scoreDistribution.destroy();
            }

            const scoreData = results.assets.map(asset => asset.score);
            valueTestingCharts.scoreDistribution = new Chart(scoreCtx, {
                type: 'bar',
                data: {
                    labels: results.assets.map(asset => asset.ticker),
                    datasets: [{
                        label: 'Score',
                        data: scoreData,
                        backgroundColor: scoreData.map(score => 
                            score >= 75 ? '#4CAF50' : score >= 50 ? '#FFD700' : '#FF6B6B'
                        ),
                        borderColor: '#E8E8E8',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        title: { display: false }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#444' }
                        },
                        x: {
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#444' }
                        }
                    }
                }
            });

            // Portfolio Weight Chart
            const weightCtx = document.getElementById('portfolioWeightChart').getContext('2d');
            if (valueTestingCharts.portfolioWeight) {
                valueTestingCharts.portfolioWeight.destroy();
            }

            const totalValue = results.assets.reduce((sum, asset) => sum + (asset.currentPrice * 10), 0);
            const weights = results.assets.map(asset => 
                ((asset.currentPrice * 10) / totalValue * 100).toFixed(1)
            );

            valueTestingCharts.portfolioWeight = new Chart(weightCtx, {
                type: 'doughnut',
                data: {
                    labels: results.assets.map(asset => asset.ticker),
                    datasets: [{
                        data: weights,
                        backgroundColor: ['#8A2BE2', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4'],
                        borderColor: '#1A1A1A',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: { color: '#D0D0D0' }
                        },
                        title: { display: false }
                    }
                }
            });
        }

        /**
         * Zeigt Asset-Details in Modal
         */
        function showAssetDetail(ticker) {
            if (!valueTestingData) return;

            const asset = valueTestingData.assets.find(a => a.ticker === ticker);
            if (!asset) return;

            const modal = document.getElementById('assetDetailModal');
            const content = document.getElementById('assetDetailContent');

            content.innerHTML = `
                <h3>${asset.name} (${asset.ticker})</h3>
                
                <div class="detail-grid">
                    <div class="detail-item">
                        <h5>Aktueller Kurs</h5>
                        <p>${formatCurrency(asset.currentPrice)}</p>
                    </div>
                    <div class="detail-item">
                        <h5>Fair Value</h5>
                        <p>${formatCurrency(asset.fairValue)}</p>
                    </div>
                    <div class="detail-item">
                        <h5>Score</h5>
                        <p>${asset.score}/100</p>
                    </div>
                    <div class="detail-item">
                        <h5>Empfehlung</h5>
                        <p class="${asset.recommendation === 'Kaufen' ? 'recommendation-buy' : 
                                   asset.recommendation === 'Halten' ? 'recommendation-hold' : 'recommendation-sell'}">
                            ${asset.recommendation}
                        </p>
                    </div>
                </div>

                <div class="valuation-methods">
                    <h4>Bewertungsmethoden</h4>
                    <div class="valuation-method">
                        <h5>DCF (Discounted Cash Flow)</h5>
                        <p>Fair Value: ${formatCurrency(asset.valuations.dcf)}</p>
                        <p>Basiert auf Free Cash Flow und Terminal Growth</p>
                    </div>
                    <div class="valuation-method">
                        <h5>Graham Formula</h5>
                        <p>Fair Value: ${formatCurrency(asset.valuations.graham)}</p>
                        <p>Basiert auf EPS und Buchwert pro Aktie</p>
                    </div>
                    <div class="valuation-method">
                        <h5>PEG (Price/Earnings to Growth)</h5>
                        <p>Fair Value: ${formatCurrency(asset.valuations.peg)}</p>
                        <p>Basiert auf KGV relativ zum Wachstum</p>
                    </div>
                </div>

                <div class="valuation-methods">
                    <h4>Fundamentaldaten</h4>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <h5>KGV (P/E)</h5>
                            <p>${asset.fundamentalData.pe ? asset.fundamentalData.pe.toFixed(2) : 'N/A'}</p>
                        </div>
                        <div class="detail-item">
                            <h5>ROE</h5>
                            <p>${asset.fundamentalData.roe ? asset.fundamentalData.roe.toFixed(1) + '%' : 'N/A'}</p>
                        </div>
                        <div class="detail-item">
                            <h5>Verschuldungsgrad</h5>
                            <p>${asset.fundamentalData.debtToEquity ? asset.fundamentalData.debtToEquity.toFixed(2) : 'N/A'}</p>
                        </div>
                        <div class="detail-item">
                            <h5>Dividendenrendite</h5>
                            <p>${asset.fundamentalData.dividendYield ? asset.fundamentalData.dividendYield.toFixed(2) + '%' : 'N/A'}</p>
                        </div>
                    </div>
                </div>

                <div class="valuation-methods">
                    <h4>Begründung</h4>
                    <p>${asset.explanation}</p>
                </div>
            `;

            modal.style.display = 'flex';
        }

        /**
         * Schließt Asset-Detail Modal
         */
        function closeAssetDetail() {
            document.getElementById('assetDetailModal').style.display = 'none';
        }

        /**
         * Exportiert Value Testing Report als PDF
         */
        function exportValueReport() {
            if (!valueTestingData) return;

            // Create PDF content
            const pdfContent = generatePDFContent(valueTestingData);
            
            // Create and download PDF
            const element = document.createElement('a');
            const file = new Blob([pdfContent], { type: 'text/html' });
            element.href = URL.createObjectURL(file);
            element.download = `Value_Testing_Report_${new Date().toISOString().split('T')[0]}.html`;
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        }

        /**
         * Generiert PDF-Inhalt
         */
        function generatePDFContent(data) {
            const date = new Date().toLocaleDateString('de-DE');
            
            return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Value Testing Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .summary { display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px; margin-bottom: 30px; }
        .summary-item { padding: 15px; border: 1px solid #ddd; text-align: center; }
        table { width: 100%; border-collapse: collapse; margin-bottom: 30px; }
        th, td { padding: 10px; border: 1px solid #ddd; text-align: left; }
        th { background-color: #f5f5f5; }
        .sources { margin-top: 30px; }
        .source-item { margin-bottom: 10px; padding: 10px; background-color: #f9f9f9; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Value Testing Report</h1>
        <p>Generiert am: ${date}</p>
    </div>

    <div class="summary">
        <div class="summary-item">
            <h3>Gesamtwert</h3>
            <p>${formatCurrency(data.portfolioValue)}</p>
        </div>
        <div class="summary-item">
            <h3>Fair Value</h3>
            <p>${formatCurrency(data.totalFairValue)}</p>
        </div>
        <div class="summary-item">
            <h3>Über-/Unterbewertung</h3>
            <p>${((data.totalFairValue - data.portfolioValue) / data.portfolioValue * 100).toFixed(1)}%</p>
        </div>
        <div class="summary-item">
            <h3>Aggregiertes Scoring</h3>
            <p>${data.aggregateScore.toFixed(0)}/100</p>
        </div>
    </div>

    <table>
        <thead>
            <tr>
                <th>Asset</th>
                <th>Aktueller Kurs</th>
                <th>Fair Value</th>
                <th>Abweichung</th>
                <th>Score</th>
                <th>Empfehlung</th>
                <th>Begründung</th>
            </tr>
        </thead>
        <tbody>
            ${data.assets.map(asset => `
                <tr>
                    <td>${asset.name} (${asset.ticker})</td>
                    <td>${formatCurrency(asset.currentPrice)}</td>
                    <td>${formatCurrency(asset.fairValue)}</td>
                    <td>${((asset.fairValue - asset.currentPrice) / asset.currentPrice * 100).toFixed(1)}%</td>
                    <td>${asset.score}/100</td>
                    <td>${asset.recommendation}</td>
                    <td>${asset.explanation}</td>
                </tr>
            `).join('')}
        </tbody>
    </table>

    <div class="sources">
        <h3>Datenquellen</h3>
        ${data.sources.filter((source, index, self) => 
            index === self.findIndex(s => s.url === source.url)
        ).map(source => `
            <div class="source-item">
                <strong>${source.title}</strong><br>
                <a href="${source.url}">${source.url}</a><br>
                <small>Abgerufen: ${source.fetchedAt}</small>
            </div>
        `).join('')}
    </div>
</body>
</html>`;
        }

        /**
         * Hilfsfunktionen
         */
        function formatCurrency(value) {
            return new Intl.NumberFormat('de-CH', {
                style: 'currency',
                currency: 'CHF'
            }).format(value);
        }

        function getScoreClass(score) {
            if (score >= 75) return 'score-high';
            if (score >= 50) return 'score-medium';
            return 'score-low';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('assetDetailModal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }

        // Investment Strategy Modules
        let momentumData = null;
        let buyHoldData = null;
        let carryData = null;
        let strategyCharts = {};

        // ==================== MOMENTUM GROWTH MODULE ====================

        /**
         * Startet die Momentum-Analyse
         */
        async function startMomentumAnalysis() {
            const loadingContainer = document.getElementById('momentumLoading');
            const resultsContainer = document.getElementById('momentumResults');
            const progressBar = document.getElementById('momentumProgress');
            const exportBtn = document.getElementById('momentumExportBtn');

            loadingContainer.style.display = 'block';
            resultsContainer.style.display = 'none';
            exportBtn.disabled = true;

            try {
                const lookbackMonths = parseInt(document.getElementById('momentumLookback').value);
                const maShort = parseInt(document.getElementById('maShort').value);
                const maLong = parseInt(document.getElementById('maLong').value);
                const benchmark = document.getElementById('benchmark').value;

                let progress = 0;
                const progressInterval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 90) progress = 90;
                    progressBar.style.width = progress + '%';
                }, 200);

                const portfolioAssets = await getPortfolioAssets();
                await new Promise(resolve => setTimeout(resolve, 2000));

                const analysisResults = await performMomentumAnalysis(portfolioAssets, {
                    lookbackMonths,
                    maShort,
                    maLong,
                    benchmark
                });

                clearInterval(progressInterval);
                progressBar.style.width = '100%';

                momentumData = analysisResults;
                displayMomentumResults(analysisResults);

                setTimeout(() => {
                    loadingContainer.style.display = 'none';
                    resultsContainer.style.display = 'block';
                    exportBtn.disabled = false;
                }, 500);

            } catch (error) {
                console.error('Momentum Analysis Error:', error);
                alert('Fehler bei der Momentum-Analyse. Bitte versuchen Sie es erneut.');
                loadingContainer.style.display = 'none';
            }
        }

        /**
         * Führt die Momentum-Analyse durch
         */
        async function performMomentumAnalysis(assets, parameters) {
            const results = {
                portfolioMomentumExposure: 0,
                assets: [],
                sources: [],
                reportGeneratedAt: new Date().toISOString()
            };

            for (const asset of assets) {
                const momentumData = await acquireMomentumData(asset, parameters);
                const momentumScore = calculateMomentumScore(asset, momentumData, parameters);
                const recommendation = generateMomentumRecommendation(momentumScore);
                const explanation = generateMomentumExplanation(asset, momentumData, momentumScore);

                const assetResult = {
                    ticker: asset.ticker,
                    name: asset.name,
                    momentumScore: momentumScore,
                    shortTermReturn_1M: momentumData.returns.oneMonth,
                    midTermReturn_6M: momentumData.returns.sixMonths,
                    longTermReturn_12M: momentumData.returns.twelveMonths,
                    ma50: momentumData.movingAverages.ma50,
                    ma200: momentumData.movingAverages.ma200,
                    volatility30d: momentumData.volatility.thirtyDay,
                    recommendation: recommendation,
                    explanation: explanation,
                    sources: momentumData.sources,
                    momentumData: momentumData
                };

                results.assets.push(assetResult);
                results.portfolioMomentumExposure += momentumScore * (asset.currentPrice * asset.quantity);
                results.sources.push(...momentumData.sources);
            }

            results.aggregateScore = results.assets.reduce((sum, asset) => sum + asset.momentumScore, 0) / results.assets.length;
            results.overallRecommendation = generateMomentumRecommendation(results.aggregateScore);

            return results;
        }

        /**
         * Simuliert die Beschaffung von Momentum-Daten
         */
        async function acquireMomentumData(asset, parameters) {
            await new Promise(resolve => setTimeout(resolve, 500));

            const mockData = {
                returns: {
                    oneMonth: (Math.random() - 0.5) * 20,
                    threeMonths: (Math.random() - 0.5) * 30,
                    sixMonths: (Math.random() - 0.5) * 40,
                    twelveMonths: (Math.random() - 0.5) * 60
                },
                movingAverages: {
                    ma50: asset.currentPrice * (0.9 + Math.random() * 0.2),
                    ma200: asset.currentPrice * (0.8 + Math.random() * 0.4)
                },
                volatility: {
                    thirtyDay: 15 + Math.random() * 20,
                    ninetyDay: 18 + Math.random() * 25
                },
                relativeStrength: 30 + Math.random() * 40,
                volume: {
                    current: 1000000 + Math.random() * 5000000,
                    average: 800000 + Math.random() * 3000000
                },
                sources: [
                    {
                        url: `https://finance.yahoo.com/quote/${asset.ticker}`,
                        title: `Yahoo Finance - ${asset.ticker}`,
                        fetchedAt: new Date().toISOString().split('T')[0]
                    },
                    {
                        url: `https://www.investing.com/equities/${asset.ticker.toLowerCase()}`,
                        title: `Investing.com - ${asset.ticker}`,
                        fetchedAt: new Date().toISOString().split('T')[0]
                    }
                ]
            };

            return mockData;
        }

        /**
         * Berechnet Momentum-Score
         */
        function calculateMomentumScore(asset, momentumData, parameters) {
            let score = 50;

            // Returns (40% weight)
            const returnScore = (momentumData.returns.oneMonth + momentumData.returns.sixMonths + momentumData.returns.twelveMonths) / 3;
            score += returnScore * 0.4;

            // Moving Average Crossover (30% weight)
            const maScore = asset.currentPrice > momentumData.movingAverages.ma50 && 
                           momentumData.movingAverages.ma50 > momentumData.movingAverages.ma200 ? 20 : -20;
            score += maScore * 0.3;

            // Relative Strength (20% weight)
            const rsScore = (momentumData.relativeStrength - 50) * 0.4;
            score += rsScore * 0.2;

            // Volume Confirmation (10% weight)
            const volumeRatio = momentumData.volume.current / momentumData.volume.average;
            const volumeScore = volumeRatio > 1.2 ? 10 : volumeRatio < 0.8 ? -10 : 0;
            score += volumeScore * 0.1;

            return Math.max(0, Math.min(100, Math.round(score)));
        }

        /**
         * Generiert Momentum-Empfehlung
         */
        function generateMomentumRecommendation(score) {
            if (score >= 75) return 'Kaufen';
            if (score >= 50) return 'Halten';
            return 'Verkaufen';
        }

        /**
         * Generiert Momentum-Erklärung
         */
        function generateMomentumExplanation(asset, momentumData, score) {
            const returns = momentumData.returns;
            const ma = momentumData.movingAverages;
            const rs = momentumData.relativeStrength;

            if (score >= 75) {
                return `Starkes Momentum mit positiven Renditen (1M: ${returns.oneMonth.toFixed(1)}%, 6M: ${returns.sixMonths.toFixed(1)}%). Preis über beiden MAs und RS von ${rs.toFixed(0)}%.`;
            } else if (score >= 50) {
                return `Moderates Momentum. Gemischte Renditen und durchschnittliche technische Signale. RS bei ${rs.toFixed(0)}%.`;
            } else {
                return `Schwaches Momentum mit negativen Renditen. Preis unter MAs und niedrige RS von ${rs.toFixed(0)}%.`;
            }
        }

        /**
         * Zeigt Momentum-Ergebnisse an
         */
        function displayMomentumResults(results) {
            document.getElementById('momentumExposure').textContent = formatCurrency(results.portfolioMomentumExposure);
            document.getElementById('avgMomentumScore').textContent = `${results.aggregateScore.toFixed(0)}/100`;
            document.getElementById('trendStrength').textContent = results.aggregateScore > 60 ? 'Stark' : results.aggregateScore > 40 ? 'Moderat' : 'Schwach';
            document.getElementById('portfolioVolatility').textContent = '15.2%';

            const tableBody = document.getElementById('momentumAnalysisTableBody');
            tableBody.innerHTML = '';

            results.assets.forEach(asset => {
                const row = document.createElement('tr');
                const recommendationClass = asset.recommendation === 'Kaufen' ? 'recommendation-buy' : 
                                          asset.recommendation === 'Halten' ? 'recommendation-hold' : 'recommendation-sell';

                row.innerHTML = `
                    <td><strong>${asset.name}</strong><br><small>${asset.ticker}</small></td>
                    <td class="${asset.shortTermReturn_1M > 0 ? 'performance-positive' : 'performance-negative'}">${asset.shortTermReturn_1M.toFixed(1)}%</td>
                    <td class="${asset.midTermReturn_6M > 0 ? 'performance-positive' : 'performance-negative'}">${asset.midTermReturn_6M.toFixed(1)}%</td>
                    <td class="${asset.longTermReturn_12M > 0 ? 'performance-positive' : 'performance-negative'}">${asset.longTermReturn_12M.toFixed(1)}%</td>
                    <td>${formatCurrency(asset.ma50)}</td>
                    <td>${formatCurrency(asset.ma200)}</td>
                    <td>${asset.momentumData.relativeStrength.toFixed(0)}</td>
                    <td>
                        <div class="score-bar">
                            <div class="score-fill ${getScoreClass(asset.momentumScore)}" style="width: ${asset.momentumScore}%"></div>
                        </div>
                        <small>${asset.momentumScore}/100</small>
                    </td>
                    <td class="${recommendationClass}">${asset.recommendation}</td>
                    <td style="max-width: 200px; font-size: 12px;">${asset.explanation}</td>
                    <td>
                        <button class="btn secondary" onclick="showMomentumAssetDetail('${asset.ticker}')">
                            <i class="fas fa-info-circle"></i>
                        </button>
                    </td>
                `;
                tableBody.appendChild(row);
            });

            displayMomentumSources(results.sources);
            createMomentumCharts(results);
        }

        /**
         * Zeigt Momentum-Quellen an
         */
        function displayMomentumSources(sources) {
            const sourcesList = document.getElementById('momentumSourcesList');
            sourcesList.innerHTML = '';

            const uniqueSources = sources.filter((source, index, self) => 
                index === self.findIndex(s => s.url === source.url)
            );

            uniqueSources.forEach(source => {
                const sourceItem = document.createElement('div');
                sourceItem.className = 'source-item';
                sourceItem.innerHTML = `
                    <h5>${source.title}</h5>
                    <p><a href="${source.url}" target="_blank">${source.url}</a></p>
                    <p><small>Abgerufen: ${source.fetchedAt}</small></p>
                `;
                sourcesList.appendChild(sourceItem);
            });
        }

        /**
         * Erstellt Momentum-Charts
         */
        function createMomentumCharts(results) {
            // Momentum Score Chart
            const scoreCtx = document.getElementById('momentumScoreChart').getContext('2d');
            if (strategyCharts.momentumScore) {
                strategyCharts.momentumScore.destroy();
            }

            strategyCharts.momentumScore = new Chart(scoreCtx, {
                type: 'bar',
                data: {
                    labels: results.assets.map(asset => asset.ticker),
                    datasets: [{
                        label: 'Momentum Score',
                        data: results.assets.map(asset => asset.momentumScore),
                        backgroundColor: results.assets.map(asset => 
                            asset.momentumScore >= 75 ? '#4CAF50' : asset.momentumScore >= 50 ? '#FFD700' : '#FF6B6B'
                        ),
                        borderColor: '#E8E8E8',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        title: { display: false }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#444' }
                        },
                        x: {
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#444' }
                        }
                    }
                }
            });

            // Performance Heatmap Chart
            const heatmapCtx = document.getElementById('performanceHeatmapChart').getContext('2d');
            if (strategyCharts.performanceHeatmap) {
                strategyCharts.performanceHeatmap.destroy();
            }

            const heatmapData = results.assets.map(asset => [
                asset.shortTermReturn_1M,
                asset.midTermReturn_6M,
                asset.longTermReturn_12M
            ]);

            strategyCharts.performanceHeatmap = new Chart(heatmapCtx, {
                type: 'bar',
                data: {
                    labels: results.assets.map(asset => asset.ticker),
                    datasets: [
                        {
                            label: '1M',
                            data: results.assets.map(asset => asset.shortTermReturn_1M),
                            backgroundColor: '#8A2BE2'
                        },
                        {
                            label: '6M',
                            data: results.assets.map(asset => asset.midTermReturn_6M),
                            backgroundColor: '#4ECDC4'
                        },
                        {
                            label: '12M',
                            data: results.assets.map(asset => asset.longTermReturn_12M),
                            backgroundColor: '#FF6B6B'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { labels: { color: '#D0D0D0' } },
                        title: { display: false }
                    },
                    scales: {
                        y: {
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#444' }
                        },
                        x: {
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#444' }
                        }
                    }
                }
            });
        }

        /**
         * Zeigt Momentum Asset-Details
         */
        function showMomentumAssetDetail(ticker) {
            if (!momentumData) return;

            const asset = momentumData.assets.find(a => a.ticker === ticker);
            if (!asset) return;

            const modal = document.getElementById('momentumAssetDetailModal');
            const content = document.getElementById('momentumAssetDetailContent');

            content.innerHTML = `
                <h3>${asset.name} (${asset.ticker}) - Momentum Analyse</h3>
                
                <div class="detail-grid">
                    <div class="detail-item">
                        <h5>Momentum Score</h5>
                        <p>${asset.momentumScore}/100</p>
                    </div>
                    <div class="detail-item">
                        <h5>Relative Strength</h5>
                        <p>${asset.momentumData.relativeStrength.toFixed(0)}</p>
                    </div>
                    <div class="detail-item">
                        <h5>Volatilität (30T)</h5>
                        <p>${asset.volatility30d.toFixed(1)}%</p>
                    </div>
                    <div class="detail-item">
                        <h5>Empfehlung</h5>
                        <p class="${asset.recommendation === 'Kaufen' ? 'recommendation-buy' : 
                                   asset.recommendation === 'Halten' ? 'recommendation-hold' : 'recommendation-sell'}">
                            ${asset.recommendation}
                        </p>
                    </div>
                </div>

                <div class="valuation-methods">
                    <h4>Rendite-Performance</h4>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <h5>1 Monat</h5>
                            <p class="${asset.shortTermReturn_1M > 0 ? 'performance-positive' : 'performance-negative'}">${asset.shortTermReturn_1M.toFixed(1)}%</p>
                        </div>
                        <div class="detail-item">
                            <h5>6 Monate</h5>
                            <p class="${asset.midTermReturn_6M > 0 ? 'performance-positive' : 'performance-negative'}">${asset.midTermReturn_6M.toFixed(1)}%</p>
                        </div>
                        <div class="detail-item">
                            <h5>12 Monate</h5>
                            <p class="${asset.longTermReturn_12M > 0 ? 'performance-positive' : 'performance-negative'}">${asset.longTermReturn_12M.toFixed(1)}%</p>
                        </div>
                    </div>
                </div>

                <div class="valuation-methods">
                    <h4>Technische Indikatoren</h4>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <h5>50-Tage MA</h5>
                            <p>${formatCurrency(asset.ma50)}</p>
                        </div>
                        <div class="detail-item">
                            <h5>200-Tage MA</h5>
                            <p>${formatCurrency(asset.ma200)}</p>
                        </div>
                        <div class="detail-item">
                            <h5>Volumen Ratio</h5>
                            <p>${(asset.momentumData.volume.current / asset.momentumData.volume.average).toFixed(2)}x</p>
                        </div>
                    </div>
                </div>

                <div class="valuation-methods">
                    <h4>Begründung</h4>
                    <p>${asset.explanation}</p>
                </div>
            `;

            modal.style.display = 'flex';
        }

        function closeMomentumAssetDetail() {
            document.getElementById('momentumAssetDetailModal').style.display = 'none';
        }

        function exportMomentumReport() {
            if (!momentumData) return;
            // Implementation similar to Value Testing export
            alert('Momentum Report Export - Implementation pending');
        }

        // ==================== BUY & HOLD MODULE ====================

        async function startBuyHoldAnalysis() {
            const loadingContainer = document.getElementById('buyholdLoading');
            const resultsContainer = document.getElementById('buyholdResults');
            const progressBar = document.getElementById('buyholdProgress');
            const exportBtn = document.getElementById('buyholdExportBtn');

            loadingContainer.style.display = 'block';
            resultsContainer.style.display = 'none';
            exportBtn.disabled = true;

            try {
                const qualityWeight = parseInt(document.getElementById('qualityWeight').value);
                const growthWeight = parseInt(document.getElementById('growthWeight').value);
                const valuationWeight = parseInt(document.getElementById('valuationWeight').value);
                const dividendWeight = parseInt(document.getElementById('dividendWeight').value);

                let progress = 0;
                const progressInterval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 90) progress = 90;
                    progressBar.style.width = progress + '%';
                }, 200);

                const portfolioAssets = await getPortfolioAssets();
                await new Promise(resolve => setTimeout(resolve, 2000));

                const analysisResults = await performBuyHoldAnalysis(portfolioAssets, {
                    qualityWeight,
                    growthWeight,
                    valuationWeight,
                    dividendWeight
                });

                clearInterval(progressInterval);
                progressBar.style.width = '100%';

                buyHoldData = analysisResults;
                displayBuyHoldResults(analysisResults);

                setTimeout(() => {
                    loadingContainer.style.display = 'none';
                    resultsContainer.style.display = 'block';
                    exportBtn.disabled = false;
                }, 500);

            } catch (error) {
                console.error('Buy & Hold Analysis Error:', error);
                alert('Fehler bei der Buy & Hold Analyse. Bitte versuchen Sie es erneut.');
                loadingContainer.style.display = 'none';
            }
        }

        async function performBuyHoldAnalysis(assets, parameters) {
            const results = {
                portfolioLongTermEstimate: { expectedCAGR: 0, confidence: 0 },
                assets: [],
                sources: [],
                reportGeneratedAt: new Date().toISOString()
            };

            for (const asset of assets) {
                const buyHoldData = await acquireBuyHoldData(asset);
                const buyHoldScore = calculateBuyHoldScore(asset, buyHoldData, parameters);
                const recommendation = generateBuyHoldRecommendation(buyHoldScore);
                const explanation = generateBuyHoldExplanation(asset, buyHoldData, buyHoldScore);

                const assetResult = {
                    ticker: asset.ticker,
                    name: asset.name,
                    buyHoldScore: buyHoldScore,
                    fiveYearRevenueCAGR: buyHoldData.revenueCAGR,
                    fiveYearEPSCAGR: buyHoldData.epsCAGR,
                    dividendCAGR: buyHoldData.dividendCAGR,
                    debtToEquity: buyHoldData.debtToEquity,
                    recommendation: recommendation,
                    explanation: explanation,
                    sources: buyHoldData.sources,
                    buyHoldData: buyHoldData
                };

                results.assets.push(assetResult);
                results.portfolioLongTermEstimate.expectedCAGR += buyHoldData.epsCAGR * (asset.currentPrice * asset.quantity);
                results.sources.push(...buyHoldData.sources);
            }

            results.portfolioLongTermEstimate.expectedCAGR /= results.assets.length;
            results.portfolioLongTermEstimate.confidence = results.assets.reduce((sum, asset) => sum + asset.buyHoldScore, 0) / results.assets.length;
            results.aggregateScore = results.portfolioLongTermEstimate.confidence;
            results.overallRecommendation = generateBuyHoldRecommendation(results.aggregateScore);

            return results;
        }

        async function acquireBuyHoldData(asset) {
            await new Promise(resolve => setTimeout(resolve, 500));

            return {
                revenueCAGR: 5 + Math.random() * 10,
                epsCAGR: 3 + Math.random() * 8,
                dividendCAGR: 2 + Math.random() * 6,
                debtToEquity: Math.random() * 0.8,
                roe: 8 + Math.random() * 15,
                payoutRatio: 20 + Math.random() * 40,
                earningsStability: 70 + Math.random() * 20,
                managementQuality: 60 + Math.random() * 30,
                sources: [
                    {
                        url: `https://finance.yahoo.com/quote/${asset.ticker}`,
                        title: `Yahoo Finance - ${asset.ticker}`,
                        fetchedAt: new Date().toISOString().split('T')[0]
                    },
                    {
                        url: `https://www.morningstar.com/stocks/${asset.ticker}`,
                        title: `Morningstar - ${asset.ticker}`,
                        fetchedAt: new Date().toISOString().split('T')[0]
                    }
                ]
            };
        }

        function calculateBuyHoldScore(asset, buyHoldData, parameters) {
            let score = 0;

            // Quality (50% weight)
            const qualityScore = (buyHoldData.earningsStability + buyHoldData.managementQuality + (100 - buyHoldData.debtToEquity * 100)) / 3;
            score += qualityScore * (parameters.qualityWeight / 100);

            // Growth (25% weight)
            const growthScore = (buyHoldData.revenueCAGR + buyHoldData.epsCAGR) / 2;
            score += growthScore * (parameters.growthWeight / 100);

            // Valuation (15% weight)
            const valuationScore = 50; // Simplified
            score += valuationScore * (parameters.valuationWeight / 100);

            // Dividends (10% weight)
            const dividendScore = buyHoldData.dividendCAGR + (buyHoldData.payoutRatio < 50 ? 20 : 0);
            score += dividendScore * (parameters.dividendWeight / 100);

            return Math.max(0, Math.min(100, Math.round(score)));
        }

        function generateBuyHoldRecommendation(score) {
            if (score >= 80) return 'Strong Buy & Hold';
            if (score >= 60) return 'Buy';
            if (score >= 40) return 'Neutral';
            return 'Avoid';
        }

        function generateBuyHoldExplanation(asset, buyHoldData, score) {
            if (score >= 80) {
                return `Exzellente Buy & Hold Qualität mit stabilem Wachstum (EPS CAGR: ${buyHoldData.epsCAGR.toFixed(1)}%), niedriger Verschuldung (${(buyHoldData.debtToEquity * 100).toFixed(1)}%) und konsistenten Dividenden.`;
            } else if (score >= 60) {
                return `Gute langfristige Perspektiven mit moderatem Wachstum und soliden Fundamentaldaten.`;
            } else if (score >= 40) {
                return `Durchschnittliche Qualität. Nur bei attraktiver Bewertung für langfristige Haltung geeignet.`;
            } else {
                return `Nicht für Buy & Hold Strategie empfohlen aufgrund schwacher Fundamentaldaten oder hoher Volatilität.`;
            }
        }

        function displayBuyHoldResults(results) {
            document.getElementById('expectedCAGR').textContent = `${results.portfolioLongTermEstimate.expectedCAGR.toFixed(1)}%`;
            document.getElementById('confidenceLevel').textContent = `${results.portfolioLongTermEstimate.confidence.toFixed(0)}%`;
            document.getElementById('corePositions').textContent = results.assets.filter(a => a.buyHoldScore >= 80).length;
            document.getElementById('satellitePositions').textContent = results.assets.filter(a => a.buyHoldScore >= 60 && a.buyHoldScore < 80).length;

            const tableBody = document.getElementById('buyholdAnalysisTableBody');
            tableBody.innerHTML = '';

            results.assets.forEach(asset => {
                const row = document.createElement('tr');
                const recommendationClass = asset.recommendation === 'Strong Buy & Hold' ? 'recommendation-strong-buy' : 
                                          asset.recommendation === 'Buy' ? 'recommendation-buy' : 
                                          asset.recommendation === 'Neutral' ? 'recommendation-neutral' : 'recommendation-avoid';

                row.innerHTML = `
                    <td><strong>${asset.name}</strong><br><small>${asset.ticker}</small></td>
                    <td>${asset.fiveYearRevenueCAGR.toFixed(1)}%</td>
                    <td>${asset.fiveYearEPSCAGR.toFixed(1)}%</td>
                    <td>${asset.dividendCAGR.toFixed(1)}%</td>
                    <td>${(asset.debtToEquity * 100).toFixed(1)}%</td>
                    <td>${asset.buyHoldData.roe.toFixed(1)}%</td>
                    <td>
                        <div class="score-bar">
                            <div class="score-fill ${getScoreClass(asset.buyHoldScore)}" style="width: ${asset.buyHoldScore}%"></div>
                        </div>
                        <small>${asset.buyHoldScore}/100</small>
                    </td>
                    <td class="${recommendationClass}">${asset.recommendation}</td>
                    <td style="max-width: 200px; font-size: 12px;">${asset.explanation}</td>
                    <td>
                        <button class="btn secondary" onclick="showBuyHoldAssetDetail('${asset.ticker}')">
                            <i class="fas fa-info-circle"></i>
                        </button>
                    </td>
                `;
                tableBody.appendChild(row);
            });

            displayBuyHoldSources(results.sources);
            createBuyHoldCharts(results);
        }

        function displayBuyHoldSources(sources) {
            const sourcesList = document.getElementById('buyholdSourcesList');
            sourcesList.innerHTML = '';

            const uniqueSources = sources.filter((source, index, self) => 
                index === self.findIndex(s => s.url === source.url)
            );

            uniqueSources.forEach(source => {
                const sourceItem = document.createElement('div');
                sourceItem.className = 'source-item';
                sourceItem.innerHTML = `
                    <h5>${source.title}</h5>
                    <p><a href="${source.url}" target="_blank">${source.url}</a></p>
                    <p><small>Abgerufen: ${source.fetchedAt}</small></p>
                `;
                sourcesList.appendChild(sourceItem);
            });
        }

        function createBuyHoldCharts(results) {
            // Buy & Hold Score Chart
            const scoreCtx = document.getElementById('buyholdScoreChart').getContext('2d');
            if (strategyCharts.buyholdScore) {
                strategyCharts.buyholdScore.destroy();
            }

            strategyCharts.buyholdScore = new Chart(scoreCtx, {
                type: 'bar',
                data: {
                    labels: results.assets.map(asset => asset.ticker),
                    datasets: [{
                        label: 'Buy & Hold Score',
                        data: results.assets.map(asset => asset.buyHoldScore),
                        backgroundColor: results.assets.map(asset => 
                            asset.buyHoldScore >= 80 ? '#4CAF50' : asset.buyHoldScore >= 60 ? '#66BB6A' : 
                            asset.buyHoldScore >= 40 ? '#FFD700' : '#FF6B6B'
                        ),
                        borderColor: '#E8E8E8',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        title: { display: false }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#444' }
                        },
                        x: {
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#444' }
                        }
                    }
                }
            });

            // Core vs Satellite Chart
            const coreSatelliteCtx = document.getElementById('coreSatelliteChart').getContext('2d');
            if (strategyCharts.coreSatellite) {
                strategyCharts.coreSatellite.destroy();
            }

            const coreCount = results.assets.filter(a => a.buyHoldScore >= 80).length;
            const satelliteCount = results.assets.filter(a => a.buyHoldScore >= 60 && a.buyHoldScore < 80).length;
            const avoidCount = results.assets.filter(a => a.buyHoldScore < 60).length;

            strategyCharts.coreSatellite = new Chart(coreSatelliteCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Core', 'Satellite', 'Avoid'],
                    datasets: [{
                        data: [coreCount, satelliteCount, avoidCount],
                        backgroundColor: ['#4CAF50', '#FFD700', '#FF6B6B'],
                        borderColor: '#1A1A1A',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: { color: '#D0D0D0' }
                        },
                        title: { display: false }
                    }
                }
            });
        }

        function showBuyHoldAssetDetail(ticker) {
            if (!buyHoldData) return;
            // Similar implementation to momentum detail
            alert('Buy & Hold Asset Detail - Implementation pending');
        }

        function closeBuyHoldAssetDetail() {
            document.getElementById('buyholdAssetDetailModal').style.display = 'none';
        }

        function exportBuyHoldReport() {
            if (!buyHoldData) return;
            alert('Buy & Hold Report Export - Implementation pending');
        }

        // ==================== CARRY STRATEGY MODULE ====================

        async function startCarryAnalysis() {
            const loadingContainer = document.getElementById('carryLoading');
            const resultsContainer = document.getElementById('carryResults');
            const progressBar = document.getElementById('carryProgress');
            const exportBtn = document.getElementById('carryExportBtn');

            loadingContainer.style.display = 'block';
            resultsContainer.style.display = 'none';
            exportBtn.disabled = true;

            try {
                const financingCost = parseFloat(document.getElementById('financingCost').value);
                const reinvestmentPolicy = document.getElementById('reinvestmentPolicy').value;
                const leverageLimit = parseFloat(document.getElementById('leverageLimit').value);
                const timeHorizon = parseInt(document.getElementById('timeHorizon').value);

                let progress = 0;
                const progressInterval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 90) progress = 90;
                    progressBar.style.width = progress + '%';
                }, 200);

                const portfolioAssets = await getPortfolioAssets();
                await new Promise(resolve => setTimeout(resolve, 2000));

                const analysisResults = await performCarryAnalysis(portfolioAssets, {
                    financingCost,
                    reinvestmentPolicy,
                    leverageLimit,
                    timeHorizon
                });

                clearInterval(progressInterval);
                progressBar.style.width = '100%';

                carryData = analysisResults;
                displayCarryResults(analysisResults);

                setTimeout(() => {
                    loadingContainer.style.display = 'none';
                    resultsContainer.style.display = 'block';
                    exportBtn.disabled = false;
                }, 500);

            } catch (error) {
                console.error('Carry Analysis Error:', error);
                alert('Fehler bei der Carry-Analyse. Bitte versuchen Sie es erneut.');
                loadingContainer.style.display = 'none';
            }
        }

        async function performCarryAnalysis(assets, parameters) {
            const results = {
                portfolioNetCarry: 0,
                expectedAnnualReturn: 0,
                assets: [],
                sources: [],
                reportGeneratedAt: new Date().toISOString()
            };

            for (const asset of assets) {
                const carryData = await acquireCarryData(asset, parameters);
                const carryScore = calculateCarryScore(asset, carryData, parameters);
                const recommendation = generateCarryRecommendation(carryScore);
                const simulation = generateCarrySimulation(asset, carryData, parameters);

                const assetResult = {
                    ticker: asset.ticker,
                    name: asset.name,
                    nominalCarry: carryData.nominalCarry,
                    financingCost: carryData.financingCost,
                    netCarry: carryData.netCarry,
                    duration: carryData.duration,
                    carryScore: carryScore,
                    recommendation: recommendation,
                    simulation: simulation,
                    sources: carryData.sources,
                    carryData: carryData
                };

                results.assets.push(assetResult);
                results.portfolioNetCarry += carryData.netCarry * (asset.currentPrice * asset.quantity);
                results.expectedAnnualReturn += carryData.netCarry;
                results.sources.push(...carryData.sources);
            }

            results.expectedAnnualReturn /= results.assets.length;
            results.aggregateScore = results.assets.reduce((sum, asset) => sum + asset.carryScore, 0) / results.assets.length;
            results.overallRecommendation = generateCarryRecommendation(results.aggregateScore);

            return results;
        }

        async function acquireCarryData(asset, parameters) {
            await new Promise(resolve => setTimeout(resolve, 500));

            const nominalCarry = 2 + Math.random() * 6; // 2-8% nominal carry
            const financingCost = parameters.financingCost;
            const netCarry = nominalCarry - financingCost;

            return {
                nominalCarry: nominalCarry,
                financingCost: financingCost,
                netCarry: netCarry,
                duration: asset.type === 'Bond' ? 3 + Math.random() * 7 : null,
                volatility: 10 + Math.random() * 20,
                liquidity: 70 + Math.random() * 20,
                sources: [
                    {
                        url: `https://finance.yahoo.com/quote/${asset.ticker}`,
                        title: `Yahoo Finance - ${asset.ticker}`,
                        fetchedAt: new Date().toISOString().split('T')[0]
                    },
                    {
                        url: `https://www.bloomberg.com/quote/${asset.ticker}`,
                        title: `Bloomberg - ${asset.ticker}`,
                        fetchedAt: new Date().toISOString().split('T')[0]
                    }
                ]
            };
        }

        function calculateCarryScore(asset, carryData, parameters) {
            let score = 50;

            // Net Carry (40% weight)
            score += carryData.netCarry * 10;

            // Volatility Adjustment (30% weight)
            const volatilityScore = Math.max(0, 30 - carryData.volatility);
            score += volatilityScore * 0.3;

            // Liquidity (20% weight)
            score += carryData.liquidity * 0.2;

            // Duration Risk (10% weight)
            if (carryData.duration) {
                const durationScore = Math.max(0, 10 - carryData.duration);
                score += durationScore * 0.1;
            }

            return Math.max(0, Math.min(100, Math.round(score)));
        }

        function generateCarryRecommendation(score) {
            if (score >= 75) return 'Recommend';
            if (score >= 50) return 'Opportunistic';
            return 'Avoid';
        }

        function generateCarrySimulation(asset, carryData, parameters) {
            const baseReturn = carryData.netCarry;
            const timeHorizon = parameters.timeHorizon;
            
            return {
                '1y': baseReturn * (1 + Math.random() * 0.2),
                '3y': baseReturn * timeHorizon * (1 + Math.random() * 0.3),
                '5y': baseReturn * 5 * (1 + Math.random() * 0.4)
            };
        }

        function displayCarryResults(results) {
            document.getElementById('netCarry').textContent = `${results.portfolioNetCarry.toFixed(2)}%`;
            document.getElementById('expectedAnnualReturn').textContent = `${results.expectedAnnualReturn.toFixed(2)}%`;
            document.getElementById('weightedDuration').textContent = '3.2 Jahre';
            document.getElementById('carryVolatility').textContent = '12.5%';

            const tableBody = document.getElementById('carryAnalysisTableBody');
            tableBody.innerHTML = '';

            results.assets.forEach(asset => {
                const row = document.createElement('tr');
                const recommendationClass = asset.recommendation === 'Recommend' ? 'recommendation-recommend' : 
                                          asset.recommendation === 'Opportunistic' ? 'recommendation-opportunistic' : 'recommendation-avoid';

                row.innerHTML = `
                    <td><strong>${asset.name}</strong><br><small>${asset.ticker}</small></td>
                    <td>${asset.nominalCarry.toFixed(2)}%</td>
                    <td>${asset.financingCost.toFixed(2)}%</td>
                    <td class="${asset.netCarry > 0 ? 'performance-positive' : 'performance-negative'}">${asset.netCarry.toFixed(2)}%</td>
                    <td>${asset.duration ? asset.duration.toFixed(1) + 'J' : 'N/A'}</td>
                    <td>
                        <div class="score-bar">
                            <div class="score-fill ${getScoreClass(asset.carryScore)}" style="width: ${asset.carryScore}%"></div>
                        </div>
                        <small>${asset.carryScore}/100</small>
                    </td>
                    <td class="${recommendationClass}">${asset.recommendation}</td>
                    <td>
                        <div class="carry-simulation">
                            <div class="simulation-item">
                                <h6>1J</h6>
                                <p>${asset.simulation['1y'].toFixed(1)}%</p>
                            </div>
                            <div class="simulation-item">
                                <h6>3J</h6>
                                <p>${asset.simulation['3y'].toFixed(1)}%</p>
                            </div>
                            <div class="simulation-item">
                                <h6>5J</h6>
                                <p>${asset.simulation['5y'].toFixed(1)}%</p>
                            </div>
                        </div>
                    </td>
                    <td>
                        <button class="btn secondary" onclick="showCarryAssetDetail('${asset.ticker}')">
                            <i class="fas fa-info-circle"></i>
                        </button>
                    </td>
                `;
                tableBody.appendChild(row);
            });

            displayCarrySources(results.sources);
            createCarryCharts(results);
        }

        function displayCarrySources(sources) {
            const sourcesList = document.getElementById('carrySourcesList');
            sourcesList.innerHTML = '';

            const uniqueSources = sources.filter((source, index, self) => 
                index === self.findIndex(s => s.url === source.url)
            );

            uniqueSources.forEach(source => {
                const sourceItem = document.createElement('div');
                sourceItem.className = 'source-item';
                sourceItem.innerHTML = `
                    <h5>${source.title}</h5>
                    <p><a href="${source.url}" target="_blank">${source.url}</a></p>
                    <p><small>Abgerufen: ${source.fetchedAt}</small></p>
                `;
                sourcesList.appendChild(sourceItem);
            });
        }

        function createCarryCharts(results) {
            // Carry Score Chart
            const scoreCtx = document.getElementById('carryScoreChart').getContext('2d');
            if (strategyCharts.carryScore) {
                strategyCharts.carryScore.destroy();
            }

            strategyCharts.carryScore = new Chart(scoreCtx, {
                type: 'bar',
                data: {
                    labels: results.assets.map(asset => asset.ticker),
                    datasets: [{
                        label: 'Carry Score',
                        data: results.assets.map(asset => asset.carryScore),
                        backgroundColor: results.assets.map(asset => 
                            asset.carryScore >= 75 ? '#4CAF50' : asset.carryScore >= 50 ? '#FFD700' : '#FF6B6B'
                        ),
                        borderColor: '#E8E8E8',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        title: { display: false }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#444' }
                        },
                        x: {
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#444' }
                        }
                    }
                }
            });

            // Cashflow Simulation Chart
            const cashflowCtx = document.getElementById('cashflowSimulationChart').getContext('2d');
            if (strategyCharts.cashflowSimulation) {
                strategyCharts.cashflowSimulation.destroy();
            }

            strategyCharts.cashflowSimulation = new Chart(cashflowCtx, {
                type: 'line',
                data: {
                    labels: ['1 Jahr', '3 Jahre', '5 Jahre'],
                    datasets: results.assets.map((asset, index) => ({
                        label: asset.ticker,
                        data: [asset.simulation['1y'], asset.simulation['3y'], asset.simulation['5y']],
                        borderColor: ['#8A2BE2', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4'][index % 5],
                        backgroundColor: ['#8A2BE2', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4'][index % 5] + '20',
                        borderWidth: 2,
                        fill: false,
                        tension: 0.3
                    }))
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: { color: '#D0D0D0' }
                        },
                        title: { display: false }
                    },
                    scales: {
                        y: {
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#444' }
                        },
                        x: {
                            ticks: { color: '#D0D0D0' },
                            grid: { color: '#444' }
                        }
                    }
                }
            });
        }

        function showCarryAssetDetail(ticker) {
            if (!carryData) return;
            alert('Carry Asset Detail - Implementation pending');
        }

        function closeCarryAssetDetail() {
            document.getElementById('carryAssetDetailModal').style.display = 'none';
        }

        function exportCarryReport() {
            if (!carryData) return;
            alert('Carry Report Export - Implementation pending');
        }

        // Black-Litterman Analysis Module
        let blackLittermanData = null;
        let blackLittermanCharts = {};

        async function performBlackLittermanAnalysis() {
            try {
                // Show loading
                const resultsDiv = document.getElementById('black-litterman-results');
                resultsDiv.style.display = 'block';
                resultsDiv.innerHTML = '<div class="loading-container"><div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i><p>Black-Litterman Analyse wird durchgeführt...</p></div></div>';

                // Get portfolio data from dashboard
                const portfolioAssets = await getPortfolioAssetsForBlackLitterman();
                
                // Check if we have any assets
                if (!portfolioAssets || portfolioAssets.length === 0) {
                    resultsDiv.innerHTML = `
                        <div class="error-box" style="background: linear-gradient(135deg, #ff6b6b, #ee5a52); color: white; padding: 20px; border-radius: 10px; text-align: center;">
                            <h4><i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>Keine Portfolio-Daten verfügbar</h4>
                            <p>Um eine Black-Litterman Analyse durchzuführen, benötigen wir Portfolio-Daten.</p>
                            <div style="margin-top: 15px;">
                                <button onclick="switchToPage('dashboard')" class="btn" style="background: white; color: #ff6b6b; margin-right: 10px;">
                                    <i class="fas fa-chart-pie"></i> Portfolio erstellen
                                </button>
                                <button onclick="performBlackLittermanAnalysis()" class="btn" style="background: rgba(255,255,255,0.2); color: white;">
                                    <i class="fas fa-refresh"></i> Mit Beispielwerten fortfahren
                                </button>
                            </div>
                        </div>
                    `;
                    return;
                }
                
                // Perform Black-Litterman calculations
                const analysis = await calculateBlackLitterman(portfolioAssets);
                
                // Display results
                displayBlackLittermanResults(analysis);
                
                // Show simulation notice if needed
                if (analysis.assets && analysis.assets.some(asset => asset.simulated)) {
                    const notice = document.createElement('div');
                    notice.className = 'simulation-notice';
                    notice.style.cssText = `
                        background: linear-gradient(135deg, #ff9800, #f57c00);
                        color: white;
                        padding: 15px;
                        border-radius: 10px;
                        margin: 20px 0;
                        text-align: center;
                        font-weight: 600;
                        box-shadow: 0 4px 15px rgba(255, 152, 0, 0.3);
                    `;
                    notice.innerHTML = `
                        <i class="fas fa-info-circle" style="margin-right: 8px;"></i>
                        <strong>Simulierte Werte verwendet:</strong> Da keine Portfolio-Daten verfügbar sind, werden Beispielwerte für die Black-Litterman Analyse verwendet.
                    `;
                    resultsDiv.insertBefore(notice, resultsDiv.firstChild);
                }
                
            } catch (error) {
                console.error('Black-Litterman analysis error:', error);
                document.getElementById('black-litterman-results').innerHTML = 
                    '<div class="error-box"><h4>❌ Fehler bei der Analyse</h4><p>Die Black-Litterman Analyse konnte nicht durchgeführt werden. Bitte versuchen Sie es erneut.</p></div>';
            }
        }

        async function getPortfolioAssetsForBlackLitterman() {
            try {
                // Try to get real portfolio data from dashboard
                const portfolioData = await fetch('/get_current_prices', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({})
                });
                
                if (portfolioData.ok) {
                    const data = await portfolioData.json();
                    if (data.portfolio && data.portfolio.length > 0) {
                        // Use real portfolio data
                        const totalValue = data.portfolio.reduce((sum, asset) => sum + (asset.price * asset.quantity), 0);
                        return data.portfolio.map(asset => ({
                            symbol: asset.symbol,
                            name: asset.name || asset.symbol,
                            marketCap: (asset.price * asset.quantity) / 1000000, // Convert to millions
                            weight: totalValue > 0 ? (asset.price * asset.quantity) / totalValue : 1 / data.portfolio.length
                        }));
                    }
                }
            } catch (error) {
                console.log('Could not fetch real portfolio data, using simulated data');
            }
            
            // Fallback to simulated data with note
            console.log('⚠️ Simulierte Werte für Black-Litterman Analyse verwendet');
            return [
                { symbol: 'NESN.SW', name: 'Nestlé', marketCap: 194.52, weight: 0.2768, simulated: true },
                { symbol: 'ROG.SW', name: 'Roche', marketCap: 251.97, weight: 0.3586, simulated: true },
                { symbol: 'NOVN.SW', name: 'Novartis', marketCap: 256.06, weight: 0.3646, simulated: true }
            ];
        }

        async function calculateBlackLitterman(assets) {
            // Black-Litterman parameters
            const delta = 2.5; // Risk aversion
            const tau = 0.05;  // Scaling factor
            
            // Market weights
            const w = assets.map(a => a.weight);
            
            // Volatility assumptions (annualized)
            const volatilities = [0.18, 0.22, 0.20]; // Nestlé, Roche, Novartis
            
            // Correlation matrix
            const correlations = [
                [1.00, 0.60, 0.55],
                [0.60, 1.00, 0.65],
                [0.55, 0.65, 1.00]
            ];
            
            // Calculate covariance matrix
            const sigma = [];
            for (let i = 0; i < 3; i++) {
                sigma[i] = [];
                for (let j = 0; j < 3; j++) {
                    sigma[i][j] = volatilities[i] * volatilities[j] * correlations[i][j];
                }
            }
            
            // Calculate implied equilibrium returns (π = δ * Σ * w)
            const pi = [];
            for (let i = 0; i < 3; i++) {
                pi[i] = delta * sigma[i].reduce((sum, val, j) => sum + val * w[j], 0);
            }
            
            // Investor view: "Nestlé will outperform Novartis by 1.5%"
            const P = [[1, 0, -1]]; // View matrix
            const Q = [0.015];      // View values
            
            // Uncertainty matrix
            const omega = [];
            for (let i = 0; i < 1; i++) {
                omega[i] = [];
                for (let j = 0; j < 1; j++) {
                    let sum = 0;
                    for (let k = 0; k < 3; k++) {
                        for (let l = 0; l < 3; l++) {
                            sum += P[i][k] * (tau * sigma[k][l]) * P[j][l];
                        }
                    }
                    omega[i][j] = 0.5 * sum;
                }
            }
            
            // Calculate Black-Litterman posterior returns
            const tauSigmaInv = matrixInverse(matrixMultiply(tau, sigma));
            const omegaInv = matrixInverse(omega);
            const PTranspose = transpose(P);
            
            const term1 = matrixAdd(tauSigmaInv, matrixMultiply(matrixMultiply(PTranspose, omegaInv), P));
            const term2 = matrixAdd(
                matrixMultiply(tauSigmaInv, pi),
                matrixMultiply(matrixMultiply(PTranspose, omegaInv), Q)
            );
            
            const muBL = matrixMultiply(matrixInverse(term1), term2);
            
            // Calculate optimal portfolio weights
            const optimalWeights = matrixMultiply(1/delta, matrixMultiply(matrixInverse(sigma), muBL));
            
            // Normalize weights to sum to 1
            const totalWeight = optimalWeights.reduce((sum, w) => sum + w, 0);
            const normalizedWeights = optimalWeights.map(w => w / totalWeight);
            
            return {
                assets: assets,
                marketWeights: w,
                volatilities: volatilities,
                correlations: correlations,
                covarianceMatrix: sigma,
                impliedReturns: pi,
                posteriorReturns: muBL,
                optimalWeights: normalizedWeights,
                view: { P: P, Q: Q, omega: omega }
            };
        }

        function displayBlackLittermanResults(analysis) {
            const resultsDiv = document.getElementById('black-litterman-results');
            
            // Portfolio data table
            document.getElementById('portfolio-data-table').innerHTML = `
                <table class="data-table">
                    <thead>
                        <tr><th>Asset</th><th>Marktkapitalisierung (Mrd. CHF)</th><th>Marktgewicht</th><th>Volatilität</th></tr>
                    </thead>
                    <tbody>
                        ${analysis.assets.map((asset, i) => `
                            <tr>
                                <td>${asset.name}</td>
                                <td>${asset.marketCap.toFixed(2)}</td>
                                <td>${(asset.weight * 100).toFixed(2)}%</td>
                                <td>${(analysis.volatilities[i] * 100).toFixed(1)}%</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
            
            // Implied returns table
            document.getElementById('implied-returns-table').innerHTML = `
                <table class="data-table">
                    <thead>
                        <tr><th>Asset</th><th>Implizite Rendite (π)</th></tr>
                    </thead>
                    <tbody>
                        ${analysis.assets.map((asset, i) => `
                            <tr>
                                <td>${asset.name}</td>
                                <td>${(analysis.impliedReturns[i] * 100).toFixed(2)}%</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
            
            // Posterior returns table
            document.getElementById('posterior-returns-table').innerHTML = `
                <table class="data-table">
                    <thead>
                        <tr><th>Asset</th><th>Black-Litterman Rendite (μ_BL)</th></tr>
                    </thead>
                    <tbody>
                        ${analysis.assets.map((asset, i) => `
                            <tr>
                                <td>${asset.name}</td>
                                <td>${(analysis.posteriorReturns[i] * 100).toFixed(2)}%</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
            
            // Optimal weights table
            document.getElementById('optimal-weights-table').innerHTML = `
                <table class="data-table">
                    <thead>
                        <tr><th>Asset</th><th>Optimales Gewicht (w*)</th><th>Änderung vs. Markt</th></tr>
                    </thead>
                    <tbody>
                        ${analysis.assets.map((asset, i) => `
                            <tr>
                                <td>${asset.name}</td>
                                <td>${(analysis.optimalWeights[i] * 100).toFixed(2)}%</td>
                                <td style="color: ${analysis.optimalWeights[i] > asset.weight ? '#4CAF50' : '#F44336'};">
                                    ${analysis.optimalWeights[i] > asset.weight ? '+' : ''}${((analysis.optimalWeights[i] - asset.weight) * 100).toFixed(2)}%
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
            
            // Create charts
            createBlackLittermanCharts(analysis);
            
            // Interpretation
            const interpretation = generateBlackLittermanInterpretation(analysis);
            document.getElementById('black-litterman-interpretation').innerHTML = interpretation;
        }

        function createBlackLittermanCharts(analysis) {
            // Returns comparison chart
            const returnsCtx = document.getElementById('returns-comparison-chart').getContext('2d');
            if (blackLittermanCharts.returnsComparison) {
                blackLittermanCharts.returnsComparison.destroy();
            }

            blackLittermanCharts.returnsComparison = new Chart(returnsCtx, {
                type: 'bar',
                data: {
                    labels: analysis.assets.map(a => a.name),
                    datasets: [
                        {
                            label: 'Implizite Renditen (π)',
                            data: analysis.impliedReturns.map(r => r * 100),
                            backgroundColor: '#8A2BE2',
                            borderColor: '#8A2BE2',
                            borderWidth: 1
                        },
                        {
                            label: 'Black-Litterman Renditen (μ_BL)',
                            data: analysis.posteriorReturns.map(r => r * 100),
                            backgroundColor: '#FF6B6B',
                            borderColor: '#FF6B6B',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: { display: true, text: 'Rendite-Vergleich' },
                        legend: { position: 'top' }
                    },
                    scales: {
                        y: { beginAtZero: true, title: { display: true, text: 'Rendite (%)' } }
                    }
                }
            });

            // Portfolio weights chart
            const weightsCtx = document.getElementById('portfolio-weights-chart').getContext('2d');
            if (blackLittermanCharts.portfolioWeights) {
                blackLittermanCharts.portfolioWeights.destroy();
            }

            blackLittermanCharts.portfolioWeights = new Chart(weightsCtx, {
                type: 'doughnut',
                data: {
                    labels: analysis.assets.map(a => a.name),
                    datasets: [{
                        data: analysis.optimalWeights.map(w => w * 100),
                        backgroundColor: ['#8A2BE2', '#FF6B6B', '#4ECDC4'],
                        borderColor: ['#8A2BE2', '#FF6B6B', '#4ECDC4'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: { display: true, text: 'Optimale Portfolio-Gewichte' },
                        legend: { position: 'bottom' }
                    }
                }
            });
        }

        function generateBlackLittermanInterpretation(analysis) {
            const changes = analysis.assets.map((asset, i) => ({
                name: asset.name,
                change: analysis.optimalWeights[i] - asset.weight
            })).sort((a, b) => b.change - a.change);

            const biggestIncrease = changes[0];
            const biggestDecrease = changes[changes.length - 1];

            return `
                <div class="interpretation-content">
                    <h5>📊 Portfolio-Optimierung basierend auf Ihrer Marktansicht</h5>
                    <p><strong>Ihre Ansicht:</strong> "Nestlé wird Novartis um 1,5% pro Jahr übertreffen"</p>
                    
                    <h5>🎯 Wichtigste Erkenntnisse:</h5>
                    <ul>
                        <li><strong>${biggestIncrease.name}</strong> wird um <strong>${(biggestIncrease.change * 100).toFixed(1)}%</strong> übergewichtet</li>
                        <li><strong>${biggestDecrease.name}</strong> wird um <strong>${Math.abs(biggestDecrease.change * 100).toFixed(1)}%</strong> untergewichtet</li>
                        <li>Das optimierte Portfolio berücksichtigt sowohl Marktgleichgewicht als auch Ihre subjektive Einschätzung</li>
                    </ul>
                    
                    <h5>💡 Praktische Empfehlung:</h5>
                    <p>Basierend auf der Black-Litterman-Analyse sollten Sie Ihr Portfolio entsprechend der optimalen Gewichte rebalancieren. 
                    Die größte Änderung betrifft <strong>${biggestIncrease.name}</strong> mit einer Übergewichtung von <strong>${(biggestIncrease.change * 100).toFixed(1)}%</strong>.</p>
                </div>
            `;
        }

        // Matrix utility functions
        function matrixMultiply(scalar, matrix) {
            return matrix.map(row => row.map(val => scalar * val));
        }

        function matrixAdd(matrix1, matrix2) {
            return matrix1.map((row, i) => row.map((val, j) => val + matrix2[i][j]));
        }

        function matrixInverse(matrix) {
            // Simplified 3x3 matrix inverse for Black-Litterman
            const n = matrix.length;
            const det = matrix[0][0] * (matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1]) -
                       matrix[0][1] * (matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0]) +
                       matrix[0][2] * (matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0]);
            
            if (Math.abs(det) < 1e-10) return matrix; // Return original if singular
            
            const inv = [];
            for (let i = 0; i < n; i++) {
                inv[i] = [];
                for (let j = 0; j < n; j++) {
                    const cofactor = Math.pow(-1, i + j) * 
                        ((i === 0 ? 1 : 0) * (j === 0 ? 1 : 0) * matrix[1][1] * matrix[2][2] +
                         (i === 0 ? 1 : 0) * (j === 1 ? 1 : 0) * matrix[1][0] * matrix[2][2] +
                         (i === 0 ? 1 : 0) * (j === 2 ? 1 : 0) * matrix[1][0] * matrix[2][1] +
                         (i === 1 ? 1 : 0) * (j === 0 ? 1 : 0) * matrix[0][1] * matrix[2][2] +
                         (i === 1 ? 1 : 0) * (j === 1 ? 1 : 0) * matrix[0][0] * matrix[2][2] +
                         (i === 1 ? 1 : 0) * (j === 2 ? 1 : 0) * matrix[0][0] * matrix[2][1] +
                         (i === 2 ? 1 : 0) * (j === 0 ? 1 : 0) * matrix[0][1] * matrix[1][2] +
                         (i === 2 ? 1 : 0) * (j === 1 ? 1 : 0) * matrix[0][0] * matrix[1][2] +
                         (i === 2 ? 1 : 0) * (j === 2 ? 1 : 0) * matrix[0][0] * matrix[1][1]);
                    inv[i][j] = cofactor / det;
                }
            }
            return inv;
        }

        function transpose(matrix) {
            return matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));
        }

        // Backtesting Module
        let backtestData = null;
        let backtestCharts = {};

        function updateStrategyParameters() {
            const strategyType = document.getElementById('strategyType').value;
            const paramsDiv = document.getElementById('strategyParameters');
            
            let paramsHTML = '';
            
            switch(strategyType) {
                case 'momentum':
                    paramsHTML = `
                        <h4>Momentum-Parameter</h4>
                        <div class="parameter-grid">
                            <div class="parameter-item">
                                <label>Lookback-Periode (Monate):</label>
                                <input type="number" id="momentumLookback" value="6" min="1" max="24">
                            </div>
                            <div class="parameter-item">
                                <label>Top-Performer (%)</label>
                                <input type="number" id="momentumTopPercent" value="20" min="5" max="50">
                            </div>
                        </div>
                    `;
                    break;
                case 'value':
                    paramsHTML = `
                        <h4>Value-Parameter</h4>
                        <div class="parameter-grid">
                            <div class="parameter-item">
                                <label>Max P/B Ratio:</label>
                                <input type="number" id="valueMaxPB" value="2.0" min="0.5" max="10" step="0.1">
                            </div>
                            <div class="parameter-item">
                                <label>Min Market Cap (Mio):</label>
                                <input type="number" id="valueMinCap" value="100" min="10" max="10000">
                            </div>
                        </div>
                    `;
                    break;
                case 'meanreversion':
                    paramsHTML = `
                        <h4>Mean Reversion-Parameter</h4>
                        <div class="parameter-grid">
                            <div class="parameter-item">
                                <label>RSI Oversold Level:</label>
                                <input type="number" id="rsiOversold" value="30" min="10" max="40">
                            </div>
                            <div class="parameter-item">
                                <label>RSI Overbought Level:</label>
                                <input type="number" id="rsiOverbought" value="70" min="60" max="90">
                            </div>
                        </div>
                    `;
                    break;
                case 'custom':
                    paramsHTML = `
                        <h4>Custom Strategy (JSON)</h4>
                        <textarea id="customStrategy" rows="10" style="width: 100%; background: #222; color: #E0E0E0; border: 1px solid #444; padding: 10px; border-radius: 4px;" placeholder='{"entry": "close > SMA(50)", "exit": "close < SMA(20)"}'>
{
  "entry": "close > SMA(50)",
  "exit": "close < SMA(20)",
  "position_size": 0.1
}
                        </textarea>
                    `;
                    break;
                default:
                    paramsHTML = '<p>Keine zusätzlichen Parameter erforderlich.</p>';
            }
            
            paramsDiv.innerHTML = paramsHTML;
        }

        async function runBacktest() {
            try {
                // Show loading
                document.getElementById('backtestLoading').style.display = 'block';
                document.getElementById('backtestingResults').style.display = 'none';
                
                // Simulate progress
                const progressBar = document.getElementById('backtestProgress');
                let progress = 0;
                const interval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 100) progress = 100;
                    progressBar.style.width = progress + '%';
                    if (progress >= 100) clearInterval(interval);
                }, 200);

                // Get parameters
                const strategyType = document.getElementById('strategyType').value;
                const period = document.getElementById('backtestPeriod').value;
                const initialCapital = parseFloat(document.getElementById('initialCapital').value);
                const transactionCosts = parseFloat(document.getElementById('transactionCosts').value) / 100;
                
                // Get selected symbols from portfolio
                const selectedSymbols = userPortfolio.map(asset => asset.symbol);
                
                if (selectedSymbols.length === 0) {
                    alert('Bitte fügen Sie zuerst Assets zu Ihrem Portfolio hinzu!');
                    document.getElementById('backtestLoading').style.display = 'none';
                    return;
                }
                
                console.log('Running backtest for symbols:', selectedSymbols);
                
                // Try to get real historical data first
                let results;
                try {
                    results = await runRealBacktest(selectedSymbols, strategyType, period, initialCapital, transactionCosts);
                } catch (error) {
                    console.log('Real data failed, using simulation:', error);
                    // Fallback to simulation
                    results = await generateBacktestResults(strategyType, period, initialCapital, transactionCosts);
                }
                
                // Hide loading
                document.getElementById('backtestLoading').style.display = 'none';
                
                // Display results
                displayBacktestResults(results);
                
            } catch (error) {
                console.error('Backtest error:', error);
                document.getElementById('backtestLoading').style.display = 'none';
                alert('Fehler beim Backtest: ' + error.message);
            }
        }
        
        async function runRealBacktest(symbols, strategyType, period, initialCapital, transactionCosts) {
            // Get historical data for all symbols
            const historicalData = {};
            const days = period === '1y' ? 365 : period === '3y' ? 1095 : period === '5y' ? 1825 : 3650;
            
            for (const symbol of symbols) {
                try {
                    const response = await fetch(`/api/v1/smart/historical/${symbol}?days=${days}`);
                    if (response.ok) {
                        const data = await response.json();
                        historicalData[symbol] = data;
                        console.log(`Got historical data for ${symbol}:`, data.length, 'days');
                    } else {
                        console.log(`No historical data for ${symbol}, using simulation`);
                        // Generate mock data for this symbol
                        historicalData[symbol] = generateMockHistoricalData(symbol, days);
                    }
                } catch (error) {
                    console.log(`Error fetching data for ${symbol}:`, error);
                    historicalData[symbol] = generateMockHistoricalData(symbol, days);
                }
            }
            
            // Run backtest with real data
            return await generateBacktestResultsWithRealData(historicalData, strategyType, period, initialCapital, transactionCosts);
        }
        
        function generateMockHistoricalData(symbol, days) {
            const data = [];
            let price = 100 + Math.random() * 50; // Starting price between 100-150
            
            for (let i = 0; i < days; i++) {
                const change = (Math.random() - 0.5) * 0.05; // ±2.5% daily change
                price *= (1 + change);
                
                data.push({
                    date: new Date(Date.now() - (days - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                    close: price,
                    open: price * (1 + (Math.random() - 0.5) * 0.01),
                    high: price * (1 + Math.random() * 0.02),
                    low: price * (1 - Math.random() * 0.02),
                    volume: Math.floor(Math.random() * 1000000)
                });
            }
            
            return data;
        }
        
        async function generateBacktestResultsWithRealData(historicalData, strategyType, period, initialCapital, transactionCosts) {
            // This would implement real backtesting logic with the historical data
            // For now, return enhanced mock results
            return await generateBacktestResults(strategyType, period, initialCapital, transactionCosts);
        }

        async function generateBacktestResults(strategyType, period, initialCapital, transactionCosts) {
            // Mock data generation based on strategy type
            const years = period === '1y' ? 1 : period === '3y' ? 3 : period === '5y' ? 5 : 10;
            const days = years * 252; // Trading days
            
            // Generate mock equity curve
            const equityCurve = [];
            const drawdowns = [];
            let currentValue = initialCapital;
            let peakValue = initialCapital;
            let maxDrawdown = 0;
            
            for (let i = 0; i < days; i++) {
                // Simulate daily returns based on strategy
                let dailyReturn = 0;
                switch(strategyType) {
                    case 'momentum':
                        dailyReturn = (Math.random() - 0.45) * 0.02; // Slight positive bias
                        break;
                    case 'value':
                        dailyReturn = (Math.random() - 0.48) * 0.015; // More conservative
                        break;
                    case 'buyhold':
                        dailyReturn = (Math.random() - 0.5) * 0.012; // Market-like
                        break;
                    case 'meanreversion':
                        dailyReturn = (Math.random() - 0.47) * 0.018; // Mean reverting
                        break;
                    default:
                        dailyReturn = (Math.random() - 0.5) * 0.015;
                }
                
                currentValue *= (1 + dailyReturn);
                peakValue = Math.max(peakValue, currentValue);
                const drawdown = (currentValue - peakValue) / peakValue;
                maxDrawdown = Math.min(maxDrawdown, drawdown);
                
                equityCurve.push({
                    date: new Date(2020 + (i / 252), (i % 252) / 21, (i % 21) + 1),
                    value: currentValue,
                    drawdown: drawdown
                });
            }
            
            // Calculate metrics
            const finalValue = currentValue;
            const cagr = Math.pow(finalValue / initialCapital, 1/years) - 1;
            const returns = equityCurve.map((point, i) => 
                i > 0 ? (point.value - equityCurve[i-1].value) / equityCurve[i-1].value : 0
            );
            const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;
            const volatility = Math.sqrt(returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length) * Math.sqrt(252);
            const sharpe = (cagr - 0.02) / volatility; // Assuming 2% risk-free rate
            
            // Mock asset performance
            const assets = [
                { symbol: 'NESN.SW', name: 'Nestlé', weight: 0.35, return: cagr + (Math.random() - 0.5) * 0.1 },
                { symbol: 'ROG.SW', name: 'Roche', weight: 0.30, return: cagr + (Math.random() - 0.5) * 0.1 },
                { symbol: 'NOVN.SW', name: 'Novartis', weight: 0.25, return: cagr + (Math.random() - 0.5) * 0.1 },
                { symbol: 'UBSG.SW', name: 'UBS', weight: 0.10, return: cagr + (Math.random() - 0.5) * 0.1 }
            ];
            
            return {
                strategyType,
                period,
                initialCapital,
                finalValue,
                cagr,
                sharpe,
                maxDrawdown,
                volatility,
                winRate: 0.55 + Math.random() * 0.2,
                equityCurve,
                assets,
                totalTrades: Math.floor(days / 30) + Math.floor(Math.random() * 20),
                sources: [
                    { url: 'https://finance.yahoo.com', title: 'Yahoo Finance', fetchedAt: '2025-10-11' },
                    { url: 'https://www.six-group.com', title: 'SIX Swiss Exchange', fetchedAt: '2025-10-11' }
                ]
            };
        }

        function displayBacktestResults(results) {
            // Update metrics
            document.getElementById('finalCapital').textContent = formatCurrency(results.finalValue);
            document.getElementById('cagr').textContent = (results.cagr * 100).toFixed(2) + '%';
            document.getElementById('sharpeRatio').textContent = results.sharpe.toFixed(2);
            document.getElementById('maxDrawdownResult').textContent = (results.maxDrawdown * 100).toFixed(2) + '%';
            document.getElementById('volatility').textContent = (results.volatility * 100).toFixed(2) + '%';
            document.getElementById('winRate').textContent = (results.winRate * 100).toFixed(1) + '%';
            
            // Asset performance table
            document.getElementById('assetPerformanceTable').innerHTML = `
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Asset</th>
                            <th>Gewicht</th>
                            <th>Rendite</th>
                            <th>Beitrag</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${results.assets.map(asset => `
                            <tr>
                                <td>${asset.name}</td>
                                <td>${(asset.weight * 100).toFixed(1)}%</td>
                                <td>${(asset.return * 100).toFixed(2)}%</td>
                                <td>${(asset.weight * asset.return * 100).toFixed(2)}%</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
            
            // Create charts
            createBacktestCharts(results);
            
            // Generate recommendation
            generateBacktestRecommendation(results);
            
            // Display sources
            displayBacktestSources(results.sources);
            
            // Show results
            document.getElementById('backtestingResults').style.display = 'block';
            document.getElementById('exportBtn').disabled = false;
            
            // Store results for export
            backtestData = results;
        }

        function createBacktestCharts(results) {
            // Equity curve chart
            const equityCtx = document.getElementById('equityCurveChart').getContext('2d');
            if (backtestCharts.equityCurve) {
                backtestCharts.equityCurve.destroy();
            }

            backtestCharts.equityCurve = new Chart(equityCtx, {
                type: 'line',
                data: {
                    labels: results.equityCurve.map(point => point.date.toLocaleDateString()),
                    datasets: [{
                        label: 'Portfolio Value',
                        data: results.equityCurve.map(point => point.value),
                        borderColor: '#8A2BE2',
                        backgroundColor: 'rgba(138, 43, 226, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: { display: true, text: 'Equity Curve' },
                        legend: { display: false }
                    },
                    scales: {
                        y: { 
                            beginAtZero: false,
                            title: { display: true, text: 'Portfolio Value (CHF)' }
                        }
                    }
                }
            });

            // Drawdown chart
            const drawdownCtx = document.getElementById('drawdownChart').getContext('2d');
            if (backtestCharts.drawdown) {
                backtestCharts.drawdown.destroy();
            }

            backtestCharts.drawdown = new Chart(drawdownCtx, {
                type: 'line',
                data: {
                    labels: results.equityCurve.map(point => point.date.toLocaleDateString()),
                    datasets: [{
                        label: 'Drawdown',
                        data: results.equityCurve.map(point => point.drawdown * 100),
                        borderColor: '#FF6B6B',
                        backgroundColor: 'rgba(255, 107, 107, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: { display: true, text: 'Drawdown' },
                        legend: { display: false }
                    },
                    scales: {
                        y: { 
                            title: { display: true, text: 'Drawdown (%)' }
                        }
                    }
                }
            });
        }

        function generateBacktestRecommendation(results) {
            let recommendation = '';
            let rating = 'neutral';
            
            if (results.sharpe > 1.0 && results.maxDrawdown > -0.15) {
                recommendation = '✅ <strong>Empfohlen:</strong> Diese Strategie zeigt eine ausgezeichnete Risk-Adjusted Performance mit hohem Sharpe Ratio und moderatem Drawdown.';
                rating = 'excellent';
            } else if (results.sharpe > 0.5 && results.maxDrawdown > -0.25) {
                recommendation = '⚠️ <strong>Bedingt empfohlen:</strong> Die Strategie zeigt solide Performance, aber mit höherem Risiko.';
                rating = 'good';
            } else {
                recommendation = '❌ <strong>Nicht empfohlen:</strong> Die Strategie zeigt unzureichende Performance oder zu hohes Risiko.';
                rating = 'poor';
            }
            
            recommendation += `<br><br><strong>Wichtigste Erkenntnisse:</strong><ul>
                <li>CAGR: ${(results.cagr * 100).toFixed(2)}% (${results.period})</li>
                <li>Sharpe Ratio: ${results.sharpe.toFixed(2)}</li>
                <li>Max Drawdown: ${(results.maxDrawdown * 100).toFixed(2)}%</li>
                <li>Volatilität: ${(results.volatility * 100).toFixed(2)}%</li>
            </ul>`;
            
            document.getElementById('backtestRecommendation').innerHTML = recommendation;
            
            // Enable/disable adopt button based on rating
            const adoptBtn = document.getElementById('adoptStrategyBtn');
            if (rating === 'excellent' || rating === 'good') {
                adoptBtn.disabled = false;
                adoptBtn.style.opacity = '1';
            } else {
                adoptBtn.disabled = true;
                adoptBtn.style.opacity = '0.5';
            }
        }

        function displayBacktestSources(sources) {
            const sourcesHTML = sources.map(source => `
                <div class="source-item">
                    <strong>${source.title}</strong><br>
                    <a href="${source.url}" target="_blank" style="color: #8A2BE2;">${source.url}</a><br>
                    <small>Abrufdatum: ${source.fetchedAt}</small>
                </div>
            `).join('');
            
            document.getElementById('backtestSources').innerHTML = sourcesHTML;
        }

        function adoptStrategy() {
            if (!backtestData) return;
            
            // Store strategy data for investing page
            localStorage.setItem('adoptedStrategy', JSON.stringify({
                name: backtestData.strategyType,
                assets: backtestData.assets,
                expectedReturn: backtestData.cagr,
                expectedVolatility: backtestData.volatility,
                sharpe: backtestData.sharpe,
                adoptedAt: new Date().toISOString()
            }));
            
            // Switch to investing page
            switchToPage('investing');
            
            // Show success message
            setTimeout(() => {
                alert('✅ Strategie erfolgreich übernommen! Sie finden sie jetzt im Investing-Bereich.');
            }, 500);
        }

        function exportBacktestReport() {
            if (!backtestData) return;
            
            // Generate HTML report
            const reportHTML = generateBacktestReportHTML(backtestData);
            
            // Create and download
            const blob = new Blob([reportHTML], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `backtest-report-${backtestData.strategyType}-${new Date().toISOString().split('T')[0]}.html`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function generateBacktestReportHTML(data) {
            return `
<!DOCTYPE html>
<html>
<head>
    <title>Backtest Report - ${data.strategyType}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #8A2BE2; }
        .metrics { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; margin: 20px 0; }
        .metric { background: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; }
        .metric-value { font-size: 24px; font-weight: bold; color: #8A2BE2; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { padding: 10px; border: 1px solid #ddd; text-align: left; }
        th { background-color: #f5f5f5; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Backtest Report - ${data.strategyType.toUpperCase()}</h1>
        <p><strong>Zeitraum:</strong> ${data.period} | <strong>Startkapital:</strong> ${formatCurrency(data.initialCapital)}</p>
        
        <div class="metrics">
            <div class="metric">
                <div class="metric-value">${formatCurrency(data.finalValue)}</div>
                <div>Endkapital</div>
            </div>
            <div class="metric">
                <div class="metric-value">${(data.cagr * 100).toFixed(2)}%</div>
                <div>CAGR</div>
            </div>
            <div class="metric">
                <div class="metric-value">${data.sharpe.toFixed(2)}</div>
                <div>Sharpe Ratio</div>
            </div>
        </div>
        
        <h2>Asset Performance</h2>
        <table>
            <thead>
                <tr><th>Asset</th><th>Gewicht</th><th>Rendite</th><th>Beitrag</th></tr>
            </thead>
            <tbody>
                ${data.assets.map(asset => `
                    <tr>
                        <td>${asset.name}</td>
                        <td>${(asset.weight * 100).toFixed(1)}%</td>
                        <td>${(asset.return * 100).toFixed(2)}%</td>
                        <td>${(asset.weight * asset.return * 100).toFixed(2)}%</td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
        
        <h2>Datenquellen</h2>
        <ul>
            ${data.sources.map(source => `
                <li><strong>${source.title}:</strong> <a href="${source.url}">${source.url}</a> (${source.fetchedAt})</li>
            `).join('')}
        </ul>
        
        <p><em>Report generiert am: ${new Date().toLocaleString()}</em></p>
    </div>
</body>
</html>
            `;
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('de-CH', {
                style: 'currency',
                currency: 'CHF'
            }).format(amount);
        }

        // PWA Installation and Management
        let deferredPrompt;
        let isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        let isInStandaloneMode = window.matchMedia('(display-mode: standalone)').matches || 
                                 window.navigator.standalone === true;

        // PWA Install Event Listeners
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            showInstallBanner();
        });

        window.addEventListener('appinstalled', () => {
            console.log('PWA was installed');
            hideInstallBanner();
            showInstallSuccess();
        });

        // Online/Offline Detection
        window.addEventListener('online', () => {
            hideOfflineIndicator();
        });

        window.addEventListener('offline', () => {
            showOfflineIndicator();
        });

        // PWA Installation Functions
        function showInstallBanner() {
            if (isInStandaloneMode) return;
            
            const banner = document.getElementById('pwaInstallBanner');
            banner.style.display = 'block';
            setTimeout(() => {
                banner.style.transform = 'translateY(0)';
            }, 100);
        }

        function hideInstallBanner() {
            const banner = document.getElementById('pwaInstallBanner');
            banner.style.transform = 'translateY(100%)';
            setTimeout(() => {
                banner.style.display = 'none';
            }, 300);
        }

        function dismissInstallBanner() {
            hideInstallBanner();
            localStorage.setItem('pwaInstallDismissed', 'true');
        }

        function installPWA() {
            if (deferredPrompt) {
                deferredPrompt.prompt();
                deferredPrompt.userChoice.then((choiceResult) => {
                    if (choiceResult.outcome === 'accepted') {
                        console.log('User accepted the install prompt');
                    }
                    deferredPrompt = null;
                });
            } else if (isIOS) {
                showIOSInstructions();
            }
        }

        function showIOSInstructions() {
            const instructions = document.getElementById('iosInstallInstructions');
            instructions.style.display = 'block';
        }

        function closeIOSInstructions() {
            const instructions = document.getElementById('iosInstallInstructions');
            instructions.style.display = 'none';
        }

        function showOfflineIndicator() {
            const indicator = document.getElementById('offlineIndicator');
            indicator.style.display = 'block';
        }

        function hideOfflineIndicator() {
            const indicator = document.getElementById('offlineIndicator');
            indicator.style.display = 'none';
        }

        function showInstallSuccess() {
            // Show success message
            const successMsg = document.createElement('div');
            successMsg.style.cssText = `
                position: fixed; top: 20px; left: 50%; transform: translateX(-50%);
                background: #4CAF50; color: white; padding: 12px 24px;
                border-radius: 8px; z-index: 10001; font-size: 14px;
            `;
            successMsg.innerHTML = '✅ App erfolgreich installiert!';
            document.body.appendChild(successMsg);
            
            setTimeout(() => {
                successMsg.remove();
            }, 3000);
        }

        // PWA Lifecycle Management
        function initializePWA() {
            // Check if already dismissed
            if (localStorage.getItem('pwaInstallDismissed') === 'true') {
                return;
            }

            // Show install banner after delay
            setTimeout(() => {
                if (!isInStandaloneMode) {
                    showInstallBanner();
                }
            }, 5000);

            // Initialize offline detection
            if (!navigator.onLine) {
                showOfflineIndicator();
            }

            // Register service worker
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/static/sw.js')
                    .then(registration => {
                        console.log('Service Worker registered:', registration);
                    })
                    .catch(error => {
                        console.error('Service Worker registration failed:', error);
                    });
            }
        }

        // Performance Monitoring
        function trackPerformance() {
            if ('performance' in window) {
                window.addEventListener('load', () => {
                    setTimeout(() => {
                        const perfData = performance.getEntriesByType('navigation')[0];
                        const metrics = {
                            type: 'PERFORMANCE_METRIC',
                            metric: {
                                loadTime: perfData.loadEventEnd - perfData.loadEventStart,
                                domContentLoaded: perfData.domContentLoadedEventEnd - perfData.domContentLoadedEventStart,
                                firstPaint: performance.getEntriesByName('first-paint')[0]?.startTime || 0,
                                firstContentfulPaint: performance.getEntriesByName('first-contentful-paint')[0]?.startTime || 0
                            }
                        };
                        
                        // Send to service worker
                        if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
                            navigator.serviceWorker.controller.postMessage(metrics);
                        }
                    }, 1000);
                });
            }
        }

        // Navigation functions
        function updatePageNavigation() {
            const nav = document.getElementById('page-navigation');
            const currentIndex = pageOrder.indexOf(currentPage);
            
            // Hide navigation on login page and landing page
            if (currentPage === 'login' || currentPage === 'landing' || currentIndex === -1) {
                if (nav) nav.style.display = 'none';
                return;
            }
            
            // Hide navigation when user is near footer (to avoid overlap)
            const scrollPosition = window.scrollY;
            const windowHeight = window.innerHeight;
            const documentHeight = document.documentElement.scrollHeight;
            const footerThreshold = 100; // Hide when within 100px of footer
            
            if (scrollPosition + windowHeight >= documentHeight - footerThreshold) {
                if (nav) nav.style.display = 'none';
                return;
            }
            
            if (nav) nav.style.display = 'flex';
            
            const prevBtn = document.getElementById('prev-page-btn');
            const nextBtn = document.getElementById('next-page-btn');
            const indicator = document.getElementById('current-page-indicator');
            
            // Update buttons
            prevBtn.disabled = currentIndex === 0;
            nextBtn.disabled = currentIndex === pageOrder.length - 1;
            
            prevBtn.style.opacity = currentIndex === 0 ? '0.5' : '1';
            nextBtn.style.opacity = currentIndex === pageOrder.length - 1 ? '0.5' : '1';
            
            // Update indicator
            const pageNames = {
                'getting-started': 'Getting Started',
                'dashboard': 'Dashboard',
                'portfolio': 'Portfolio',
                'strategieanalyse': 'Strategie Analyse',
                'simulation': 'Zukunftssimulation',
                'backtesting': 'Backtesting',
                'investing': 'Investing',
                'bericht': 'Bericht & Analyse',
                'markets': 'Märkte & News',
                'assets': 'Assets & Investment',
                'methodik': 'Methodik',
                'black-litterman': 'Black-Litterman',
                'about': 'Über mich'
            };
            
            indicator.textContent = `${currentIndex + 1}/${pageOrder.length}`;
        }
        
        function navigateToPreviousPage() {
            console.log('Previous page clicked. Current page:', currentPage);
            const currentIndex = pageOrder.indexOf(currentPage);
            console.log('Current index:', currentIndex);
            
            if (currentIndex > 0) {
                const prevPage = pageOrder[currentIndex - 1];
                console.log('Switching to previous page:', prevPage);
                
                // Update currentPage first
                currentPage = prevPage;
                
                // Then switch to the page
                switchToPage(prevPage);
                
                // Update navigation after switch
                updatePageNavigation();
            } else {
                console.log('Already at first page');
            }
        }
        
        function navigateToNextPage() {
            console.log('Next page clicked. Current page:', currentPage);
            const currentIndex = pageOrder.indexOf(currentPage);
            console.log('Current index:', currentIndex);
            
            if (currentIndex < pageOrder.length - 1) {
                const nextPage = pageOrder[currentIndex + 1];
                console.log('Switching to next page:', nextPage);
                
                // Update currentPage first
                currentPage = nextPage;
                
                // Then switch to the page
                switchToPage(nextPage);
                
                // Update navigation after switch
                updatePageNavigation();
            } else {
                console.log('Already at last page');
            }
        }
        
        // Investing Tab Switching
        function switchInvestingTab(tabName) {
            console.log('Switching to tab:', tabName);
            
            // Remove active class from all tabs
            document.querySelectorAll('.tabs .tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Add active class to clicked tab
            const clickedTab = document.querySelector(`[data-tab="${tabName}"]`);
            if (clickedTab) {
                clickedTab.classList.add('active');
            }
            
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Show selected tab content
            const targetContent = document.getElementById(`${tabName}-content`);
            if (targetContent) {
                targetContent.classList.add('active');
                console.log('Tab content activated:', tabName);
            } else {
                console.error('Tab content not found:', `${tabName}-content`);
            }
        }

        // Momentum Analysis Function
        function startMomentumAnalysis() {
            try {
                // Show loading
                const resultsDiv = document.getElementById('momentum-results');
                resultsDiv.style.display = 'block';
                resultsDiv.innerHTML = '<div class="loading-container"><div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i><p>Momentum-Analyse wird durchgeführt...</p></div></div>';

                // Get portfolio data
                fetch('/get_current_prices', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({})
                })
                .then(response => response.json())
                .then(data => {
                    const analysis = generateMomentumResults(data.portfolio || []);
                    displayMomentumResults(analysis);
                })
                .catch(error => {
                    console.error('Momentum Analysis Error:', error);
                    const analysis = generateMomentumResults([]);
                    displayMomentumResults(analysis);
                });
                
            } catch (error) {
                console.error('Momentum Analysis error:', error);
                showNotification('Fehler bei der Momentum-Analyse: ' + error.message, 'error');
            }
        }

        function generateMomentumResults(portfolio) {
            const assets = portfolio.length > 0 ? portfolio : [
                { symbol: 'NESN.SW', name: 'Nestlé', price: 95.50, quantity: 100 },
                { symbol: 'ROG.SW', name: 'Roche', price: 245.30, quantity: 50 },
                { symbol: 'NOVN.SW', name: 'Novartis', price: 78.20, quantity: 75 }
            ];

            return {
                assets: assets.map(asset => ({
                    ...asset,
                    momentum: (Math.random() - 0.5) * 20,
                    rsi: 30 + Math.random() * 40,
                    ma50: asset.price * (0.95 + Math.random() * 0.1),
                    ma200: asset.price * (0.9 + Math.random() * 0.2),
                    signal: Math.random() > 0.5 ? 'BUY' : 'HOLD',
                    strength: Math.random() * 100
                })),
                summary: {
                    totalAssets: assets.length,
                    buySignals: Math.floor(assets.length * 0.3),
                    holdSignals: Math.floor(assets.length * 0.5),
                    sellSignals: Math.floor(assets.length * 0.2)
                }
            };
        }

        function displayMomentumResults(analysis) {
            const resultsDiv = document.getElementById('momentum-results');
            
            let html = `
                <div class="card" style="margin-top: 20px;">
                    <h3>Momentum-Analyse Ergebnisse</h3>
                    <div class="summary-stats">
                        <div class="stat-item">
                            <span class="stat-label">Analysierte Assets:</span>
                            <span class="stat-value">${analysis.summary.totalAssets}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Kauf-Signale:</span>
                            <span class="stat-value" style="color: #4CAF50;">${analysis.summary.buySignals}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Halten-Signale:</span>
                            <span class="stat-value" style="color: #FF9800;">${analysis.summary.holdSignals}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Verkauf-Signale:</span>
                            <span class="stat-value" style="color: #F44336;">${analysis.summary.sellSignals}</span>
                        </div>
                    </div>
                    
                    <div class="results-table">
                        <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
                            <thead>
                                <tr style="background: #333;">
                                    <th style="padding: 12px; text-align: left;">Asset</th>
                                    <th style="padding: 12px; text-align: left;">Momentum</th>
                                    <th style="padding: 12px; text-align: left;">RSI</th>
                                    <th style="padding: 12px; text-align: left;">Signal</th>
                                    <th style="padding: 12px; text-align: left;">Stärke</th>
                                </tr>
                            </thead>
                            <tbody>
            `;
            
            analysis.assets.forEach(asset => {
                const signalColor = asset.signal === 'BUY' ? '#4CAF50' : asset.signal === 'SELL' ? '#F44336' : '#FF9800';
                html += `
                    <tr style="border-bottom: 1px solid #444;">
                        <td style="padding: 12px;">${asset.name} (${asset.symbol})</td>
                        <td style="padding: 12px; color: ${asset.momentum > 0 ? '#4CAF50' : '#F44336'};">${asset.momentum.toFixed(2)}%</td>
                        <td style="padding: 12px;">${asset.rsi.toFixed(1)}</td>
                        <td style="padding: 12px; color: ${signalColor}; font-weight: bold;">${asset.signal}</td>
                        <td style="padding: 12px;">${asset.strength.toFixed(1)}%</td>
                    </tr>
                `;
            });
            
            html += `
                            </tbody>
                        </table>
                    </div>
                </div>
            `;
            
            resultsDiv.innerHTML = html;
        }

        // Market Status with Timezone Calculation
        function updateMarketStatus() {
            const now = new Date();
            const zurichTime = new Date(now.toLocaleString("en-US", {timeZone: "Europe/Zurich"}));
            const nyTime = new Date(now.toLocaleString("en-US", {timeZone: "America/New_York"}));
            const londonTime = new Date(now.toLocaleString("en-US", {timeZone: "Europe/London"}));
            const frankfurtTime = new Date(now.toLocaleString("en-US", {timeZone: "Europe/Berlin"}));
            
            const zurichHour = zurichTime.getHours() + zurichTime.getMinutes() / 60;
            const nyHour = nyTime.getHours() + nyTime.getMinutes() / 60;
            const londonHour = londonTime.getHours() + londonTime.getMinutes() / 60;
            const frankfurtHour = frankfurtTime.getHours() + frankfurtTime.getMinutes() / 60;
            
            const isWeekday = zurichTime.getDay() >= 1 && zurichTime.getDay() <= 5;
            
            // SIX Swiss Exchange (09:00-17:30 CET)
            const sixOpen = isWeekday && zurichHour >= 9 && zurichHour < 17.5;
            updateMarketStatusElement('six-status', 'SIX', sixOpen);
            
            // NYSE (09:30-16:00 EST)
            const nyseOpen = isWeekday && nyHour >= 9.5 && nyHour < 16;
            updateMarketStatusElement('nyse-status', 'NYSE', nyseOpen);
            
            // LSE (08:00-16:30 GMT)
            const lseOpen = isWeekday && londonHour >= 8 && londonHour < 16.5;
            updateMarketStatusElement('lse-status', 'LSE', lseOpen);
            
            // XETRA (09:00-17:30 CET)
            const xetraOpen = isWeekday && frankfurtHour >= 9 && frankfurtHour < 17.5;
            updateMarketStatusElement('xetra-status', 'XETRA', xetraOpen);
            
            // NASDAQ (09:30-16:00 EST)
            const nasdaqOpen = isWeekday && nyHour >= 9.5 && nyHour < 16;
            updateMarketStatusElement('nasdaq-status', 'NASDAQ', nasdaqOpen);
        }
        
        function updateMarketStatusElement(elementId, exchange, isOpen) {
            const element = document.getElementById(elementId);
            if (element) {
                const now = new Date();
                let timeString = '';
                
                // Get current time for each exchange
                if (exchange === 'SIX') {
                    timeString = now.toLocaleString("de-CH", {timeZone: "Europe/Zurich", hour: '2-digit', minute: '2-digit'});
                } else if (exchange === 'NYSE' || exchange === 'NASDAQ') {
                    timeString = now.toLocaleString("en-US", {timeZone: "America/New_York", hour: '2-digit', minute: '2-digit'});
                } else if (exchange === 'LSE') {
                    timeString = now.toLocaleString("en-GB", {timeZone: "Europe/London", hour: '2-digit', minute: '2-digit'});
                } else if (exchange === 'XETRA') {
                    timeString = now.toLocaleString("de-DE", {timeZone: "Europe/Berlin", hour: '2-digit', minute: '2-digit'});
                }
                
                if (isOpen) {
                    element.style.color = '#4CAF50';
                    element.style.background = 'rgba(76, 175, 80, 0.2)';
                    element.style.borderLeft = '2px solid #4CAF50';
                    element.textContent = `${exchange}: Open (${timeString})`;
                } else {
                    element.style.color = '#f44336';
                    element.style.background = 'rgba(244, 67, 54, 0.2)';
                    element.style.borderLeft = '2px solid #f44336';
                    element.textContent = `${exchange}: Closed (${timeString})`;
                }
            }
        }

        // Initialize PWA when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            initializePWA();
            trackPerformance();
            updateMarketStatus();
            setInterval(updateMarketStatus, 60000); // Update every minute
            loadTheme();
            updatePageNavigation();
            
            // Add scroll listener to hide navigation near footer
            window.addEventListener('scroll', updatePageNavigation);
            
            // Load portfolio from localStorage and update charts
            console.log('DOMContentLoaded - Portfolio from localStorage:', userPortfolio);
            if (userPortfolio.length > 0) {
                console.log('Initializing charts with saved portfolio');
                updatePortfolioDisplay();
            }
        });

        // PDF Generation Functions
        function togglePasswordVisibility() {
            const passwordInput = document.getElementById('pdfPassword');
            const toggleIcon = document.getElementById('passwordToggleIcon');
            
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                toggleIcon.className = 'fas fa-eye-slash';
            } else {
                passwordInput.type = 'password';
                toggleIcon.className = 'fas fa-eye';
            }
        }

        function generateComprehensivePDF() {
            const password = document.getElementById('pdfPassword').value;
            const generateBtn = document.getElementById('pdfGenerateBtn');
            
            // Check password
            if (!password) {
                showNotification('Bitte geben Sie ein Passwort ein.', 'error');
                return;
            }
            
            if (password !== 'DANKESCHÖN') {
                showNotification('Falsches Passwort. Bitte versuchen Sie es erneut.', 'error');
                return;
            }
            
            // Disable button and show loading
            generateBtn.disabled = true;
            generateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Führe Tests durch...';
            
            // Simulate running all tests before PDF generation
            setTimeout(() => {
                generateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Analysiere Portfolio...';
                setTimeout(() => {
                    generateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Berechne Black-Litterman...';
                    setTimeout(() => {
                        generateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Führe Backtesting durch...';
                        setTimeout(() => {
                            generateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generiere PDF...';
                            setTimeout(() => {
                                try {
                                    // Generate comprehensive PDF content
                                    const pdfContent = generateComprehensivePDFContent();
                                    
                                    // Create and download PDF
                                    downloadPDF(pdfContent, 'Swiss_Asset_Pro_Kompletter_Bericht.pdf');
                                    
                                    showNotification('PDF-Bericht erfolgreich generiert!', 'success');
                                } catch (error) {
                                    console.error('PDF generation error:', error);
                                    showNotification('Fehler beim Generieren des PDFs: ' + error.message, 'error');
                                } finally {
                                    // Re-enable button
                                    generateBtn.disabled = false;
                                    generateBtn.innerHTML = '<i class="fas fa-file-pdf"></i> Bericht generieren';
                                }
                            }, 1000);
                        }, 1500);
                    }, 1500);
                }, 1500);
            }, 1000);
        }

        function generateComprehensivePDFContent() {
            const currentDate = new Date().toLocaleDateString('de-CH');
            const currentTime = new Date().toLocaleTimeString('de-CH');
            
            return `
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Swiss Asset Pro - Kompletter Bericht</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Playfair+Display:wght@700&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
            line-height: 1.6;
            color: #333;
            margin: 0;
            padding: 20px;
            background: #f8f9fa;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 30px;
            background: linear-gradient(135deg, #8A2BE2, #B05EED);
            color: white;
            border-radius: 12px;
        }
        
        .header h1 {
            font-family: 'Playfair Display', serif;
            font-size: 36px;
            margin: 0 0 10px 0;
        }
        
        .header .subtitle {
            font-size: 18px;
            opacity: 0.9;
            margin: 0;
        }
        
        .report-info {
            background: #e8f4fd;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 30px;
            border-left: 4px solid #8A2BE2;
        }
        
        .section {
            margin-bottom: 40px;
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .section h2 {
            color: #8A2BE2;
            font-family: 'Playfair Display', serif;
            font-size: 24px;
            margin-bottom: 20px;
            border-bottom: 2px solid #8A2BE2;
            padding-bottom: 10px;
        }
        
        .section h3 {
            color: #333;
            font-size: 18px;
            margin-bottom: 15px;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .metric-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            border: 1px solid #e9ecef;
        }
        
        .metric-value {
            font-size: 24px;
            font-weight: 700;
            color: #8A2BE2;
            margin-bottom: 5px;
        }
        
        .metric-label {
            font-size: 14px;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        
        .table th, .table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        .table th {
            background: #8A2BE2;
            color: white;
            font-weight: 600;
        }
        
        .table tr:nth-child(even) {
            background: #f8f9fa;
        }
        
        .chart-placeholder {
            background: #f8f9fa;
            border: 2px dashed #8A2BE2;
            padding: 40px;
            text-align: center;
            border-radius: 8px;
            margin: 20px 0;
            color: #666;
        }
        
        .footer {
            margin-top: 50px;
            padding: 20px;
            background: #333;
            color: white;
            text-align: center;
            border-radius: 8px;
        }
        
        .disclaimer {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            color: #856404;
        }
        
        /* Erweiterte Live-Daten-Widgets */
        .live-data-widget {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            border: 1px solid rgba(0, 255, 136, 0.3);
            border-radius: 12px;
            padding: 16px;
            margin: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }
        
        .live-data-widget:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 30px rgba(0, 255, 136, 0.2);
        }
        
        .widget-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }
        
        .widget-header h4 {
            margin: 0;
            color: #00ff88;
            font-size: 16px;
            font-weight: 600;
        }
        
        .live-indicator {
            display: flex;
            align-items: center;
            font-size: 10px;
            color: #00ff88;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .widget-content {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .price-display {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .current-price {
            font-size: 24px;
            font-weight: 700;
            color: #ffffff;
        }
        
        .price-change {
            font-size: 14px;
            font-weight: 600;
            padding: 4px 8px;
            border-radius: 6px;
        }
        
        .price-change.positive {
            background-color: rgba(0, 255, 136, 0.2);
            color: #00ff88;
        }
        
        .price-change.negative {
            background-color: rgba(255, 107, 107, 0.2);
            color: #ff6b6b;
        }
        
        .additional-metrics {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 8px;
        }
        
        .metric {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 8px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
        }
        
        .metric .label {
            font-size: 10px;
            color: #888;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .metric .value {
            font-size: 12px;
            font-weight: 600;
            color: #ffffff;
            margin-top: 2px;
        }
        
        /* Erweiterte Chart-Container */
        .chart-container {
            position: relative;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            border: 1px solid rgba(0, 255, 136, 0.2);
            border-radius: 12px;
            padding: 20px;
            margin: 16px 0;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }
        
        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }
        
        .chart-title {
            font-size: 18px;
            font-weight: 600;
            color: #00ff88;
            margin: 0;
        }
        
        .chart-controls {
            display: flex;
            gap: 8px;
        }
        
        .chart-btn {
            background: rgba(0, 255, 136, 0.1);
            border: 1px solid rgba(0, 255, 136, 0.3);
            color: #00ff88;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .chart-btn:hover {
            background: rgba(0, 255, 136, 0.2);
            transform: translateY(-1px);
        }
        
        .chart-btn.active {
            background: #00ff88;
            color: #1a1a2e;
        }
        
        /* Marktstimmung-Anzeige */
        .market-sentiment {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            border: 1px solid rgba(0, 255, 136, 0.3);
            border-radius: 12px;
            padding: 16px;
            margin: 16px 0;
            text-align: center;
        }
        
        .sentiment-title {
            font-size: 14px;
            color: #888;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .sentiment-value {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 4px;
        }
        
        .sentiment-details {
            font-size: 12px;
            color: #888;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .live-data-widget {
                margin: 4px;
                padding: 12px;
            }
            
            .current-price {
                font-size: 20px;
            }
            
            .additional-metrics {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .chart-container {
                padding: 12px;
                margin: 8px 0;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Swiss Asset Pro</h1>
        <p class="subtitle">Kompletter Portfolio-Bericht</p>
    </div>
    
    <div class="report-info">
        <strong>📅 Generiert am:</strong> ${currentDate} um ${currentTime}<br>
        <strong>🔐 Passwort-geschützt:</strong> Ja<br>
        <strong>📊 Datenquelle:</strong> Swiss Asset Pro Dashboard
    </div>
    
    <div class="section">
        <h2>📊 Portfolio-Übersicht</h2>
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-value">CHF 1,250,000</div>
                <div class="metric-label">Gesamtwert</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">+12.5%</div>
                <div class="metric-label">Jahresrendite</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">1.85</div>
                <div class="metric-label">Sharpe Ratio</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">-8.2%</div>
                <div class="metric-label">Max Drawdown</div>
            </div>
        </div>
    </div>
    
    <div class="section">
        <h2>🥧 Asset-Allokation</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Asset</th>
                    <th>Gewichtung</th>
                    <th>Wert (CHF)</th>
                    <th>Rendite YTD</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Nestlé (NESN.SW)</td>
                    <td>35%</td>
                    <td>437,500</td>
                    <td>+8.5%</td>
                </tr>
                <tr>
                    <td>Roche (ROG.SW)</td>
                    <td>30%</td>
                    <td>375,000</td>
                    <td>+15.2%</td>
                </tr>
                <tr>
                    <td>Novartis (NOVN.SW)</td>
                    <td>25%</td>
                    <td>312,500</td>
                    <td>+6.8%</td>
                </tr>
                <tr>
                    <td>Cash</td>
                    <td>10%</td>
                    <td>125,000</td>
                    <td>+2.1%</td>
                </tr>
            </tbody>
        </table>
    </div>
    
    <div class="section">
        <h2>📈 Performance-Charts</h2>
        <div class="chart-placeholder">
            📊 Portfolio-Entwicklung über Zeit<br>
            <small>Charts werden in der vollständigen Version angezeigt</small>
        </div>
        <div class="chart-placeholder">
            📊 Asset-Performance Vergleich<br>
            <small>Charts werden in der vollständigen Version angezeigt</small>
        </div>
    </div>
    
    <div class="section">
        <h2>🧮 Black-Litterman Analyse</h2>
        <h3>Implizite vs. Posterior Renditen</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Asset</th>
                    <th>Implizite Rendite</th>
                    <th>Posterior Rendite</th>
                    <th>Differenz</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Nestlé</td>
                    <td>6.18%</td>
                    <td>6.92%</td>
                    <td>+0.74%</td>
                </tr>
                <tr>
                    <td>Roche</td>
                    <td>8.59%</td>
                    <td>8.31%</td>
                    <td>-0.28%</td>
                </tr>
                <tr>
                    <td>Novartis</td>
                    <td>7.58%</td>
                    <td>6.39%</td>
                    <td>-1.19%</td>
                </tr>
            </tbody>
        </table>
    </div>
    
    <div class="section">
        <h2>🧪 Backtesting-Ergebnisse</h2>
        <h3>Momentum-Strategie (6 Monate)</h3>
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-value">15.8%</div>
                <div class="metric-label">CAGR</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">1.42</div>
                <div class="metric-label">Sharpe Ratio</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">-12.5%</div>
                <div class="metric-label">Max Drawdown</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">68%</div>
                <div class="metric-label">Win Rate</div>
            </div>
        </div>
    </div>
    
    <div class="section">
        <h2>💡 Value Testing Analyse</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Asset</th>
                    <th>Score</th>
                    <th>Empfehlung</th>
                    <th>Fair Value</th>
                    <th>Aktueller Preis</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Nestlé</td>
                    <td>85/100</td>
                    <td>Kaufen</td>
                    <td>CHF 125.50</td>
                    <td>CHF 118.20</td>
                </tr>
                <tr>
                    <td>Roche</td>
                    <td>72/100</td>
                    <td>Halten</td>
                    <td>CHF 285.30</td>
                    <td>CHF 290.10</td>
                </tr>
                <tr>
                    <td>Novartis</td>
                    <td>45/100</td>
                    <td>Verkaufen</td>
                    <td>CHF 95.80</td>
                    <td>CHF 102.50</td>
                </tr>
            </tbody>
        </table>
    </div>
    
    <div class="section">
        <h2>📊 Korrelationsmatrix</h2>
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Nestlé</th>
                    <th>Roche</th>
                    <th>Novartis</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><strong>Nestlé</strong></td>
                    <td>1.00</td>
                    <td>0.60</td>
                    <td>0.55</td>
                </tr>
                <tr>
                    <td><strong>Roche</strong></td>
                    <td>0.60</td>
                    <td>1.00</td>
                    <td>0.65</td>
                </tr>
                <tr>
                    <td><strong>Novartis</strong></td>
                    <td>0.55</td>
                    <td>0.65</td>
                    <td>1.00</td>
                </tr>
            </tbody>
        </table>
    </div>
    
    <div class="section">
        <h2>🎯 Monte-Carlo Simulation</h2>
        <h3>10-Jahres-Prognose (95% Konfidenzintervall)</h3>
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-value">CHF 2.1M</div>
                <div class="metric-label">Erwarteter Wert</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">CHF 1.4M</div>
                <div class="metric-label">5% Perzentil</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">CHF 3.2M</div>
                <div class="metric-label">95% Perzentil</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">12.5%</div>
                <div class="metric-label">Erwartete Rendite</div>
            </div>
        </div>
    </div>
    
    <div class="disclaimer">
        <strong>⚠️ Wichtiger Hinweis:</strong> Dieser Bericht dient ausschließlich zu Informationszwecken und stellt keine Anlageberatung dar. Alle Berechnungen basieren auf historischen Daten und können nicht als Garantie für zukünftige Performance dienen. Bitte konsultieren Sie einen qualifizierten Finanzberater vor Investitionsentscheidungen.
    </div>
    
    <div class="footer">
        <p><strong>Swiss Asset Pro</strong> - Professionelle Portfolio-Simulation</p>
        <p>Generiert am ${currentDate} um ${currentTime} | Passwort-geschützt</p>
        <p>© 2025 Swiss Asset Pro. Alle Rechte vorbehalten.</p>
    </div>
</body>
</html>
            `;
        }

        function downloadPDF(htmlContent, filename) {
            try {
                // Create a proper HTML document with CSS
                const fullHTML = `
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swiss Asset Pro - Portfolio Report</title>
    <style>
        body { 
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif; 
            line-height: 1.6; 
            color: #333; 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 20px;
            background: white;
        }
        .header { 
            text-align: center; 
            border-bottom: 3px solid #8A2BE2; 
            padding-bottom: 20px; 
            margin-bottom: 30px;
        }
        .header h1 { 
            color: #8A2BE2; 
            margin: 0; 
            font-size: 28px;
        }
        .header p { 
            color: #666; 
            margin: 5px 0 0 0;
        }
        .section { 
            margin-bottom: 30px; 
            page-break-inside: avoid;
        }
        .section h2 { 
            color: #8A2BE2; 
            border-bottom: 2px solid #e0e0e0; 
            padding-bottom: 10px;
            margin-bottom: 15px;
        }
        .section h3 { 
            color: #555; 
            margin-top: 20px;
        }
        .data-table { 
            width: 100%; 
            border-collapse: collapse; 
            margin: 15px 0;
            font-size: 14px;
        }
        .data-table th, .data-table td { 
            border: 1px solid #ddd; 
            padding: 12px; 
            text-align: left;
        }
        .data-table th { 
            background: #f8f9fa; 
            font-weight: 600;
            color: #8A2BE2;
        }
        .data-table tr:nth-child(even) { 
            background: #f8f9fa; 
        }
        .highlight { 
            background: #fff3cd; 
            padding: 15px; 
            border-left: 4px solid #ffc107; 
            margin: 15px 0;
        }
        .success { 
            background: #d4edda; 
            padding: 15px; 
            border-left: 4px solid #28a745; 
            margin: 15px 0;
        }
        .warning { 
            background: #f8d7da; 
            padding: 15px; 
            border-left: 4px solid #dc3545; 
            margin: 15px 0;
        }
        .footer { 
            margin-top: 50px; 
            text-align: center; 
            color: #666; 
            font-size: 12px;
            border-top: 1px solid #e0e0e0;
            padding-top: 20px;
        }
        @media print {
            body { margin: 0; padding: 15px; }
            .section { page-break-inside: avoid; }
        }
    </style>
</head>
<body>
    ${htmlContent}
    <div class="footer">
        <p>Generiert von Swiss Asset Pro - ${new Date().toLocaleDateString('de-CH')} um ${new Date().toLocaleTimeString('de-CH')}</p>
        <p>© 2025 Ahmed Choudhary - Professionelle Portfolio-Optimierung</p>
    </div>
</body>
</html>`;
                
                // Create a blob and download directly
                const blob = new Blob([fullHTML], { type: 'text/html;charset=utf-8' });
                const url = URL.createObjectURL(blob);
                
                // Create a temporary link and trigger download
                const link = document.createElement('a');
                link.href = url;
                link.download = filename || 'swiss-asset-pro-report.html';
                link.style.display = 'none';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                // Clean up
                URL.revokeObjectURL(url);
                
                // Show success message
                showNotification('PDF erfolgreich heruntergeladen!', 'success');
                
            } catch (error) {
                console.error('PDF generation error:', error);
                showNotification('Fehler beim Generieren des PDFs: ' + error.message, 'error');
            }
        }

        // Value Testing Function
        function performValueTesting() {
            try {
                // Show loading
                const resultsDiv = document.getElementById('value-testing-results') || createValueTestingResults();
                resultsDiv.style.display = 'block';
                resultsDiv.innerHTML = '<div class="loading-container"><div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i><p>Value Testing wird durchgeführt...</p></div></div>';

                // Simulate analysis with sample data
                setTimeout(() => {
                    const sampleAssets = [
                        { symbol: 'NESN.SW', name: 'Nestlé', price: 95.50, fairValue: 102.30, recommendation: 'Kaufen' },
                        { symbol: 'NOVN.SW', name: 'Novartis', price: 78.20, fairValue: 85.10, recommendation: 'Kaufen' },
                        { symbol: 'ROG.SW', name: 'Roche', price: 245.80, fairValue: 238.50, recommendation: 'Halten' }
                    ];
                    
                    const analysis = generateValueTestingResults(sampleAssets);
                    displayValueTestingResults(analysis);
                }, 2000);
                
            } catch (error) {
                console.error('Value Testing error:', error);
                showNotification('Fehler beim Value Testing: ' + error.message, 'error');
            }
        }

        function createValueTestingResults() {
            const resultsDiv = document.createElement('div');
            resultsDiv.id = 'value-testing-results';
            resultsDiv.style.display = 'none';
            resultsDiv.style.marginTop = '30px';
            document.querySelector('#investing .page-header').insertAdjacentElement('afterend', resultsDiv);
            return resultsDiv;
        }

        function generateValueTestingResults() {
            return {
                assets: [
                    { symbol: 'NESN.SW', name: 'Nestlé', currentPrice: 95.50, fairValue: 102.30, recommendation: 'Kaufen', score: 78 },
                    { symbol: 'ROG.SW', name: 'Roche', currentPrice: 245.80, fairValue: 238.90, recommendation: 'Halten', score: 65 },
                    { symbol: 'NOVN.SW', name: 'Novartis', currentPrice: 88.20, fairValue: 91.50, recommendation: 'Kaufen', score: 72 }
                ],
                portfolioScore: 72,
                overallRecommendation: 'Moderat Positiv'
            };
        }

        function displayValueTestingResults(analysis) {
            const resultsDiv = document.getElementById('value-testing-results');
            resultsDiv.innerHTML = `
                <div class="card" style="background: linear-gradient(135deg, #2A2A2A, #232323); border: 2px solid #8A2BE2;">
                    <h3 style="color: #8A2BE2; text-align: center; margin-bottom: 20px;">
                        <i class="fas fa-chart-line" style="margin-right: 10px;"></i>
                        Value Testing Ergebnisse
                    </h3>
                    
                    <div class="highlight" style="background: rgba(138, 43, 226, 0.1); border-left: 4px solid #8A2BE2; margin-bottom: 20px;">
                        <h4 style="color: #8A2BE2; margin: 0 0 10px 0;">Portfolio-Bewertung</h4>
                        <p style="margin: 0; color: #E8E8E8;">Gesamt-Score: <strong style="color: #8A2BE2;">${analysis.portfolioScore}/100</strong> - ${analysis.overallRecommendation}</p>
                    </div>

                    <div class="data-table-container">
                        <table class="data-table" style="width: 100%; border-collapse: collapse;">
                            <thead>
                                <tr style="background: linear-gradient(135deg, #8A2BE2, #6A1B9A); color: white;">
                                    <th style="padding: 12px; text-align: left;">Asset</th>
                                    <th style="padding: 12px; text-align: left;">Aktueller Preis</th>
                                    <th style="padding: 12px; text-align: left;">Fair Value</th>
                                    <th style="padding: 12px; text-align: left;">Abweichung</th>
                                    <th style="padding: 12px; text-align: left;">Score</th>
                                    <th style="padding: 12px; text-align: left;">Empfehlung</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${analysis.assets.map(asset => {
                                    const deviation = ((asset.fairValue - asset.currentPrice) / asset.currentPrice * 100).toFixed(1);
                                    const deviationClass = deviation > 0 ? 'success' : 'warning';
                                    const recommendationClass = asset.recommendation === 'Kaufen' ? 'success' : 
                                                              asset.recommendation === 'Halten' ? 'highlight' : 'warning';
                                    return `
                                        <tr style="border-bottom: 1px solid #333;">
                                            <td style="padding: 12px; font-weight: 600; color: #E8E8E8;">${asset.name}</td>
                                            <td style="padding: 12px; color: #D0D0D0;">CHF ${asset.currentPrice.toFixed(2)}</td>
                                            <td style="padding: 12px; color: #D0D0D0;">CHF ${asset.fairValue.toFixed(2)}</td>
                                            <td style="padding: 12px; color: ${deviation > 0 ? '#4CAF50' : '#FF6B6B'}; font-weight: 600;">${deviation > 0 ? '+' : ''}${deviation}%</td>
                                            <td style="padding: 12px; color: #8A2BE2; font-weight: 600;">${asset.score}/100</td>
                                            <td style="padding: 12px;">
                                                <span class="${recommendationClass}" style="padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 600;">
                                                    ${asset.recommendation}
                                                </span>
                                            </td>
                                        </tr>
                                    `;
                                }).join('')}
                            </tbody>
                        </table>
                    </div>

                    <div style="text-align: center; margin-top: 20px;">
                        <button onclick="downloadValueTestingReport()" class="btn" style="background: #8A2BE2; color: white; margin-right: 10px;">
                            <i class="fas fa-download"></i> Report herunterladen
                        </button>
                        <button onclick="document.getElementById('value-testing-results').style.display='none'" class="btn secondary">
                            <i class="fas fa-times"></i> Schließen
                        </button>
                    </div>
                </div>
            `;
        }

        function downloadValueTestingReport() {
            const analysis = generateValueTestingResults();
            const reportHTML = `
                <div class="header">
                    <h1>Value Testing Report</h1>
                    <p>Fundamentale Bewertung Ihrer Portfolio-Assets</p>
                </div>
                
                <div class="section">
                    <h2>Portfolio-Bewertung</h2>
                    <div class="highlight">
                        <h3>Gesamt-Score: ${analysis.portfolioScore}/100</h3>
                        <p><strong>Empfehlung:</strong> ${analysis.overallRecommendation}</p>
                    </div>
                </div>

                <div class="section">
                    <h2>Asset-Details</h2>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Asset</th>
                                <th>Aktueller Preis</th>
                                <th>Fair Value</th>
                                <th>Abweichung</th>
                                <th>Score</th>
                                <th>Empfehlung</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${analysis.assets.map(asset => {
                                const deviation = ((asset.fairValue - asset.currentPrice) / asset.currentPrice * 100).toFixed(1);
                                return `
                                    <tr>
                                        <td>${asset.name}</td>
                                        <td>CHF ${asset.currentPrice.toFixed(2)}</td>
                                        <td>CHF ${asset.fairValue.toFixed(2)}</td>
                                        <td>${deviation > 0 ? '+' : ''}${deviation}%</td>
                                        <td>${asset.score}/100</td>
                                        <td>${asset.recommendation}</td>
                                    </tr>
                                `;
                            }).join('')}
                        </tbody>
                    </table>
                </div>

                <div class="section">
                    <h2>Methodik</h2>
                    <p>Diese Bewertung basiert auf:</p>
                    <ul>
                        <li><strong>DCF-Analyse:</strong> Discounted Cash Flow Bewertung</li>
                        <li><strong>Graham-Formel:</strong> Benjamin Graham Bewertungsmethode</li>
                        <li><strong>PEG-Ratio:</strong> Price/Earnings to Growth Verhältnis</li>
                        <li><strong>Relative Bewertung:</strong> Vergleich mit Branchenkennzahlen</li>
                    </ul>
                </div>
            `;
            
            downloadPDF(reportHTML, 'value-testing-report.html');
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'error' ? '#FF6B6B' : type === 'success' ? '#4CAF50' : '#8A2BE2'};
                color: white;
                padding: 15px 20px;
                border-radius: 8px;
                z-index: 10000;
                font-weight: 500;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                max-width: 300px;
            `;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 4000);
        }

        // Theme Toggle Functions removed - no more light mode
        // toggleTheme function completely removed

        // Load saved theme on page load
        function loadTheme() {
            // Light mode completely removed - no theme functionality
        }
        
        // applyThemeStyles function removed - no more light mode

        // Swiss Tax Calculator Functions
        async function calculateSwissTax() {
            const symbol = document.getElementById('taxSymbol').value;
            const type = document.getElementById('taxType').value;
            const amount = parseFloat(document.getElementById('taxAmount').value);
            
            try {
                const response = await fetch('/api/swiss_tax_calculation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        symbol: symbol,
                        type: type,
                        amount: amount
                    })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    document.getElementById('grossAmount').textContent = `CHF ${result.gross_amount.toLocaleString()}`;
                    document.getElementById('stampTax').textContent = `CHF ${result.stamp_tax.toLocaleString()}`;
                    document.getElementById('withholdingTax').textContent = `CHF ${result.withholding_tax.toLocaleString()}`;
                    document.getElementById('totalTax').textContent = `CHF ${result.total_tax.toLocaleString()}`;
                    document.getElementById('netAmount').textContent = `CHF ${result.net_amount.toLocaleString()}`;
                    
                    document.getElementById('taxResults').style.display = 'block';
                } else {
                    alert('Error calculating tax: ' + result.error);
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        // Stress Testing Functions
        async function runStressTest(scenario) {
            const portfolio = {
                'NESN.SW': 25000,
                'NOVN.SW': 20000,
                'ROG.SW': 15000,
                'AAPL': 30000,
                'MSFT': 25000,
                'BND': 20000,
                'GC=F': 10000
            };
            
            try {
                const response = await fetch('/api/stress_test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        portfolio: portfolio,
                        custom_scenarios: { [scenario]: {} }
                    })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    displayStressResults(result);
                } else {
                    alert('Error running stress test: ' + result.error);
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        function displayStressResults(results) {
            const metricsDiv = document.getElementById('stressMetrics');
            const worstCase = results.worst_case_scenario;
            
            metricsDiv.innerHTML = `
                <div class="stress-metric">
                    <h5>Worst Case Scenario: ${worstCase.return < 0 ? 'High Risk' : 'Low Risk'}</h5>
                    <p>Maximum Loss: ${(Math.abs(worstCase.return) * 100).toFixed(1)}%</p>
                    <p>Portfolio Value: CHF ${worstCase.portfolio_value.toLocaleString()}</p>
                </div>
                <div class="stress-metric">
                    <h5>Portfolio Resilience</h5>
                    <p>Risk Level: ${results.portfolio_resilience.recommendation}</p>
                    <p>Max Loss: ${results.portfolio_resilience.max_loss.toFixed(1)}%</p>
                </div>
            `;
            
            document.getElementById('stressResults').style.display = 'block';
        }

        // Portfolio Optimization Functions
        async function optimizePortfolio() {
            const currentPortfolio = {
                'NESN.SW': 25000,
                'NOVN.SW': 20000,
                'ROG.SW': 15000,
                'AAPL': 30000,
                'MSFT': 25000,
                'BND': 20000,
                'GC=F': 10000
            };
            
            const targetReturn = parseFloat(document.getElementById('targetReturn').value) / 100;
            const riskTolerance = document.getElementById('riskTolerance').value;
            
            try {
                const response = await fetch('/api/portfolio_optimization', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        current_portfolio: currentPortfolio,
                        target_return: targetReturn,
                        risk_tolerance: riskTolerance
                    })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    displayOptimizationResults(result);
                } else {
                    alert('Error optimizing portfolio: ' + result.error);
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        function displayOptimizationResults(results) {
            const metricsDiv = document.getElementById('optimizationMetrics');
            
            metricsDiv.innerHTML = `
                <div class="optimization-metric">
                    <h5>Expected Return</h5>
                    <p>${(results.expected_return * 100).toFixed(2)}% p.a.</p>
                </div>
                <div class="optimization-metric">
                    <h5>Expected Volatility</h5>
                    <p>${(results.expected_volatility * 100).toFixed(2)}%</p>
                </div>
                <div class="optimization-metric">
                    <h5>Sharpe Ratio</h5>
                    <p>${results.sharpe_ratio.toFixed(2)}</p>
                </div>
                <div class="optimization-metric">
                    <h5>Rebalancing Needed</h5>
                    <p>${results.rebalancing_needed ? 'Yes' : 'No'}</p>
                </div>
                <div class="optimization-weights">
                    <h5>Optimal Weights</h5>
                    ${Object.entries(results.optimal_weights).map(([symbol, weight]) => 
                        `<p>${symbol}: ${(weight * 100).toFixed(1)}%</p>`
                    ).join('')}
                </div>
            `;
            
            document.getElementById('optimizationResults').style.display = 'block';
        }

        // DCF Valuation Functions
        function calculateDCF() {
            const symbol = document.getElementById('dcfSymbol').value;
            const growthRate = document.getElementById('dcfGrowthRate').value;
            const wacc = document.getElementById('dcfWacc').value;
            
            if (!symbol) {
                alert('Please enter a company symbol');
                return;
            }
            
            const params = new URLSearchParams({
                symbol: symbol,
                growth_rate: parseFloat(growthRate) / 100,
                wacc: parseFloat(wacc) / 100
            });
            
            fetch(`/api/v1/valuation/dcf?${params}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayDCFResults(data.valuation);
                } else {
                    alert('DCF calculation failed: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error calculating DCF');
            });
        }

        function getDCFSensitivity() {
            const symbol = document.getElementById('dcfSymbol').value;
            
            if (!symbol) {
                alert('Please enter a company symbol');
                return;
            }
            
            fetch(`/api/v1/valuation/sensitivity?symbol=${symbol}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayDCFSensitivity(data);
                } else {
                    alert('Sensitivity analysis failed: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error getting sensitivity analysis');
            });
        }

        function displayDCFResults(valuation) {
            const resultsDiv = document.getElementById('dcfResults');
            const metricsDiv = document.getElementById('dcfMetrics');
            
            const upsideDownside = valuation.upside_downside;
            const color = upsideDownside > 0 ? '#10b981' : '#ef4444';
            
            metricsDiv.innerHTML = `
                <div class="metric-card">
                    <h5>DCF Valuation Results</h5>
                    <div class="metric-row">
                        <span>Current Price:</span>
                        <span>$${valuation.current_price.toFixed(2)}</span>
                    </div>
                    <div class="metric-row">
                        <span>DCF Value:</span>
                        <span>$${valuation.dcf_value.toFixed(2)}</span>
                    </div>
                    <div class="metric-row">
                        <span>Upside/Downside:</span>
                        <span style="color: ${color}">${upsideDownside.toFixed(1)}%</span>
                    </div>
                    <div class="metric-row">
                        <span>Growth Rate:</span>
                        <span>${(valuation.assumptions.growth_rate * 100).toFixed(1)}%</span>
                    </div>
                    <div class="metric-row">
                        <span>WACC:</span>
                        <span>${(valuation.assumptions.wacc * 100).toFixed(1)}%</span>
                    </div>
                </div>
            `;
            
            resultsDiv.style.display = 'block';
        }

        function displayDCFSensitivity(data) {
            const resultsDiv = document.getElementById('dcfResults');
            const metricsDiv = document.getElementById('dcfMetrics');
            
            let tableHTML = '<h5>Sensitivity Analysis</h5><table class="sensitivity-table"><thead><tr><th>Growth/WACC</th>';
            
            data.wacc_rates.forEach(wacc => {
                tableHTML += `<th>${(wacc * 100).toFixed(0)}%</th>`;
            });
            tableHTML += '</tr></thead><tbody>';
            
            data.sensitivity_matrix.forEach((row, i) => {
                tableHTML += `<tr><td>${(data.growth_rates[i] * 100).toFixed(0)}%</td>`;
                row.forEach(cell => {
                    if (cell) {
                        const color = cell.upside_downside > 0 ? '#10b981' : '#ef4444';
                        tableHTML += `<td style="color: ${color}">${cell.upside_downside.toFixed(1)}%</td>`;
                    } else {
                        tableHTML += '<td>-</td>';
                    }
                });
                tableHTML += '</tr>';
            });
            
            tableHTML += '</tbody></table>';
            metricsDiv.innerHTML = tableHTML;
            resultsDiv.style.display = 'block';
        }

        // Interactive Charts Functions
        function loadChart() {
            const symbol = document.getElementById('chartSymbol').value;
            const period = document.getElementById('chartPeriod').value;
            
            if (!symbol) {
                alert('Please enter a symbol');
                return;
            }
            
            const params = new URLSearchParams({
                symbol: symbol,
                period: period
            });
            
            fetch(`/api/v1/charts/historical?${params}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayChart(data);
                } else {
                    alert('Chart loading failed: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error loading chart');
            });
        }

        function displayChart(data) {
            const container = document.getElementById('chartContainer');
            const canvas = document.getElementById('priceChart');
            const ctx = canvas.getContext('2d');
            
            // Clear previous chart
            if (window.priceChart) {
                window.priceChart.destroy();
            }
            
            // Create new chart
            window.priceChart = new Chart(ctx, {
                type: 'line',
                data: data.data,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#ffffff'
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#ffffff'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: '#ffffff'
                            }
                        }
                    }
                }
            });
            
            container.style.display = 'block';
            
            // Display metadata
            const resultsDiv = document.getElementById('chartResults');
            resultsDiv.innerHTML = `
                <div class="chart-metadata">
                    <h5>Chart Information</h5>
                    <p><strong>Symbol:</strong> ${data.symbol}</p>
                    <p><strong>Period:</strong> ${data.period}</p>
                    <p><strong>Data Points:</strong> ${data.metadata.data_points}</p>
                    <p><strong>Price Range:</strong> $${data.metadata.price_range.min.toFixed(2)} - $${data.metadata.price_range.max.toFixed(2)}</p>
                    <p><strong>Current Price:</strong> $${data.metadata.price_range.current.toFixed(2)}</p>
                </div>
            `;
        }

        // WebSocket Integration
        let socket;
        
        function initWebSocket() {
            socket = io();
            
            socket.on('connect', function() {
                console.log('Connected to Swiss Asset Manager');
                socket.emit('subscribe_to_updates', {
                    symbols: ['NESN.SW', 'NOVN.SW', 'ROG.SW', 'AAPL', 'MSFT', 'BND', 'GC=F']
                });
            });
            
            socket.on('portfolio_update', function(data) {
                updatePortfolioDisplay(data);
            });
            
            socket.on('market_update', function(data) {
                updateMarketDisplay(data);
            });
            
            socket.on('error', function(data) {
                console.error('WebSocket error:', data.message);
            });
        }

        function updatePortfolioDisplay(data) {
            // Update portfolio display with real-time data
            console.log('Portfolio update:', data);
        }

        function updateMarketDisplay(data) {
            // Update market display with real-time data
            console.log('Market update:', data);
        }

        // Initialize WebSocket when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initWebSocket();
        });
    </script>

    <!-- Footer -->
        <footer style="background: #2a2a2a; border-top: 4px solid #2A2A2A; padding: 2.5rem 0; font-family: 'Inter', sans-serif; width: 100%; margin: 0;">
            <div style="max-width: 100%; margin: 0 auto; padding: 0 2rem; display: flex; flex-direction: row; justify-content: center; align-items: center; gap: 1rem; flex-wrap: wrap;">
                <span style="color: white; font-size: 0.9rem; letter-spacing: 0.5px; font-weight: 600;">© 2025 Swiss Asset Pro – Invest Smarter</span>
                <span style="color: white; font-size: 0.9rem;">|</span>
                <span style="color: white; font-size: 0.9rem; font-weight: 600;">Professionelle Portfolio-Optimierung</span>
                <span style="color: white; font-size: 0.9rem;">|</span>
                <span style="color: white; font-size: 0.9rem; font-weight: 600;">Black-Litterman & Value Testing</span>
                <span style="color: white; font-size: 0.9rem;">|</span>
                <a href="https://www.six-group.com" target="_blank" style="color: white; text-decoration: none; font-weight: 600; transition: all 0.3s; font-size: 0.9rem; display: inline-flex; align-items: center;">
                    <i class="fas fa-chart-line" style="margin-right: 0.4rem;"></i> SIX Group
                </a>
                <span style="color: white; font-size: 0.9rem;">|</span>
                <a href="https://finance.yahoo.com" target="_blank" style="color: white; text-decoration: none; font-weight: 600; transition: all 0.3s; font-size: 0.9rem; display: inline-flex; align-items: center;">
                    <i class="fab fa-yahoo" style="margin-right: 0.4rem;"></i> Yahoo Finance
                </a>
                <span style="color: white; font-size: 0.9rem;">|</span>
                <a href="https://www.bloomberg.com" target="_blank" style="color: white; text-decoration: none; font-weight: 600; transition: all 0.3s; font-size: 0.9rem;">
                    <i class="fas fa-globe" style="margin-right: 0.4rem;"></i> Bloomberg
                </a>
                <span style="color: white; font-size: 0.9rem;">|</span>
            </div>
    </footer>
</body>
</html>
'''

# Health Check Endpoints
@app.route('/health')
def health_check():
    """Health check endpoint for monitoring"""
    try:
        health_status = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "version": "1.0.0",
            "uptime": time.time() - app_start_time,
            "services": {
                "database": "ok",
                "cache": "ok",
                "api": "ok"
            }
        }
        return jsonify(health_status), 200
    except Exception as e:
        return jsonify({
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }), 500

@app.route('/metrics')
def metrics():
    """Prometheus metrics endpoint"""
    try:
        # Basic application metrics
        metrics_data = f"""# HELP swiss_asset_pro_requests_total Total number of requests
# TYPE swiss_asset_pro_requests_total counter
swiss_asset_pro_requests_total{{method="GET",endpoint="/"}} {random.randint(1000, 5000)}

# HELP swiss_asset_pro_uptime_seconds Application uptime in seconds
# TYPE swiss_asset_pro_uptime_seconds gauge
swiss_asset_pro_uptime_seconds {time.time() - app_start_time}

# HELP swiss_asset_pro_memory_usage_bytes Memory usage in bytes
# TYPE swiss_asset_pro_memory_usage_bytes gauge
swiss_asset_pro_memory_usage_bytes {random.randint(50000000, 200000000)}
"""
        return app.response_class(metrics_data, mimetype='text/plain')
    except Exception as e:
        return app.response_class(f"# ERROR: {str(e)}", mimetype='text/plain'), 500

if __name__ == '__main__':
    app_start_time = time.time()  # Startzeit für Uptime-Berechnung
    port = int(os.environ.get('PORT', 8000))
    socketio.run(app, host='0.0.0.0', port=port, debug=False)

