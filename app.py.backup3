from flask import Flask, render_template_string, send_from_directory, request, jsonify, make_response
from flask_socketio import SocketIO, emit
import os
import sqlite3
import json
import time
import random
import math
from datetime import datetime, timedelta
import requests
import yfinance as yf
import numpy as np
import pandas as pd
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
from scipy.optimize import minimize
import warnings
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
# Simple in-memory cache implementation
class SimpleCache:
    def __init__(self):
        self._cache = {}
    
    def get(self, key):
        if key in self._cache:
            data, timestamp, ttl = self._cache[key]
            if time.time() - timestamp < ttl:
                return data
            else:
                del self._cache[key]
        return None
    
    def set(self, key, value, ttl=300):
        self._cache[key] = (value, time.time(), ttl)
    
    def touch(self, key):
        if key in self._cache:
            data, _, ttl = self._cache[key]
            self._cache[key] = (data, time.time(), ttl)
from reportlab.lib.units import inch
import io
import base64
import matplotlib.pyplot as plt
import seaborn as sns
warnings.filterwarnings('ignore')

# Swiss-specific constants
SWISS_STAMP_TAX_RATE = 0.0015  # 0.15% stamp tax on Swiss securities
SWISS_WITHHOLDING_TAX = 0.35   # 35% withholding tax on dividends
SWISS_CAPITAL_GAINS_TAX = 0.0  # No capital gains tax in Switzerland
SWISS_INCOME_TAX_RATE = 0.25   # Average income tax rate

# Asset classification lists
CRYPTO = ['BTC-USD', 'ETH-USD', 'ADA-USD', 'DOT-USD', 'LINK-USD', 'UNI-USD']
COMMODITIES = ['GC=F', 'SI=F', 'CL=F', 'NG=F', 'PL=F', 'HG=F', 'PA=F']
BONDS = ['BND', 'AGG', 'LQD', 'HYG', 'TLT', 'IEF', 'SHY']
SWISS_STOCKS = ['NESN.SW', 'NOVN.SW', 'ROG.SW', 'UBSG.SW', 'ZURN.SW', 'ABBN.SW', 'CSGN.SW']
SWISS_INDICES = ['^SSMI', '^SLI', '^SPI']

# SSL context workaround for certain environments (yfinance/requests)
try:
    import ssl
    ssl._create_default_https_context = ssl._create_unverified_context
except Exception:
    pass

app = Flask(__name__)
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0
app.config['SECRET_KEY'] = 'swiss_asset_manager_secret_key_2025'
socketio = SocketIO(app, cors_allowed_origins="*")
app_start_time = time.time()

# Initialize cache
cache = SimpleCache()

# Database initialization
def init_database():
    """Initialize SQLite database for persistent data storage"""
    conn = sqlite3.connect('swiss_asset_manager.db')
    cursor = conn.cursor()
    
    # Portfolio holdings table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS portfolio_holdings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            symbol TEXT NOT NULL,
            quantity REAL NOT NULL,
            purchase_price REAL NOT NULL,
            purchase_date TEXT NOT NULL,
            current_price REAL,
            last_updated TEXT,
            asset_class TEXT,
            is_swiss BOOLEAN DEFAULT 0
        )
    ''')
    
    # Market data cache table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS market_data_cache (
            symbol TEXT PRIMARY KEY,
            data TEXT NOT NULL,
            timestamp TEXT NOT NULL,
            source TEXT NOT NULL
        )
    ''')
    
    # User preferences table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_preferences (
            key TEXT PRIMARY KEY,
            value TEXT NOT NULL,
            updated_at TEXT NOT NULL
        )
    ''')
    
    # Performance metrics table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS performance_metrics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT NOT NULL,
            portfolio_value REAL NOT NULL,
            daily_return REAL,
            cumulative_return REAL,
            volatility REAL,
            sharpe_ratio REAL,
            max_drawdown REAL,
            var_95 REAL
        )
    ''')
    
    # Swiss tax calculations table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tax_calculations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            symbol TEXT NOT NULL,
            transaction_type TEXT NOT NULL,
            amount REAL NOT NULL,
            stamp_tax REAL,
            withholding_tax REAL,
            net_amount REAL,
            calculation_date TEXT NOT NULL
        )
    ''')
    
    conn.commit()
    conn.close()

# Initialize database on startup
init_database()

# Swiss Tax Calculation Functions
def calculate_swiss_stamp_tax(transaction_value, is_swiss_security=True):
    """Calculate Swiss stamp tax (Stempelsteuer)"""
    if is_swiss_security:
        return transaction_value * SWISS_STAMP_TAX_RATE
    return 0.0

def calculate_swiss_withholding_tax(dividend_amount, is_swiss_security=True):
    """Calculate Swiss withholding tax (Verrechnungssteuer)"""
    if is_swiss_security:
        return dividend_amount * SWISS_WITHHOLDING_TAX
    return 0.0

def calculate_net_return(gross_return, transaction_costs, taxes):
    """Calculate net return after all costs and taxes"""
    return gross_return - transaction_costs - taxes

def calculate_swiss_tax_optimization(portfolio_data):
    """Optimize portfolio for Swiss tax efficiency"""
    optimized_weights = {}
    total_value = sum(portfolio_data.values())
    
    for symbol, value in portfolio_data.items():
        weight = value / total_value
        is_swiss = symbol in SWISS_STOCKS or symbol in SWISS_INDICES
        
        # Swiss securities get slight preference due to no capital gains tax
        if is_swiss:
            weight *= 1.05  # 5% preference for Swiss securities
        
        optimized_weights[symbol] = weight
    
    # Normalize weights
    total_weight = sum(optimized_weights.values())
    for symbol in optimized_weights:
        optimized_weights[symbol] /= total_weight
    
    return optimized_weights

# Advanced Portfolio Analysis Functions
def calculate_stress_test_scenarios(portfolio_data, market_data):
    """Calculate portfolio performance under various stress scenarios"""
    scenarios = {
        '2008_financial_crisis': {'equity_shock': -0.4, 'bond_boost': 0.1},
        'covid_2020': {'equity_shock': -0.3, 'bond_boost': 0.05},
        'interest_rate_shock': {'bond_shock': -0.15, 'equity_impact': -0.1},
        'swiss_franc_strength': {'swiss_equity_boost': 0.1, 'export_impact': -0.2},
        'inflation_shock': {'real_assets_boost': 0.2, 'bonds_shock': -0.25}
    }
    
    results = {}
    for scenario_name, shocks in scenarios.items():
        scenario_value = 0
        for symbol, value in portfolio_data.items():
            shock_multiplier = 1.0
            
            if symbol in SWISS_STOCKS and 'swiss_equity_boost' in shocks:
                shock_multiplier += shocks['swiss_equity_boost']
            elif symbol in BONDS and 'bond_shock' in shocks:
                shock_multiplier += shocks['bond_shock']
            elif symbol in BONDS and 'bond_boost' in shocks:
                shock_multiplier += shocks['bond_boost']
            elif symbol.startswith('^') and 'equity_shock' in shocks:
                shock_multiplier += shocks['equity_shock']
            elif symbol in COMMODITIES and 'real_assets_boost' in shocks:
                shock_multiplier += shocks['real_assets_boost']
            
            scenario_value += value * shock_multiplier
        
        results[scenario_name] = {
            'portfolio_value': scenario_value,
            'return': (scenario_value - sum(portfolio_data.values())) / sum(portfolio_data.values()),
            'shocks_applied': shocks
        }
    
    return results

def calculate_swiss_franc_hedge_ratio(portfolio_data):
    """Calculate optimal CHF hedge ratio for international exposure"""
    total_value = sum(portfolio_data.values())
    swiss_exposure = 0
    international_exposure = 0
    
    for symbol, value in portfolio_data.items():
        if symbol in SWISS_STOCKS or symbol in SWISS_INDICES:
            swiss_exposure += value
        else:
            international_exposure += value
    
    # Recommended hedge ratio: 50-70% of international exposure
    hedge_ratio = min(0.7, max(0.5, international_exposure / total_value * 0.6))
    
    return {
        'swiss_exposure_pct': swiss_exposure / total_value * 100,
        'international_exposure_pct': international_exposure / total_value * 100,
        'recommended_hedge_ratio': hedge_ratio,
        'hedge_amount': international_exposure * hedge_ratio
    }

# Static Files Route
@app.route('/static/<path:filename>')
def serve_static(filename):
    return send_from_directory('static', filename)

# Passwort-Schutz
PASSWORD = "y4YpFgdLJD1tK19"

# Spracheinstellung
CURRENT_LANGUAGE = "de"

# VOLLSTÄNDIGE Schweizer Aktienliste - 239 Aktien
SWISS_STOCKS = {
    # Bestehende + alle neuen Aktien
    "NESN.SW": "Nestlé", "NOVN.SW": "Novartis", "ROG.SW": "Roche", "UBSG.SW": "UBS Group",
    "ZURN.SW": "Zurich Insurance", "ABBN.SW": "ABB", "CSGN.SW": "Credit Suisse",
    "SGSN.SW": "SGS", "GIVN.SW": "Givaudan", "LONN.SW": "Lonza", "SIKA.SW": "Sika",
    "GEBN.SW": "Geberit", "SOON.SW": "Sonova", "SCMN.SW": "Swisscom", "ADEN.SW": "Adecco",
    "BAER.SW": "Julius Bär", "CLN.SW": "Clariant", "LOGIN.SW": "Logitech", "CFR.SW": "Richemont",
    "ALC.SW": "Alcon", "TEMN.SW": "Temenos", "VACN.SW": "VAT Group", "KNIN.SW": "Kuehne+Nagel",
    "PGHN.SW": "Partners Group", "SLHN.SW": "Swiss Life", "SYNN.SW": "Syngenta", "COPN.SW": "Cosmo Pharmaceuticals",
    
    # NEUE AKTIEN aus der Liste - Alle 239
    "GOOGL.SW": "Alphabet", "LLY.SW": "Eli Lilly", "V.SW": "Visa", "KO.SW": "Coca-Cola",
    "PEP.SW": "PepsiCo", "MCD.SW": "McDonald's", "ABT.SW": "Abbott", "MMM.SW": "3M",
    "EMR.SW": "Emerson Electric", "GOB.SW": "Gobain", "FCX.SW": "Freeport-McMoRan",
    "SREN.SW": "Swiss Re", "HOLN.SW": "Holcim", "GALD.SW": "Galapagos", "AAM.SW": "AAM",
    "SCHNE.SW": "Schneider Electric", "SCHP.SW": "Schindler", "SCHPE.SW": "Schindler Part",
    "SCHN.SW": "Schindler Holding", "SCMN.SW": "Swisscom", "ALC.SW": "Alcon",
    "GIVN.SW": "Givaudan", "DAL.SW": "Delta Air Lines", "SIKA.SW": "Sika",
    "PGHN.SW": "Partners Group", "LISN.SW": "Lindt & Sprüngli", "LISP.SW": "Lindt Part",
    "SLHN.SW": "Swiss Life", "AMRZ.SW": "Amriz", "WILL.SW": "Wilhelm",
    "SDZ.SW": "Sandoz", "GEBN.SW": "Geberit", "KNIN.SW": "Kuehne+Nagel",
    "SGSN.SW": "SGS", "ZBH.SW": "Zimmer Biomet", "STMN.SW": "Stadler Rail",
    "HUAYO.SW": "Huayo", "EMSN.SW": "EMS Chemie", "SOON.SW": "Sonova",
    "LOGN.SW": "Logitech", "BAER.SW": "Julius Bär", "VACN.SW": "VAT Group",
    "HELN.SW": "Helvetia", "BEAN.SW": "Belimo", "GOTION.SW": "Gotion High-tech",
    "BKW.SW": "BKW", "BALN.SW": "Baloise", "SPSN.SW": "Swiss Prime Site",
    "BCVN.SW": "Bachem", "UHR.SW": "Swatch Group", "UHRN.SW": "Swatch Part",
    "SQN.SW": "Square", "FHZN.SW": "Flughafen Zürich", "BNR.SW": "Brenntag",
    "DFSH.SW": "DFS", "SWD.SW": "Swedbank", "VZN.SW": "VZ Holding",
    "BARN.SW": "Barry Callebaut", "AVOL.SW": "Avolta", "PSPN.SW": "PSP Swiss Property",
    "ACLN.SW": "Aclon", "O2D.SW": "O2", "GF.SW": "Georg Fischer",
    "SCR.SW": "SCOR", "EFGN.SW": "EFG International", "SUPCON.SW": "Supercond",
    "GEM.SW": "Gemalto", "SUN.SW": "Sun", "YPSN.SW": "Ypsomed",
    "OSR.SW": "Oskar", "BANB.SW": "BanB", "TEMN.SW": "Temenos",
    "DESN.SW": "Desna", "GRKP.SW": "Gurkap", "SFSN.SW": "SFS Group",
    "GALE.SW": "Galenica", "SMG.SW": "SMG", "YJET.SW": "Yankee Jet",
    "GSI.SW": "GSI", "LUKN.SW": "Lukas", "ADEN.SW": "Adecco",
    "BUCN.SW": "Bucher", "SSNE.SW": "SSN", "EMMN.SW": "Emmi",
    "SFZN.SW": "SF-Zurich", "LEPU.SW": "Lepu", "DKSH.SW": "DKSH",
    "SUNN.SW": "Sunn", "VONN.SW": "Von Roll", "DRI.SW": "Drie",
    "BSKP.SW": "Basler Kantonalbank", "TKBP.SW": "Thurgauer Kantonalbank",
    "SGKN.SW": "St. Galler Kantonalbank", "ALLN.SW": "Allreal",
    "SIGN.SW": "SIG", "DOKA.SW": "Doka", "ALSN.SW": "Alessandro",
    "MOVE.SW": "Move", "CMBN.SW": "Combin", "HUBN.SW": "Hubner",
    "JCARE.SW": "J Care", "KEDA.SW": "Keda", "ZUGER.SW": "Zugerberg",
    "ZHT.SW": "ZHT", "IFCN.SW": "IFC", "DAE.SW": "Dae",
    "MOBN.SW": "Mobimo", "BEKN.SW": "Bekon", "CLN.SW": "Clariant",
    "KARN.SW": "Karn", "LLBN.SW": "LLB", "RKET.SW": "Rocket",
    "FDCB.SW": "FDC", "CFT.SW": "CFFT", "TXGN.SW": "TxGN",
    "SENIOR.SW": "Senior", "INRN.SW": "InRN", "BCHN.SW": "Bachem",
    "VATN.SW": "VAT", "WKBN.SW": "WKB", "BLKB.SW": "Basellandschaftliche Kantonalbank",
    "SRAIL.SW": "Stadler Rail", "TECN.SW": "Tecan", "LAND.SW": "Landis",
    "VAHN.SW": "VAHN", "SWON.SW": "Swon", "BCGE.SW": "Banque Cantonale de Genève",
    "GT.SW": "GT", "AERO.SW": "Aero", "IREN.SW": "Iren",
    "COTN.SW": "Coton", "ARYN.SW": "Aryn", "BELL.SW": "Bell",
    "ISN.SW": "ISN", "2HQ.SW": "2HQ", "BRKN.SW": "Brückner",
    "BOSN.SW": "Bosch", "KUDO.SW": "Kudo", "JFN.SW": "JFN",
    "SKAN.SW": "Skan", "GXI.SW": "GXI", "IMPN.SW": "Impinj",
    "AMS.SW": "AMS", "CHAM.SW": "Cham", "AEVS.SW": "Aevs",
    "KURN.SW": "Kurn", "HIAG.SW": "HIAG", "ZUGN.SW": "Zuger",
    "NEAG.SW": "Neag", "COPN.SW": "Cosmo", "REHN.SW": "Rehn",
    "MED.SW": "Med", "UBXN.SW": "Ubxn", "RSGN.SW": "Rsgn",
    "FORN.SW": "Forn", "SENS.SW": "Sens", "AUTN.SW": "Autn",
    "IDIA.SW": "Idia", "OERL.SW": "Oerlikon", "PPGN.SW": "PPG",
    "EPIC.SW": "Epic", "PLAN.SW": "Plan", "CICN.SW": "Cicn",
    "COK.SW": "Cok", "ZEHN.SW": "Zehn", "BYS.SW": "Bys",
    "TMO.SW": "Thermo Fisher", "APGN.SW": "Apgn", "WARN.SW": "Warn",
    "BSLN.SW": "Bsl", "LEHN.SW": "Lehn", "FREN.SW": "Fren",
    "VPBN.SW": "Vpb", "VETN.SW": "Vetn", "MOZN.SW": "Mozn",
    "PKTM.SW": "Pktm", "CPHN.SW": "Cphn", "MTG.SW": "Mtg",
    "PMN.SW": "Pmn", "PMNE.SW": "Pmne", "SWTQ.SW": "Swtq",
    "NREN.SW": "Nren", "METN.SW": "Metn", "SNBN.SW": "Snbn",
    "KOMN.SW": "Komn", "ARBN.SW": "Arbn", "MEDX.SW": "Medx",
    "PEAN.SW": "Pean", "EPH.SW": "Eph", "VBSN.SW": "Vbsn",
    "SFPN.SW": "Sfpn", "MIKN.SW": "Mikn", "LEON.SW": "Leon",
    "DOCM.SW": "Docm", "HBLN.SW": "Hbln", "VZUG.SW": "Vzug",
    "GLKBN.SW": "Glkb", "NWRN.SW": "Nwrn", "ELMN.SW": "Elmn",
    "CLTN.SW": "Cltn", "OFN.SW": "Ofn", "VARN.SW": "Varn",
    "LECN.SW": "Lecn", "BVZN.SW": "Bvzn", "BTC.SW": "BTC",
    "BCJ.SW": "Bcj", "GAM.SW": "Gam", "STGN.SW": "Stgn",
    "BIOV.SW": "Biov", "LMN.SW": "Lmn", "FTON.SW": "Fton",
    "ZUBN.SW": "Zubn", "TIBN.SW": "Tibn", "SANN.SW": "Sann",
    "ASCN.SW": "Ascn", "XLS.SW": "Xls", "GAV.SW": "Gav",
    "BBN.SW": "Bbn", "MOLN.SW": "Moln", "HLEE.SW": "Hlee",
    "MCHN.SW": "Mchn", "KLIN.SW": "Klin", "CALN.SW": "Caln",
    "ORON.SW": "Oron", "ALPN.SW": "Alpn", "ALPNE.SW": "Alpne",
    "KUD.SW": "Kud", "GMI.SW": "Gmi", "CURN.SW": "Curn",
    "VILN.SW": "Viln", "ESUN.SW": "Esun", "NBEN.SW": "Nben",
    "GURN.SW": "Gurn", "WIHN.SW": "Wihn", "RLF.SW": "Rlf",
    "YTME.SW": "Ytme", "VLRT.SW": "Vlrt", "ADVN.SW": "Advn",
    "MBTN.SW": "Mbtn", "STRN.SW": "Strn", "RIEN.SW": "Rien",
    "SHLTN.SW": "Shltn", "ASWN.SW": "Aswn", "ZWM.SW": "Zwm",
    "ADXN.SW": "Adxn", "EVE.SW": "Eve", "PEDU.SW": "Pedu",
    "HT5.SW": "Ht5", "EEII.SW": "Eeii", "AIRE.SW": "Aire",
    "CIE.SW": "CIE"
}

# Professionelle Benchmark-Indizes
BENCHMARK_INDICES = {
    "MSCIW": "MSCI World Index", "BCOM": "Bloomberg Commodity Index", 
    "LBUSTRUU": "Bloomberg Global Aggregate Bond", "SPX": "S&P 500 Index",
    "SMI": "Swiss Market Index", "EUNL.DE": "iShares Core MSCI World UCITS ETF",
    "IEGA": "iShares Core € Govt Bond UCITS ETF", "NDX": "NASDAQ 100",
    "DJI": "Dow Jones Industrial Average", "RUT": "Russell 2000",
    "VIX": "CBOE Volatility Index", "COMP": "NASDAQ Composite"
}

# VOLLSTÄNDIGE Indizes-Liste - Alle Kategorien
INDICES = {
    # US-Indizes
    "SPX": "S&P 500 Index", "NDX": "NASDAQ 100", "DJI": "Dow Jones Industrial Average",
    "RUT": "Russell 2000", "VIX": "CBOE Volatility Index", "COMP": "NASDAQ Composite",
    "NYA": "NYSE Composite", "MID": "S&P MidCap 400", "SML": "S&P SmallCap 600",
    "OEX": "S&P 100", "XAX": "NYSE AMEX Composite", "VXN": "NASDAQ Volatility",
    "VXD": "DJIA Volatility", "TXX": "CBOE Technology Index", "DXY": "US Dollar Index",
    "UIX": "CBOE Uranium Index", "CBOE": "CBOE Market Index", "RUI": "Russell 1000",
    "RUA": "Russell 3000", "RAY": "Raymond James", "RMZ": "MSCI US REIT",
    "HGX": "PHLX Housing Sector", "BKX": "KBW Bank Index", "XBD": "S&P Broker Dealer",
    "XLF": "Financial Select Sector", "XLI": "Industrial Select Sector",
    "XLY": "Consumer Discretionary", "XLP": "Consumer Staples", "XLE": "Energy Select Sector",
    "XLU": "Utilities Select Sector", "XLV": "Health Care Select Sector",
    "XLB": "Materials Select Sector", "XLK": "Technology Select Sector",
    "XME": "S&P Metals & Mining", "XPH": "S&P Pharmaceuticals", "XRT": "S&P Retail",
    "XHB": "S&P Homebuilders", "SOX": "PHLX Semiconductor", "OSX": "PHLX Oil Service",
    "DRG": "NYSE Arca Pharmaceutical", "BTK": "NYSE Arca Biotech", "NBI": "NASDAQ Biotech",
    "XNG": "NYSE Arca Natural Gas", "XAL": "NYSE Arca Airline", "XCI": "NYSE Arca Computer",
    "XOI": "NYSE Arca Oil", "XSD": "S&P Semiconductor", "XSW": "S&P Software",
    "XTH": "S&P Technology Hardware", "XTL": "S&P Telecom", "XES": "S&P Oil & Gas Equipment",
    "KBE": "KBW Bank ETF", "KRE": "KBW Regional Banking", "IAK": "iShares Insurance",
    "IAT": "iShares Regional Banks", "PSCE": "S&P SmallCap Energy", "PSCI": "S&P SmallCap Industrials",
    "PSCH": "S&P SmallCap Health Care",
    
    # Europäische Indizes
    "DAX": "DAX Germany", "CAC": "CAC 40 France", "FTSE": "FTSE 100 UK",
    "STOXX50": "Euro Stoxx 50", "AEX": "AEX Netherlands", "IBEX": "IBEX 35 Spain",
    "FTSE MIB": "FTSE MIB Italy", "SMI": "Swiss Market Index", "PSI20": "PSI 20 Portugal",
    "OMX": "OMX Stockholm 30", "ATX": "ATX Austria", "BEL20": "BEL 20 Belgium",
    "ISEQ": "ISEQ Ireland", "WIG": "WIG Poland", "BUX": "BUX Hungary",
    "RTS": "RTS Russia", "BIST": "BIST Turkey", "SOFIX": "SOFIX Bulgaria",
    "SBITOP": "SBITOP Slovenia", "UX": "UX Ukraine", "CEETX": "CEE TX",
    "CROBEX": "CROBEX Croatia", "HEX": "HEX Finland", "LITIN": "LITIN Lithuania",
    "OMXR": "OMX Riga", "OMXT": "OMX Tallinn", "PRAGUE SE PX": "Prague PX",
    "SAX": "SAX Slovakia",
    
    # Asien-Pazifik Indizes
    "NIKKEI": "Nikkei 225 Japan", "HSI": "Hang Seng Hong Kong", 
    "SHCOMP": "Shanghai Composite", "SZCOMP": "Shenzhen Composite",
    "CSI300": "CSI 300 China", "KOSPI": "KOSPI South Korea", "TWSE": "Taiwan Weighted",
    "STI": "Straits Times Singapore", "ASX": "ASX 200 Australia", "SENSEX": "Sensex India",
    "NIFTY50": "Nifty 50 India", "JKSE": "Jakarta Composite", "KLCI": "KLCI Malaysia",
    "PSEI": "PSEi Philippines", "SET": "SET Thailand", "VNI": "VN Index Vietnam",
    "COLOMBO": "Colombo Sri Lanka", "DSEX": "DSEX Bangladesh", "KS11": "KOSPI South Korea",
    "TOPIX": "TOPIX Japan", "TPEX": "TPEX Taiwan", "NZX50": "NZX 50 New Zealand",
    "MNI": "MNI China", "KOSDAQ": "KOSDAQ South Korea", "HSCEI": "Hang Seng China Enterprises",
    "HSML": "Hang Seng MidCap", "CNX500": "CNX 500 India", "BSE500": "BSE 500 India",
    "BSE100": "BSE 100 India", "BSE200": "BSE 200 India",
    
    # Globale/Internationale Indizes
    "MSCIW": "MSCI World", "MSCIEM": "MSCI Emerging Markets", "MSCIEAFE": "MSCI EAFE",
    "MSCIACWI": "MSCI ACWI", "FTSEALLW": "FTSE All-World", "SPGLOBAL100": "S&P Global 100",
    "SPGLOBAL1200": "S&P Global 1200", "DJGLOBAL": "Dow Jones Global",
    "RUSSELLGLOBAL": "Russell Global", "NYSEWL": "NYSE World Leaders",
    "MSCIWEXUSA": "MSCI World ex USA", "MSCIPACIFIC": "MSCI Pacific",
    "MSCIEUROPE": "MSCI Europe", "MSCIASIA": "MSCI Asia", "MSCICHINA": "MSCI China",
    "MSCIJAPAN": "MSCI Japan", "MSCIUK": "MSCI UK", "MSCICANADA": "MSCI Canada",
    "MSCIBRAZIL": "MSCI Brazil", "MSCIINDIA": "MSCI India",
    
    # Sektor-/Branchenindizes
    "DJUS": "Dow Jones US", "SPDR": "SPDR Sectors", "ISHARES": "iShares Core",
    "VANGUARD": "Vanguard Total", "INVESCO": "Invesco QQQ", "GLOBALX": "Global X",
    "ARK": "ARK Innovation", "PHLX": "PHLX Sector", "KBW": "KBW Regional",
    "NASDAQ": "NASDAQ Sector", "BLOOMBERG": "Bloomberg Commodity", "REFINITIV": "Refinitiv",
    "FACTSET": "FactSet", "BARRONS": "Barron's 400", "WILSHIRE": "Wilshire 5000",
    "COHEN": "Cohen & Steers", "ALERIAN": "Alerian MLP", "MVIS": "MVIS",
    "BLUESTAR": "BlueStar", "SOLACTIVE": "Solactive", "STOXXS": "STOXX Europe 600",
    "MSCISECTOR": "MSCI Sector", "SPSECTOR": "S&P Sector", "RUSSELLSECTOR": "Russell Sector",
    "FTSEsECTOR": "FTSE Sector", "DJSECTOR": "Dow Jones Sector", "NASDAQSECTOR": "Nasdaq Sector",
    "CBOESECTOR": "CBOE Sector"
}

# VOLLSTÄNDIGE Andere Assets
OTHER_ASSETS = {
    # Rohstoffe & Futures
    "GOLD": "Gold Spot", "BTC-USD": "Bitcoin", "ETH-USD": "Ethereum", 
    "SPY": "S&P 500 ETF", "VNQ": "Real Estate ETF", "BND": "Total Bond Market",
    "SI=F": "Silver Futures", "CL=F": "Crude Oil Futures", "PL=F": "Platinum Futures",
    "PA=F": "Palladium Futures", "HG=F": "Copper Futures", "NG=F": "Natural Gas Futures",
    "ZC=F": "Corn Futures", "ZW=F": "Wheat Futures", "ZS=F": "Soybean Futures",
    "ZL=F": "Soybean Oil Futures", "ZM=F": "Soybean Meal Futures", "ZO=F": "Oats Futures",
    "KE=F": "KC HRW Wheat Futures", "CC=F": "Cocoa Futures", "CT=F": "Cotton Futures",
    "OJ=F": "Orange Juice Futures", "SB=F": "Sugar Futures", "LB=F": "Lumber Futures",
    "HO=F": "Heating Oil Futures", "RB=F": "RBOB Gasoline Futures",
    
    # Währungen/Forex
    "USD": "US Dollar", "EUR": "Euro", "GBP": "British Pound", "JPY": "Japanese Yen",
    "CHF": "Swiss Franc", "CAD": "Canadian Dollar", "AUD": "Australian Dollar",
    "NZD": "New Zealand Dollar", "CNY": "Chinese Yuan", "HKD": "Hong Kong Dollar",
    "SGD": "Singapore Dollar", "SEK": "Swedish Krona", "NOK": "Norwegian Krone",
    "DKK": "Danish Krone", "MXN": "Mexican Peso", "BRL": "Brazilian Real",
    "RUB": "Russian Ruble", "INR": "Indian Rupee", "KRW": "South Korean Won",
    "TRY": "Turkish Lira", "ZAR": "South African Rand",
    
    # Forex Paare
    "EURUSD=X": "EUR/USD", "GBPUSD=X": "GBP/USD", "USDJPY=X": "USD/JPY",
    "USDCHF=X": "USD/CHF", "AUDUSD=X": "AUD/USD", "USDCAD=X": "USD/CAD",
    "NZDUSD=X": "NZD/USD", "EURGBP=X": "EUR/GBP", "EURJPY=X": "EUR/JPY",
    "GBPJPY=X": "GBP/JPY", "EURCHF=X": "EUR/CHF", "GBPCHF=X": "GBP/CHF",
    "CHFJPY=X": "CHF/JPY", "CADJPY=X": "CAD/JPY", "AUDJPY=X": "AUD/JPY",
    "NZDJPY=X": "NZD/JPY",
    
    # ETFs
    "GLD": "SPDR Gold Trust", "TLT": "iShares 20+ Year Treasury", "XLV": "Health Care Select Sector",
    "XLE": "Energy Select Sector", "XLB": "Materials Select Sector", "XLU": "Utilities Select Sector",
    "IFRA": "iShares Infrastructure", "XLK": "Technology Select Sector", "XLP": "Consumer Staples",
    "XLY": "Consumer Discretionary", "XLI": "Industrial Select Sector", "XLF": "Financial Select Sector",
    "XBI": "SPDR Biotech", "XRT": "SPDR Retail", "XHB": "SPDR Homebuilders",
    "XOP": "SPDR Oil & Gas Exploration", "XME": "SPDR Metals & Mining", "XSD": "SPDR Semiconductor",
    "XSW": "SPDR Software", "XTH": "SPDR Technology Hardware", "XTL": "SPDR Telecom",
    "XES": "SPDR Oil & Gas Equipment", "KBE": "SPDR Banks", "KRE": "SPDR Regional Banks",
    
    # Spezialisierte ETFs
    "REET": "iShares Global REIT", "REM": "iShares Mortgage Real Estate", "BDCS": "UBS ETRACS Business Development",
    "CEF": "Closed-End Fund", "ESG": "iShares ESG Aware", "SRI": "iShares MSCI KLD 400 Social",
    "ICLN": "iShares Global Clean Energy", "TAN": "Invesco Solar", "PBW": "Invesco WilderHill Clean Energy",
    "BLOK": "Amplify Transformational Data", "HACK": "ETFMG Prime Cyber Security", "AIQ": "Global X Artificial Intelligence",
    "BOTZ": "Global X Robotics & AI", "GNOM": "Global X Genomics", "FINX": "Global X FinTech",
    "CLOU": "Global X Cloud Computing", "NERD": "Roundhill Video Games", "BETZ": "Roundhill Sports Betting",
    "YOLO": "AdvisorShares Pure Cannabis", "LIT": "Global X Lithium & Battery Tech", "BATT": "Amplify Lithium & Battery Technology",
    "FAN": "First Trust Global Wind Energy", "HYDR": "Global X Hydrogen", "CGW": "Invesco S&P Global Water",
    "WOOD": "iShares Global Timber", "VEGI": "iShares MSCI Agriculture", "GDX": "VanEck Gold Miners",
    "SIL": "Global X Silver Miners", "COPX": "Global X Copper Miners", "OIH": "VanEck Oil Services",
    "SEA": "Invesco Shipping", "ITA": "iShares Aerospace & Defense", "LUX": "VanEck Luxury Goods",
    "GAMR": "ETFMG Video Game Tech", "SOXX": "iShares PHLX Semiconductor",
    
    # Anleihen/Renten
    "BND": "Vanguard Total Bond", "AGG": "iShares Core US Aggregate", "LQD": "iShares iBoxx Investment Grade",
    "HYG": "iShares iBoxx High Yield", "JNK": "SPDR Bloomberg High Yield", "EMB": "iShares J.P. Morgan EM Bond",
    "TLT": "iShares 20+ Year Treasury", "IEF": "iShares 7-10 Year Treasury", "SHY": "iShares 1-3 Year Treasury",
    "GOVT": "iShares US Treasury", "MUB": "iShares National Muni", "PZA": "Invesco National AMT-Free Muni",
    "BAB": "Invesco Taxable Municipal", "PIMIX": "PIMCO Income", "BOND": "PIMCO Active Bond",
    "BLACKROCK": "BlackRock Total Return", "FIDELITY": "Fidelity Total Bond", "SCHWAB": "Schwab US Aggregate",
    "INVESCOB": "Invesco Total Return", "SPDRB": "SPDR Portfolio Aggregate", "VANECK": "VanEck Investment Grade",
    "GLOBALXB": "Global X Yield", "WISDOMTREE": "WisdomTree Yield"
}

# Schweizer Privatbank Portfolios (simuliert)
SWISS_BANK_PORTFOLIOS = {
    "UBS_Premium": {"return": 6.2, "risk": 12.5, "sharpe": 0.50},
    "CreditSuisse_Wealth": {"return": 5.8, "risk": 13.2, "sharpe": 0.45},
    "JuliusBaer_Premium": {"return": 6.5, "risk": 11.8, "sharpe": 0.55},
    "Pictet_Balanced": {"return": 5.9, "risk": 10.5, "sharpe": 0.56},
    "Vontobel_Growth": {"return": 7.1, "risk": 14.2, "sharpe": 0.51}
}

# Marktzyklen für verschiedene Sektoren
MARKET_CYCLES = {
    "TECH": {"cycle": "Wachstum", "phase": "Früh", "rating": "Hoch", "trend": "↗️"},
    "HEALTH": {"cycle": "Defensiv", "phase": "Spät", "rating": "Mittel", "trend": "➡️"},
    "FINANCIAL": {"cycle": "Zyklisch", "phase": "Mitte", "rating": "Mittel", "trend": "↗️"},
    "ENERGY": {"cycle": "Zyklisch", "phase": "Früh", "rating": "Hoch", "trend": "↗️"},
    "MATERIALS": {"cycle": "Zyklisch", "phase": "Früh", "rating": "Hoch", "trend": "↗️"},
    "UTILITIES": {"cycle": "Defensiv", "phase": "Spät", "rating": "Niedrig", "trend": "➡️"},
    "CONSUMER": {"cycle": "Defensiv", "phase": "Spät", "rating": "Mittel", "trend": "➡️"},
    "INDUSTRIAL": {"cycle": "Zyklisch", "phase": "Mitte", "rating": "Mittel", "trend": "↗️"}
}

# Szenario-Analyse Parameter
SCENARIOS = {
    "normal": {"name": "Normal", "growth_multiplier": 1.0, "volatility_multiplier": 1.0},
    "interest_rise": {"name": "Zinserhöhung", "growth_multiplier": 0.7, "volatility_multiplier": 1.3},
    "inflation": {"name": "Hohe Inflation", "growth_multiplier": 0.8, "volatility_multiplier": 1.4},
    "recession": {"name": "Rezession", "growth_multiplier": 0.5, "volatility_multiplier": 1.8},
    "growth": {"name": "Starkes Wachstum", "growth_multiplier": 1.3, "volatility_multiplier": 0.8}
}

# Übersetzungen
TRANSLATIONS = {
    "de": {
        "title": "Swiss Asset Pro",
        "dashboard": "Dashboard",
        "portfolio": "Portfolio Entwicklung",
        "strategieanalyse": "Strategie Analyse",
        "simulation": "Zukunfts-Simulation",
        "bericht": "Bericht & Analyse",
        "markets": "Märkte & News",
        "assets": "Assets & Investment",
        "methodik": "Methodik",
        "black-litterman": "Black-Litterman",
        "about": "Über mich",
        "password_prompt": "Bitte geben Sie das Passwort ein:",
        "password_placeholder": "Passwort",
        "access_button": "Zugang erhalten",
        "password_error": "Falsches Passwort. Bitte versuchen Sie es erneut.",
        "password_hint": "by Ahmed Choudhary",
        "last_update": "Letztes Update:",
        "smi_return": "SMI Rendite:",
        "portfolio_return": "Portfolio Rendite:",
        "portfolio_value": "Portfolio Wert:"
    }
}

# Globale Variablen für Live-Daten
live_market_data = {}
last_market_update = None

# LIVE DATA SYSTEM API ENDPOINTS:
@app.route('/api/v1/live/sources/status')
def get_live_data_sources_status():
    """Get status of all live data sources"""
    try:
        if not hasattr(app, 'live_data_provider'):
            return jsonify({'error': 'Live data system not initialized'}), 500
        
        source_status = app.live_data_provider.get_source_status()
        db_status = app.live_data_store.get_source_status()
        
        return jsonify({
            'live_sources': source_status,
            'database_status': db_status,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error getting live data sources status: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/live/data/<symbol>')
def get_live_data_v1(symbol):
    """Get live data for a symbol with full metadata"""
    try:
        if not hasattr(app, 'live_data_provider'):
            return jsonify({'error': 'Live data system not initialized'}), 500
        
        data = app.live_data_provider.get_market_data(symbol, 'price')
        if not data:
            return jsonify({'error': f'No data available for {symbol}'}), 404
        
        return jsonify(data)
        
    except Exception as e:
        logger.error(f"Error getting live data for {symbol}: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/live/historical/<symbol>')
def get_live_historical_data(symbol):
    """Get historical data for a symbol"""
    try:
        if not hasattr(app, 'live_data_store'):
            return jsonify({'error': 'Live data system not initialized'}), 500
        
        days = request.args.get('days', 30, type=int)
        historical_data = app.live_data_store.get_historical_market_data(symbol, days)
        
        return jsonify({
            'symbol': symbol,
            'days': days,
            'data_points': len(historical_data),
            'data': historical_data,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error getting historical data for {symbol}: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/live/quality/<symbol>')
def get_data_quality_metrics(symbol):
    """Get data quality metrics for a symbol"""
    try:
        if not hasattr(app, 'live_data_validator'):
            return jsonify({'error': 'Live data system not initialized'}), 500
        
        # Get latest data
        latest_data = app.live_data_store.get_latest_market_data(symbol)
        if not latest_data:
            return jsonify({'error': f'No data available for {symbol}'}), 404
        
        # Calculate quality score
        quality_score = app.live_data_validator.calculate_quality_score(latest_data, symbol)
        
        return jsonify({
            'symbol': symbol,
            'quality_score': quality_score,
            'data_source': latest_data.get('source', 'unknown'),
            'last_updated': latest_data.get('fetched_at', 'unknown'),
            'validation_passed': app.live_data_validator.validate_data(latest_data, symbol),
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error getting data quality metrics for {symbol}: {str(e)}")
        return jsonify({'error': str(e)}), 500

# SMART API ROUTER ENDPOINTS:
@app.route('/api/v1/smart/status')
def get_smart_api_status():
    """Get status of all APIs in the smart router"""
    try:
        if not hasattr(app, 'smart_api_router'):
            return jsonify({'error': 'Smart API router not initialized'}), 500
        
        status = app.smart_api_router.get_api_status()
        return jsonify({
            'apis': status,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error getting smart API status: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/smart/test')
def test_smart_apis():
    """Test all APIs in the smart router"""
    try:
        if not hasattr(app, 'smart_api_router'):
            return jsonify({'error': 'Smart API router not initialized'}), 500
        
        results = app.smart_api_router.test_all_apis()
        return jsonify({
            'test_results': results,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error testing smart APIs: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/smart/data/<symbol>')
def get_smart_api_data(symbol):
    """Get data using smart API router"""
    try:
        if not hasattr(app, 'smart_api_router'):
            return jsonify({'error': 'Smart API router not initialized'}), 500
        
        data = app.smart_api_router.get_market_data(symbol, 'price')
        if not data:
            return jsonify({'error': f'No data available for {symbol}'}), 404
        
        return jsonify(data)
        
    except Exception as e:
        logger.error(f"Error getting smart API data for {symbol}: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/smart/historical/<symbol>')
def get_smart_api_historical(symbol):
    """Get historical data using smart API router"""
    try:
        if not hasattr(app, 'smart_api_router'):
            from smart_api_router import SmartAPIRouter
            app.smart_api_router = SmartAPIRouter()
        
        days = request.args.get('days', 30, type=int)
        data = app.smart_api_router.get_historical_data(symbol, days)
        if not data:
            return jsonify({'error': f'No historical data available for {symbol}'}), 404
        
        return jsonify({
            'symbol': symbol,
            'days': len(data),
            'data': data,
            'source': data[0]['source'] if data else 'unknown'
        })
        
    except Exception as e:
        print(f"Error getting historical data for {symbol}: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/v1/smart/correlation')
def get_smart_correlation():
    """Get correlation matrix using live historical data"""
    try:
        if not hasattr(app, 'smart_api_router'):
            from smart_api_router import SmartAPIRouter
            app.smart_api_router = SmartAPIRouter()
        
        # Standard Portfolio-Symbole
        symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'BTC-USD', '^GSPC']
        days = request.args.get('days', 30, type=int)
        
        # Hole historische Daten für alle Symbole
        historical_data = {}
        for symbol in symbols:
            data = app.smart_api_router.get_historical_data(symbol, days)
            if data:
                historical_data[symbol] = data
        
        if len(historical_data) < 2:
            return jsonify({'error': 'Not enough historical data for correlation analysis'}), 404
        
        # Berechne Korrelationsmatrix
        correlation_matrix = calculate_correlation_matrix(historical_data)
        
        return jsonify({
            'symbols': list(historical_data.keys()),
            'days': days,
            'correlation_matrix': correlation_matrix,
            'data_sources': {symbol: data[0]['source'] if data and len(data) > 0 else 'unknown' for symbol, data in historical_data.items()},
            'data_quality': 'live'
        })
        
    except Exception as e:
        print(f"Error calculating correlation matrix: {str(e)}")
        return jsonify({'error': str(e)}), 500

def calculate_correlation_matrix(historical_data):
    """Berechne Korrelationsmatrix aus historischen Daten"""
    import pandas as pd
    import numpy as np
    
    # Erstelle DataFrame mit Close-Preisen
    df = pd.DataFrame()
    
    for symbol, data in historical_data.items():
        prices = [item['close'] for item in data]
        dates = [item['date'] for item in data]
        df[symbol] = pd.Series(prices, index=dates)
    
    # Berechne tägliche Renditen
    returns = df.pct_change().dropna()
    
    # Berechne Korrelationsmatrix
    correlation_matrix = returns.corr()
    
    # Konvertiere zu Dictionary für JSON
    return correlation_matrix.round(4).to_dict()

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

# Manifest Route
@app.route('/manifest.json')
def serve_manifest():
    return send_from_directory('.', 'manifest.json', mimetype='application/manifest+json')

@app.route('/switch_language/<language>')
def switch_language(language):
    global CURRENT_LANGUAGE
    if language in ['de', 'en']:
        CURRENT_LANGUAGE = language
    return jsonify({"status": "success", "language": CURRENT_LANGUAGE})

# NEUE IMPORTS oben hinzufügen
import requests
from bs4 import BeautifulSoup
import time

# NEUE FUNKTIONEN EINFÜGEN:

def get_yahoo_finance_data(symbol):
    """Deine ursprüngliche Yahoo Logic als separate Funktion"""
    try:
        # Symbol-Korrektur für Yahoo Finance
        yahoo_symbol = symbol
        
        # Für Schweizer Aktien .SW Endung sicherstellen
        if symbol in SWISS_STOCKS and not symbol.endswith('.SW'):
            yahoo_symbol = f"{symbol}.SW"
        
        # Für Indizes ^ voranstellen wenn nicht vorhanden
        elif symbol in INDICES and not symbol.startswith('^'):
            # Spezielle Behandlung für bekannte Indizes
            index_mapping = {
                "SPX": "^GSPC", "NDX": "^NDX", "DJI": "^DJI", 
                "RUT": "^RUT", "VIX": "^VIX", "COMP": "^IXIC",
                "DAX": "^GDAXI", "CAC": "^FCHI", "FTSE": "^FTSE",
                "SMI": "^SSMI", "NIKKEI": "^N225", "HSI": "^HSI"
            }
            yahoo_symbol = index_mapping.get(symbol, f"^{symbol}")
        
        # Für Rohstoffe/Futures
        elif "=F" in symbol:
            yahoo_symbol = symbol  # Bereits korrekt
        
        # Für Forex
        elif "=X" in symbol:
            yahoo_symbol = symbol  # Bereits korrekt
        
        print(f"Yahoo fetching: {yahoo_symbol} (original: {symbol})")
        
        ticker = yf.Ticker(yahoo_symbol)
        info = ticker.info
        hist = ticker.history(period="2d", interval="1d")
        
        if hist.empty:
            return None
        
        current_price = hist['Close'].iloc[-1]
        
        # Previous Close berechnen
        if len(hist) > 1:
            previous_close = hist['Close'].iloc[-2]
        else:
            previous_close = info.get('previousClose', current_price * 0.99)
        
        change = current_price - previous_close
        change_percent = (change / previous_close) * 100
        
        return {
            "symbol": symbol,
            "yahoo_symbol": yahoo_symbol,
            "price": round(current_price, 2),
            "change": round(change, 2),
            "change_percent": round(change_percent, 2),
            "currency": info.get('currency', 'USD'),
            "name": info.get('longName', info.get('shortName', symbol))
        }
    except Exception as e:
        print(f"Yahoo error for {symbol}: {e}")
        return None

def get_alpha_vantage_data(symbol):
    """Backup Daten von Alpha Vantage (kostenlose API)"""
    try:
        API_KEY = os.getenv("ALPHA_VANTAGE_API_KEY", "demo")  # Professioneller API-Key
        url = f"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}&apikey={API_KEY}"
        
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if "Global Quote" in data:
            quote = data["Global Quote"]
            price = float(quote["05. price"])
            change = float(quote["09. change"])
            change_percent = float(quote["10. change percent"].rstrip('%'))
            
            return {
                "symbol": symbol,
                "price": price,
                "change": change,
                "change_percent": change_percent,
                "currency": "USD",
                "name": symbol,
                "source": "Alpha Vantage"
            }
    except Exception as e:
        print(f"Alpha Vantage error for {symbol}: {e}")
    return None

def get_polygon_data(symbol):
    """Polygon.io API für professionelle Marktdaten"""
    try:
        API_KEY = os.getenv("POLYGON_API_KEY", "")
        if not API_KEY:
            return None
            
        url = f"https://api.polygon.io/v2/aggs/ticker/{symbol}/prev?apikey={API_KEY}"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if data.get('status') == 'OK' and data.get('results'):
            result = data['results'][0]
            return {
                'symbol': symbol,
                'price': result['c'],
                'change': result['c'] - result['o'],
                'change_percent': ((result['c'] - result['o']) / result['o']) * 100,
                'volume': result['v'],
                'high': result['h'],
                'low': result['l'],
                'open': result['o'],
                'previous_close': result['o'],
                'currency': 'USD',
                'name': symbol,
                'source': 'Polygon.io'
            }
    except Exception as e:
        print(f"Polygon.io error for {symbol}: {e}")
        return None

def get_finnhub_data(symbol):
    """Finnhub API für Echtzeitdaten"""
    try:
        API_KEY = os.getenv("FINNHUB_API_KEY", "")
        if not API_KEY:
            return None
            
        url = f"https://finnhub.io/api/v1/quote?symbol={symbol}&token={API_KEY}"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if 'c' in data and data['c'] > 0:
            return {
                'symbol': symbol,
                'price': data['c'],
                'change': data['d'],
                'change_percent': data['dp'],
                'volume': None,
                'high': data['h'],
                'low': data['l'],
                'open': data['o'],
                'previous_close': data['pc'],
                'currency': 'USD',
                'name': symbol,
                'source': 'Finnhub'
            }
    except Exception as e:
        print(f"Finnhub error for {symbol}: {e}")
        return None

def get_scraped_data(symbol):
    """Web Scraping Fallback für spezielle Indizes"""
    try:
        # Hier kannst du später Investing.com, Bloomberg etc. scrapen
        # Für jetzt: einfache Simulation basierend auf Symbol-Typ
        return None  # Später implementieren
    except:
        return None

# ENHANCED DATA INGESTION PIPELINE WITH SMART API ROUTING:
@app.route('/get_live_data/<symbol>')
def get_live_data(symbol):
    """Enhanced Multi-Source Data Pipeline with Smart API Routing and Fallback"""
    try:
        # Initialize smart API router if not already done
        if not hasattr(app, 'smart_api_router'):
            from smart_api_router import SmartAPIRouter
            app.smart_api_router = SmartAPIRouter()
        
        # Try to get data from smart API router first
        live_data = app.smart_api_router.get_market_data(symbol, 'price')
        if live_data and live_data.get('price', 0) > 0:
            # Add additional metadata
            live_data['reliability'] = 'High'
            live_data['data_quality'] = 'live'
            live_data['confidence_score'] = 85
            
            # Cache the data
            cache_key = f"market_data:{symbol}"
            cache.set(cache_key, live_data, ttl=300)  # 5 min cache
            
            print(f"Successfully fetched live data for {symbol} from {live_data['source']}")
            return jsonify(live_data)
        
        # Fallback to original system if smart API fails
        print(f"Smart API failed for {symbol}, falling back to original system")
        
        # Check cache first
        cache_key = f"market_data:{symbol}"
        cached_data = cache.get(cache_key)
        if cached_data and time.time() - cached_data.get('timestamp', 0) < 300:  # 5 min cache
            cached_data['source'] = 'Cache'
            cached_data['reliability'] = 'High'
            return jsonify(cached_data)

        # VERSUCH 1: Yahoo Finance (Primary Source - kostenlos)
        yahoo_data = get_yahoo_finance_data(symbol)
        if yahoo_data and yahoo_data.get('price', 0) > 0:
            yahoo_data['source'] = 'Yahoo Finance'
            yahoo_data['reliability'] = 'High'
            yahoo_data['timestamp'] = time.time()
            cache.set(cache_key, yahoo_data, ttl=300)  # 5 min cache
            return jsonify(yahoo_data)

        # VERSUCH 2: Polygon.io (Professionell - kostenpflichtig)
        polygon_data = get_polygon_data(symbol)
        if polygon_data and polygon_data.get('price', 0) > 0:
            polygon_data['source'] = 'Polygon.io'
            polygon_data['reliability'] = 'Very High'
            polygon_data['timestamp'] = time.time()
            cache.set(cache_key, polygon_data, ttl=300)
            return jsonify(polygon_data)

        # VERSUCH 3: Finnhub (Professionell - kostenpflichtig)
        finnhub_data = get_finnhub_data(symbol)
        if finnhub_data and finnhub_data.get('price', 0) > 0:
            finnhub_data['source'] = 'Finnhub'
            finnhub_data['reliability'] = 'Very High'
            finnhub_data['timestamp'] = time.time()
            cache.set(cache_key, finnhub_data, ttl=300)
            return jsonify(finnhub_data)

        # VERSUCH 4: Alpha Vantage (Backup - kostenlos)
        alpha_data = get_alpha_vantage_data(symbol)
        if alpha_data and alpha_data.get('price', 0) > 0:
            alpha_data['source'] = 'Alpha Vantage'
            alpha_data['reliability'] = 'Medium'
            alpha_data['timestamp'] = time.time()
            cache.set(cache_key, alpha_data, ttl=300)
            return jsonify(alpha_data)

        # VERSUCH 5: Web Scraping (Fallback)
        scraped_data = get_scraped_data(symbol)
        if scraped_data and scraped_data.get('price', 0) > 0:
            scraped_data['source'] = 'Web Scraping'
            scraped_data['reliability'] = 'Low'
            scraped_data['timestamp'] = time.time()
            cache.set(cache_key, scraped_data, ttl=300)
            return jsonify(scraped_data)

        # Fallback: Simulierte Daten mit Warnung
        simulated = get_simulated_data(symbol)
        simulated['source'] = 'Simulated Data'
        simulated['reliability'] = 'None'
        simulated['warning'] = 'Using simulated data - real market data unavailable'
        simulated['timestamp'] = time.time()
        cache.set(cache_key, simulated, ttl=60)  # Shorter cache for simulated data
        return jsonify(simulated)
    except Exception as e:
        print(f"Multi-source error for {symbol}: {e}")
        simulated = get_simulated_data(symbol)
        simulated['source'] = 'Error Fallback'
        simulated['reliability'] = 'None'
        simulated['error'] = str(e)
        simulated['timestamp'] = time.time()
        cache.set(cache_key, simulated, ttl=60)
        return jsonify(simulated)
def get_simulated_data(symbol):
    """Erweiterte simulierte Daten mit realistischen Marktcharakteristika"""
    import numpy as np
    from datetime import datetime, timedelta
    
    # Realistischere Basispreise basierend auf Asset-Klasse
    asset_classes = {
        'stocks': {'base': 100, 'volatility': 0.02, 'trend': 0.0001},
        'crypto': {'base': 50, 'volatility': 0.05, 'trend': 0.0002},
        'commodities': {'base': 150, 'volatility': 0.03, 'trend': 0.0001},
        'bonds': {'base': 100, 'volatility': 0.01, 'trend': 0.00005},
        'indices': {'base': 3000, 'volatility': 0.015, 'trend': 0.0001}
    }
    
    # Bestimme Asset-Klasse
    asset_class = 'stocks'  # Default
    if symbol in CRYPTO:
        asset_class = 'crypto'
    elif symbol in COMMODITIES:
        asset_class = 'commodities'
    elif symbol in BONDS:
        asset_class = 'bonds'
    elif symbol.startswith('^'):
        asset_class = 'indices'
    
    config = asset_classes[asset_class]
    
    # Realistische Volatilität und Trend
    volatility = config['volatility']
    trend = config['trend']
    
    # Zeitbasierte Simulation (täglich)
    days_since_epoch = (datetime.now() - datetime(2020, 1, 1)).days
    daily_return = np.random.normal(trend, volatility)
    
    # Kumulative Rendite über Zeit
    cumulative_return = daily_return * days_since_epoch
    price = config['base'] * (1 + cumulative_return)
    
    # Tägliche Änderung
    daily_change = price * daily_return
    change_percent = daily_change / price * 100
    
    # Zusätzliche Metriken
    volume = random.randint(100000, 10000000)
    high = price * (1 + abs(daily_return) * 2)
    low = price * (1 - abs(daily_return) * 2)
    
    return {
        "symbol": symbol,
        "price": round(price, 2),
        "change": round(daily_change, 2),
        "change_percent": round(change_percent, 2),
        "volume": volume,
        "high": round(high, 2),
        "low": round(low, 2),
        "open": round(price - daily_change, 2),
        "previous_close": round(price - daily_change, 2),
        "currency": "USD",
        "name": symbol,
        "source": "Simulated",
        "market_cap": round(price * volume * 1000, 0) if asset_class == 'stocks' else None,
        "pe_ratio": round(random.uniform(10, 30), 2) if asset_class == 'stocks' else None,
        "timestamp": datetime.now().isoformat()
    }
# Erweiterte Finanzberechnungen
def calculate_technical_indicators(prices, period=20):
    """Berechnet technische Indikatoren für Charts"""
    import numpy as np
    
    if len(prices) < period:
        return {}
    
    prices = np.array(prices)
    
    # Simple Moving Average (SMA)
    sma = np.mean(prices[-period:])
    
    # Exponential Moving Average (EMA)
    alpha = 2 / (period + 1)
    ema = prices[0]
    for price in prices[1:]:
        ema = alpha * price + (1 - alpha) * ema
    
    # RSI (Relative Strength Index)
    deltas = np.diff(prices)
    gains = np.where(deltas > 0, deltas, 0)
    losses = np.where(deltas < 0, -deltas, 0)
    
    avg_gain = np.mean(gains[-period:]) if len(gains) >= period else 0
    avg_loss = np.mean(losses[-period:]) if len(losses) >= period else 0
    
    if avg_loss == 0:
        rsi = 100
    else:
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
    
    # Bollinger Bands
    std = np.std(prices[-period:])
    upper_band = sma + (2 * std)
    lower_band = sma - (2 * std)
    
    # MACD
    ema_12 = calculate_ema(prices, 12)
    ema_26 = calculate_ema(prices, 26)
    macd_line = ema_12 - ema_26
    signal_line = calculate_ema([macd_line], 9)[0] if len(prices) >= 26 else macd_line
    histogram = macd_line - signal_line
    
    return {
        'sma': round(sma, 2),
        'ema': round(ema, 2),
        'rsi': round(rsi, 2),
        'bollinger_upper': round(upper_band, 2),
        'bollinger_lower': round(lower_band, 2),
        'macd': round(macd_line, 4),
        'macd_signal': round(signal_line, 4),
        'macd_histogram': round(histogram, 4)
    }

def calculate_ema(prices, period):
    """Berechnet Exponential Moving Average"""
    import numpy as np
    
    if len(prices) < period:
        return prices[-1] if prices else 0
    
    alpha = 2 / (period + 1)
    ema = prices[0]
    for price in prices[1:]:
        ema = alpha * price + (1 - alpha) * ema
    return ema

def calculate_portfolio_metrics(portfolio_data):
    """Berechnet erweiterte Portfolio-Metriken"""
    import numpy as np
    
    if not portfolio_data:
        return {}
    
    returns = [asset.get('change_percent', 0) for asset in portfolio_data.values()]
    weights = [asset.get('weight', 1.0/len(portfolio_data)) for asset in portfolio_data.values()]
    
    # Portfolio-Rendite
    portfolio_return = sum(r * w for r, w in zip(returns, weights))
    
    # Portfolio-Volatilität (vereinfacht)
    portfolio_volatility = np.std(returns) * np.sqrt(252)  # Annualisiert
    
    # Sharpe Ratio (vereinfacht, ohne risikofreien Zinssatz)
    sharpe_ratio = portfolio_return / portfolio_volatility if portfolio_volatility > 0 else 0
    
    # Maximum Drawdown
    cumulative_returns = np.cumprod([1 + r/100 for r in returns])
    running_max = np.maximum.accumulate(cumulative_returns)
    drawdown = (cumulative_returns - running_max) / running_max
    max_drawdown = np.min(drawdown) * 100
    
    # Value at Risk (VaR) 95%
    var_95 = np.percentile(returns, 5)
    
    return {
        'portfolio_return': round(portfolio_return, 2),
        'portfolio_volatility': round(portfolio_volatility, 2),
        'sharpe_ratio': round(sharpe_ratio, 3),
        'max_drawdown': round(max_drawdown, 2),
        'var_95': round(var_95, 2),
        'total_assets': len(portfolio_data)
    }

def calculate_correlation_matrix(assets_data):
    """Berechnet Korrelationsmatrix zwischen Assets"""
    import numpy as np
    
    if len(assets_data) < 2:
        return {}
    
    # Erstelle einfache Korrelationsmatrix
    symbols = list(assets_data.keys())
    correlation_matrix = {}
    
    for i, symbol1 in enumerate(symbols):
        correlation_matrix[symbol1] = {}
        for j, symbol2 in enumerate(symbols):
            if i == j:
                correlation_matrix[symbol1][symbol2] = 1.0
            else:
                # Vereinfachte Korrelation basierend auf Renditen
                ret1 = assets_data[symbol1].get('change_percent', 0)
                ret2 = assets_data[symbol2].get('change_percent', 0)
                # Simuliere Korrelation basierend auf Ähnlichkeit der Renditen
                correlation = 0.5 if abs(ret1 - ret2) < 2 else -0.2
                correlation_matrix[symbol1][symbol2] = round(correlation, 3)
    
    return correlation_matrix

# Neue API-Endpunkte für erweiterte Analysen
@app.route('/api/technical_analysis/<symbol>')
def get_technical_analysis(symbol):
    """Liefert technische Analyse für ein Asset"""
    try:
        # Hole historische Daten (vereinfacht)
        try:
            response = requests.get(f"{request.url_root}get_live_data/{symbol}", timeout=5)
            if response.status_code == 200:
                data = response.json()
            else:
                return jsonify({'error': 'No data available'}), 404
        except:
            return jsonify({'error': 'No data available'}), 404
        
        # Simuliere historische Preise für technische Indikatoren
        import numpy as np
        base_price = data.get('price', 100)
        historical_prices = [base_price * (1 + np.random.normal(0, 0.02)) for _ in range(50)]
        
        indicators = calculate_technical_indicators(historical_prices)
        
        # Trading-Signale
        signals = {}
        if indicators.get('rsi', 50) > 70:
            signals['rsi'] = 'Overbought - Consider Selling'
        elif indicators.get('rsi', 50) < 30:
            signals['rsi'] = 'Oversold - Consider Buying'
        else:
            signals['rsi'] = 'Neutral'
        
        if indicators.get('macd', 0) > indicators.get('macd_signal', 0):
            signals['macd'] = 'Bullish - MACD above Signal'
        else:
            signals['macd'] = 'Bearish - MACD below Signal'
        
        return jsonify({
            'symbol': symbol,
            'indicators': indicators,
            'signals': signals,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/portfolio_analysis')
def get_portfolio_analysis():
    """Liefert erweiterte Portfolio-Analyse"""
    try:
        # Hole aktuelle Portfolio-Daten
        portfolio_data = {}
        
        # Simuliere Portfolio-Daten basierend auf aktuellen Marktdaten
        symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA']
        for symbol in symbols:
            try:
                response = requests.get(f"{request.url_root}get_live_data/{symbol}", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    portfolio_data[symbol] = {
                        'price': data.get('price', 0),
                        'change_percent': data.get('change_percent', 0),
                        'weight': 1.0 / len(symbols)  # Gleichgewichtung
                    }
            except:
                # Fallback zu simulierten Daten
                portfolio_data[symbol] = {
                    'price': 100 + (hash(symbol) % 200),
                    'change_percent': (hash(symbol) % 10) - 5,
                    'weight': 1.0 / len(symbols)
                }
        
        if not portfolio_data:
            return jsonify({'error': 'No portfolio data available'}), 404
        
        # Berechne Portfolio-Metriken
        metrics = calculate_portfolio_metrics(portfolio_data)
        
        # Berechne Korrelationsmatrix
        correlation_matrix = calculate_correlation_matrix(portfolio_data)
        
        # Portfolio-Empfehlungen
        recommendations = []
        if metrics.get('sharpe_ratio', 0) < 0.5:
            recommendations.append("Consider diversifying portfolio to improve risk-adjusted returns")
        if metrics.get('max_drawdown', 0) < -20:
            recommendations.append("High drawdown detected - consider risk management")
        if len(portfolio_data) < 5:
            recommendations.append("Consider adding more assets for better diversification")
        
        return jsonify({
            'portfolio_metrics': metrics,
            'correlation_matrix': correlation_matrix,
            'recommendations': recommendations,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/market_sentiment')
def get_market_sentiment():
    """Liefert Marktstimmung basierend auf verschiedenen Indikatoren"""
    try:
        # Hole Daten für verschiedene Indizes
        indices = ['^GSPC', '^IXIC', '^DJI', '^SSMI', '^FTSE']
        index_data = {}
        
        for index in indices:
            try:
                response = requests.get(f"{request.url_root}get_live_data/{index}", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    index_data[index] = data.get('change_percent', 0)
            except:
                pass
        
        # Berechne Marktstimmung
        avg_change = sum(index_data.values()) / len(index_data) if index_data else 0
        
        if avg_change > 1:
            sentiment = 'Very Bullish'
            color = '#00ff00'
        elif avg_change > 0.5:
            sentiment = 'Bullish'
            color = '#90ee90'
        elif avg_change > -0.5:
            sentiment = 'Neutral'
            color = '#ffff00'
        elif avg_change > -1:
            sentiment = 'Bearish'
            color = '#ffa500'
        else:
            sentiment = 'Very Bearish'
            color = '#ff0000'
        
        # Volatilitäts-Indikator
        import numpy as np
        volatility = np.std(list(index_data.values())) if len(index_data) > 1 else 0
        
        return jsonify({
            'sentiment': sentiment,
            'color': color,
            'average_change': round(avg_change, 2),
            'volatility': round(volatility, 2),
            'index_data': index_data,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/swiss_tax_calculation', methods=['POST'])
def calculate_swiss_taxes():
    """Calculate Swiss taxes for portfolio transactions"""
    try:
        data = request.get_json()
        symbol = data.get('symbol')
        transaction_type = data.get('type', 'purchase')  # purchase, sale, dividend
        amount = float(data.get('amount', 0))
        
        is_swiss_security = symbol in SWISS_STOCKS or symbol in SWISS_INDICES
        
        # Calculate taxes based on transaction type
        if transaction_type == 'purchase' or transaction_type == 'sale':
            stamp_tax = calculate_swiss_stamp_tax(amount, is_swiss_security)
            withholding_tax = 0
        elif transaction_type == 'dividend':
            stamp_tax = 0
            withholding_tax = calculate_swiss_withholding_tax(amount, is_swiss_security)
        else:
            stamp_tax = 0
            withholding_tax = 0
        
        total_tax = stamp_tax + withholding_tax
        net_amount = amount - total_tax
        
        # Store calculation in database
        conn = sqlite3.connect('swiss_asset_manager.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO tax_calculations 
            (symbol, transaction_type, amount, stamp_tax, withholding_tax, net_amount, calculation_date)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (symbol, transaction_type, amount, stamp_tax, withholding_tax, net_amount, datetime.now().isoformat()))
        conn.commit()
        conn.close()
        
        return jsonify({
            'symbol': symbol,
            'transaction_type': transaction_type,
            'gross_amount': amount,
            'stamp_tax': stamp_tax,
            'withholding_tax': withholding_tax,
            'total_tax': total_tax,
            'net_amount': net_amount,
            'is_swiss_security': is_swiss_security,
            'tax_rate': (total_tax / amount * 100) if amount > 0 else 0
        })
        
    except Exception as e:
        return jsonify({'error': f'Tax calculation failed: {str(e)}'}), 500

@app.route('/api/stress_test', methods=['POST'])
def run_stress_test():
    """Run comprehensive stress testing on portfolio"""
    try:
        data = request.get_json()
        portfolio_data = data.get('portfolio', {})
        custom_scenarios = data.get('custom_scenarios', {})
        
        # Get current market data
        market_data = {}
        for symbol in portfolio_data.keys():
            try:
                response = requests.get(f"{request.url_root}get_live_data/{symbol}")
                if response.status_code == 200:
                    market_data[symbol] = response.json()
            except Exception:
                continue
        
        # Run standard stress tests
        stress_results = calculate_stress_test_scenarios(portfolio_data, market_data)
        
        # Add custom scenarios if provided
        for scenario_name, shocks in custom_scenarios.items():
            scenario_value = 0
            for symbol, value in portfolio_data.items():
                shock_multiplier = 1.0
                for shock_type, shock_value in shocks.items():
                    if shock_type in symbol.lower() or shock_type == 'all':
                        shock_multiplier += shock_value
                scenario_value += value * shock_multiplier
            
            stress_results[f'custom_{scenario_name}'] = {
                'portfolio_value': scenario_value,
                'return': (scenario_value - sum(portfolio_data.values())) / sum(portfolio_data.values()),
                'shocks_applied': shocks
            }
        
        # Calculate worst-case scenario
        worst_case = min(stress_results.values(), key=lambda x: x['return'])
        
        return jsonify({
            'stress_test_results': stress_results,
            'worst_case_scenario': worst_case,
            'portfolio_resilience': {
                'max_loss': abs(worst_case['return']) * 100,
                'recommendation': 'High risk' if abs(worst_case['return']) > 0.3 else 'Moderate risk' if abs(worst_case['return']) > 0.2 else 'Low risk'
            }
        })
        
    except Exception as e:
        return jsonify({'error': f'Stress test failed: {str(e)}'}), 500

@app.route('/api/portfolio_optimization', methods=['POST'])
def optimize_portfolio():
    """Optimize portfolio for Swiss tax efficiency and risk-adjusted returns"""
    try:
        data = request.get_json()
        current_portfolio = data.get('current_portfolio', {})
        target_return = data.get('target_return', 0.08)  # 8% target return
        risk_tolerance = data.get('risk_tolerance', 'moderate')  # conservative, moderate, aggressive
        
        # Get historical data for optimization
        symbols = list(current_portfolio.keys())
        returns_data = {}
        
        for symbol in symbols:
            try:
                ticker = yf.Ticker(symbol)
                hist = ticker.history(period="1y")
                if not hist.empty:
                    returns_data[symbol] = hist['Close'].pct_change().dropna()
            except Exception:
                continue
        
        if len(returns_data) < 2:
            return jsonify({'error': 'Insufficient data for optimization'}), 400
        
        # Create returns matrix
        returns_df = pd.DataFrame(returns_data)
        returns_df = returns_df.dropna()
        
        # Calculate expected returns and covariance matrix
        expected_returns = returns_df.mean() * 252  # Annualized
        cov_matrix = returns_df.cov() * 252  # Annualized
        
        # Swiss tax adjustment
        for symbol in expected_returns.index:
            if symbol in SWISS_STOCKS or symbol in SWISS_INDICES:
                expected_returns[symbol] *= 1.05  # 5% boost for Swiss securities (no capital gains tax)
        
        # Risk tolerance adjustment
        risk_multiplier = {'conservative': 0.5, 'moderate': 1.0, 'aggressive': 1.5}
        cov_matrix *= risk_multiplier.get(risk_tolerance, 1.0)
        
        # Portfolio optimization using Markowitz
        n_assets = len(expected_returns)
        
        def portfolio_performance(weights):
            portfolio_return = np.sum(weights * expected_returns)
            portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
            return portfolio_return, portfolio_volatility
        
        def negative_sharpe(weights):
            p_ret, p_vol = portfolio_performance(weights)
            return -(p_ret - 0.02) / p_vol  # Assuming 2% risk-free rate
        
        # Constraints
        constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})  # Weights sum to 1
        bounds = tuple((0, 1) for _ in range(n_assets))  # No short selling
        
        # Initial guess
        initial_weights = np.array([1/n_assets] * n_assets)
        
        # Optimize
        result = minimize(negative_sharpe, initial_weights, method='SLSQP', bounds=bounds, constraints=constraints)
        
        if result.success:
            optimal_weights = result.x
            optimal_return, optimal_volatility = portfolio_performance(optimal_weights)
            optimal_sharpe = (optimal_return - 0.02) / optimal_volatility
            
            # Create optimized portfolio
            total_value = sum(current_portfolio.values())
            optimized_portfolio = {}
            for i, symbol in enumerate(symbols):
                optimized_portfolio[symbol] = optimal_weights[i] * total_value
            
            return jsonify({
                'optimized_portfolio': optimized_portfolio,
                'optimal_weights': dict(zip(symbols, optimal_weights)),
                'expected_return': optimal_return,
                'expected_volatility': optimal_volatility,
                'sharpe_ratio': optimal_sharpe,
                'rebalancing_needed': any(abs(optimal_weights[i] - current_portfolio[symbols[i]]/total_value) > 0.05 for i in range(len(symbols)))
            })
        else:
            return jsonify({'error': 'Optimization failed'}), 500
            
    except Exception as e:
        return jsonify({'error': f'Portfolio optimization failed: {str(e)}'}), 500

# ENHANCED DATA PIPELINE API ENDPOINT
@app.route('/api/v1/marketdata', methods=['GET'])
def get_market_data_api():
    """Enhanced market data API with caching and multiple sources"""
    try:
        symbol = request.args.get('symbol')
        if not symbol:
            return jsonify({'error': 'Symbol parameter required'}), 400
        
        # Get data using enhanced pipeline
        response = get_live_data(symbol)
        data = response.get_json() if hasattr(response, 'get_json') else response
        
        return jsonify({
            'success': True,
            'symbol': symbol,
            'data': data,
            'timestamp': time.time()
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/v1/marketdata/batch', methods=['POST'])
def get_batch_market_data():
    """Get market data for multiple symbols in batch"""
    try:
        data = request.get_json()
        symbols = data.get('symbols', [])
        
        if not symbols:
            return jsonify({'error': 'Symbols array required'}), 400
        
        results = {}
        for symbol in symbols:
            try:
                response = get_live_data(symbol)
                symbol_data = response.get_json() if hasattr(response, 'get_json') else response
                results[symbol] = symbol_data
                time.sleep(0.1)  # Rate limiting
            except Exception as e:
                results[symbol] = {'error': str(e)}
        
        return jsonify({
            'success': True,
            'data': results,
            'timestamp': time.time()
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

# INTERACTIVE CHARTS API
@app.route('/api/v1/charts/historical', methods=['GET'])
def get_historical_chart_data():
    """Get historical data for interactive charts"""
    try:
        symbol = request.args.get('symbol')
        period = request.args.get('period', '1mo')  # 1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max
        interval = request.args.get('interval', '1d')  # 1m, 2m, 5m, 15m, 30m, 60m, 90m, 1h, 1d, 5d, 1wk, 1mo, 3mo
        
        if not symbol:
            return jsonify({'error': 'Symbol parameter required'}), 400
        
        # Get historical data from Yahoo Finance
        ticker = yf.Ticker(symbol)
        hist = ticker.history(period=period, interval=interval)
        
        if hist.empty:
            return jsonify({'error': 'No historical data available'}), 404
        
        # Convert to chart-friendly format
        chart_data = {
            'labels': hist.index.strftime('%Y-%m-%d').tolist(),
            'datasets': [{
                'label': f'{symbol} Price',
                'data': hist['Close'].tolist(),
                'borderColor': '#3b82f6',
                'backgroundColor': 'rgba(59, 130, 246, 0.1)',
                'fill': True,
                'tension': 0.1
            }]
        }
        
        # Add volume data if available
        if 'Volume' in hist.columns:
            chart_data['volume'] = {
                'labels': hist.index.strftime('%Y-%m-%d').tolist(),
                'datasets': [{
                    'label': 'Volume',
                    'data': hist['Volume'].tolist(),
                    'backgroundColor': 'rgba(156, 163, 175, 0.5)',
                    'borderColor': 'rgba(156, 163, 175, 1)',
                    'borderWidth': 1
                }]
            }
        
        return jsonify({
            'success': True,
            'symbol': symbol,
            'period': period,
            'interval': interval,
            'data': chart_data,
            'metadata': {
                'start_date': hist.index[0].strftime('%Y-%m-%d'),
                'end_date': hist.index[-1].strftime('%Y-%m-%d'),
                'data_points': len(hist),
                'price_range': {
                    'min': float(hist['Close'].min()),
                    'max': float(hist['Close'].max()),
                    'current': float(hist['Close'].iloc[-1])
                }
            }
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/v1/charts/technical', methods=['GET'])
def get_technical_indicators():
    """Get technical indicators for charts"""
    try:
        symbol = request.args.get('symbol')
        period = request.args.get('period', '6mo')
        
        if not symbol:
            return jsonify({'error': 'Symbol parameter required'}), 400
        
        # Get historical data
        ticker = yf.Ticker(symbol)
        hist = ticker.history(period=period)
        
        if hist.empty:
            return jsonify({'error': 'No historical data available'}), 404
        
        # Calculate technical indicators
        indicators = calculate_technical_indicators(hist)
        
        # Format for charts
        chart_data = {
            'labels': hist.index.strftime('%Y-%m-%d').tolist(),
            'datasets': []
        }
        
        # Price data
        chart_data['datasets'].append({
            'label': 'Price',
            'data': hist['Close'].tolist(),
            'borderColor': '#3b82f6',
            'backgroundColor': 'rgba(59, 130, 246, 0.1)',
            'fill': False,
            'yAxisID': 'y'
        })
        
        # Moving averages
        if 'sma_20' in indicators:
            chart_data['datasets'].append({
                'label': 'SMA 20',
                'data': indicators['sma_20'],
                'borderColor': '#ef4444',
                'backgroundColor': 'transparent',
                'fill': False,
                'yAxisID': 'y'
            })
        
        if 'ema_12' in indicators:
            chart_data['datasets'].append({
                'label': 'EMA 12',
                'data': indicators['ema_12'],
                'borderColor': '#10b981',
                'backgroundColor': 'transparent',
                'fill': False,
                'yAxisID': 'y'
            })
        
        # RSI data (separate chart)
        rsi_data = {
            'labels': hist.index.strftime('%Y-%m-%d').tolist(),
            'datasets': [{
                'label': 'RSI',
                'data': indicators.get('rsi', []),
                'borderColor': '#f59e0b',
                'backgroundColor': 'rgba(245, 158, 11, 0.1)',
                'fill': True,
                'yAxisID': 'y'
            }]
        }
        
        return jsonify({
            'success': True,
            'symbol': symbol,
            'price_chart': chart_data,
            'rsi_chart': rsi_data,
            'indicators': indicators
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

# DCF VALUATION MODULE
def calculate_dcf_valuation(symbol, growth_rate=None, terminal_growth_rate=0.025, wacc=None):
    """Calculate DCF valuation for a company"""
    try:
        # Get company data
        ticker = yf.Ticker(symbol)
        info = ticker.info
        
        # Get financial data
        financials = ticker.financials
        balance_sheet = ticker.balance_sheet
        cashflow = ticker.cashflow
        
        if financials.empty or cashflow.empty:
            return None
        
        # Extract key metrics
        revenue = financials.loc['Total Revenue'].iloc[0] if 'Total Revenue' in financials.index else 0
        free_cash_flow = cashflow.loc['Free Cash Flow'].iloc[0] if 'Free Cash Flow' in cashflow.index else 0
        
        # Calculate growth rate if not provided
        if growth_rate is None:
            if len(financials.columns) >= 2:
                prev_revenue = financials.loc['Total Revenue'].iloc[1] if 'Total Revenue' in financials.index else revenue
                growth_rate = (revenue - prev_revenue) / prev_revenue if prev_revenue > 0 else 0.05
            else:
                growth_rate = 0.05  # Default 5% growth
        
        # Calculate WACC if not provided
        if wacc is None:
            # Simplified WACC calculation
            market_cap = info.get('marketCap', 0)
            total_debt = balance_sheet.loc['Total Debt'].iloc[0] if 'Total Debt' in balance_sheet.index else 0
            cash = balance_sheet.loc['Cash And Cash Equivalents'].iloc[0] if 'Cash And Cash Equivalents' in balance_sheet.index else 0
            
            equity_value = market_cap
            debt_value = total_debt - cash
            
            if equity_value + debt_value > 0:
                equity_ratio = equity_value / (equity_value + debt_value)
                debt_ratio = debt_value / (equity_value + debt_value)
                
                # Simplified cost calculations
                cost_of_equity = 0.10  # 10% default
                cost_of_debt = 0.05    # 5% default
                tax_rate = 0.25        # 25% default
                
                wacc = (equity_ratio * cost_of_equity) + (debt_ratio * cost_of_debt * (1 - tax_rate))
            else:
                wacc = 0.10  # Default 10% WACC
        
        # DCF calculation
        years = 10
        projected_fcf = []
        discount_factors = []
        
        for year in range(1, years + 1):
            # Project FCF with growth
            fcf = free_cash_flow * ((1 + growth_rate) ** year)
            projected_fcf.append(fcf)
            
            # Discount factor
            discount_factor = 1 / ((1 + wacc) ** year)
            discount_factors.append(discount_factor)
        
        # Present value of projected FCF
        pv_fcf = sum(fcf * df for fcf, df in zip(projected_fcf, discount_factors))
        
        # Terminal value
        terminal_fcf = projected_fcf[-1] * (1 + terminal_growth_rate)
        terminal_value = terminal_fcf / (wacc - terminal_growth_rate)
        pv_terminal = terminal_value / ((1 + wacc) ** years)
        
        # Enterprise value
        enterprise_value = pv_fcf + pv_terminal
        
        # Equity value (simplified)
        shares_outstanding = info.get('sharesOutstanding', 1)
        equity_value = enterprise_value / shares_outstanding if shares_outstanding > 0 else enterprise_value
        
        # Current price
        current_price = info.get('currentPrice', 0)
        
        return {
            'symbol': symbol,
            'current_price': current_price,
            'dcf_value': equity_value,
            'upside_downside': ((equity_value - current_price) / current_price * 100) if current_price > 0 else 0,
            'assumptions': {
                'growth_rate': growth_rate,
                'terminal_growth_rate': terminal_growth_rate,
                'wacc': wacc,
                'years': years
            },
            'components': {
                'pv_fcf': pv_fcf,
                'pv_terminal': pv_terminal,
                'enterprise_value': enterprise_value,
                'shares_outstanding': shares_outstanding
            },
            'projected_fcf': projected_fcf,
            'discount_factors': discount_factors
        }
    except Exception as e:
        print(f"DCF calculation error for {symbol}: {e}")
        return None

@app.route('/api/v1/valuation/dcf', methods=['GET'])
def get_dcf_valuation():
    """Get DCF valuation for a company"""
    try:
        symbol = request.args.get('symbol')
        growth_rate = request.args.get('growth_rate', type=float)
        terminal_growth_rate = request.args.get('terminal_growth_rate', 0.025, type=float)
        wacc = request.args.get('wacc', type=float)
        
        if not symbol:
            return jsonify({'error': 'Symbol parameter required'}), 400
        
        dcf_result = calculate_dcf_valuation(symbol, growth_rate, terminal_growth_rate, wacc)
        
        if dcf_result is None:
            return jsonify({'error': 'Unable to calculate DCF valuation'}), 404
        
        return jsonify({
            'success': True,
            'valuation': dcf_result
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/v1/valuation/sensitivity', methods=['GET'])
def get_dcf_sensitivity():
    """Get DCF sensitivity analysis"""
    try:
        symbol = request.args.get('symbol')
        if not symbol:
            return jsonify({'error': 'Symbol parameter required'}), 400
        
        # Sensitivity analysis with different growth rates and WACC
        growth_rates = [0.02, 0.05, 0.08, 0.10, 0.12]
        wacc_rates = [0.08, 0.10, 0.12, 0.15, 0.18]
        
        sensitivity_matrix = []
        
        for growth_rate in growth_rates:
            row = []
            for wacc in wacc_rates:
                dcf_result = calculate_dcf_valuation(symbol, growth_rate, 0.025, wacc)
                if dcf_result:
                    row.append({
                        'dcf_value': dcf_result['dcf_value'],
                        'upside_downside': dcf_result['upside_downside']
                    })
                else:
                    row.append(None)
            sensitivity_matrix.append(row)
        
        return jsonify({
            'success': True,
            'symbol': symbol,
            'sensitivity_matrix': sensitivity_matrix,
            'growth_rates': growth_rates,
            'wacc_rates': wacc_rates
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

# WebSocket Event Handlers
@socketio.on('connect')
def handle_connect():
    """Handle client connection"""
    print('Client connected')
    emit('status', {'message': 'Connected to Swiss Asset Manager'})

@socketio.on('disconnect')
def handle_disconnect():
    """Handle client disconnection"""
    print('Client disconnected')

@socketio.on('subscribe_to_updates')
def handle_subscribe(data):
    """Subscribe client to real-time updates"""
    symbols = data.get('symbols', [])
    print(f'Client subscribed to updates for: {symbols}')
    emit('subscription_confirmed', {'symbols': symbols})

@socketio.on('request_portfolio_update')
def handle_portfolio_update():
    """Send real-time portfolio update"""
    try:
        # Get current portfolio data
        portfolio_data = {
            'NESN.SW': 25000,
            'NOVN.SW': 20000,
            'ROG.SW': 15000,
            'AAPL': 30000,
            'MSFT': 25000,
            'BND': 20000,
            'GC=F': 10000
        }
        
        # Get live prices
        updated_portfolio = {}
        total_value = 0
        
        for symbol, value in portfolio_data.items():
            try:
                response = requests.get(f"{request.url_root}get_live_data/{symbol}")
                if response.status_code == 200:
                    data = response.json()
                    current_price = data.get('price', 0)
                    updated_value = value * (1 + data.get('change_percent', 0) / 100)
                    updated_portfolio[symbol] = updated_value
                    total_value += updated_value
                else:
                    updated_portfolio[symbol] = value
                    total_value += value
            except Exception:
                updated_portfolio[symbol] = value
                total_value += value
        
        # Calculate portfolio metrics
        daily_change = total_value - sum(portfolio_data.values())
        daily_return = daily_change / sum(portfolio_data.values()) * 100
        
        emit('portfolio_update', {
            'portfolio': updated_portfolio,
            'total_value': total_value,
            'daily_change': daily_change,
            'daily_return': daily_return,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        emit('error', {'message': f'Portfolio update failed: {str(e)}'})

@socketio.on('request_market_update')
def handle_market_update():
    """Send real-time market data update"""
    try:
        symbols = ['^SSMI', '^GSPC', '^IXIC', 'NESN.SW', 'NOVN.SW', 'ROG.SW']
        market_data = {}
        
        for symbol in symbols:
            try:
                response = requests.get(f"{request.url_root}get_live_data/{symbol}")
                if response.status_code == 200:
                    market_data[symbol] = response.json()
            except Exception:
                continue
        
        emit('market_update', {
            'data': market_data,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        emit('error', {'message': f'Market update failed: {str(e)}'})

# Background task for periodic updates
def background_market_updates():
    """Background task to send periodic market updates"""
    while True:
        try:
            # Send market updates every 30 seconds
            socketio.emit('market_update', {
                'message': 'Periodic market update',
                'timestamp': datetime.now().isoformat()
            })
            time.sleep(30)
        except Exception as e:
            print(f'Background update error: {e}')
            time.sleep(30)

# Start background task
import threading
background_thread = threading.Thread(target=background_market_updates, daemon=True)
background_thread.start()

@app.route('/refresh_all_markets')
def refresh_all_markets():
    """Aktualisiert alle Marktdaten mit erweiterten Symbolen"""
    global live_market_data, last_market_update
    
    # Erweiterte Liste von Marktdaten
    symbols_to_fetch = {
        # Schweizer Indizes
        'SMI': '^SSMI', 'Swiss Leader': '^SLI', 'Swiss Performance': '^SPI',
        
        # Globale Hauptindizes
        'DAX': '^GDAXI', 'S&P 500': '^GSPC', 'NASDAQ': '^IXIC',
        'FTSE 100': '^FTSE', 'CAC 40': '^FCHI', 'Nikkei 225': '^N225',
        'Hang Seng': '^HSI', 'Shanghai': '000001.SS',
        
        # Rohstoffe
        'Gold': 'GC=F', 'Silber': 'SI=F', 'Öl': 'CL=F', 
        'Platin': 'PL=F', 'Kupfer': 'HG=F', 'Erdgas': 'NG=F',
        
        # Forex
        'EUR/CHF': 'EURCHF=X', 'USD/CHF': 'USDCHF=X', 'EUR/USD': 'EURUSD=X',
        'GBP/USD': 'GBPUSD=X', 'USD/JPY': 'USDJPY=X',
        
        # Kryptowährungen
        'Bitcoin': 'BTC-USD', 'Ethereum': 'ETH-USD',
        
        # Wichtige Einzelaktien
        'Nestlé': 'NESN.SW', 'Novartis': 'NOVN.SW', 'Roche': 'ROG.SW',
        'UBS': 'UBSG.SW', 'Zurich Insurance': 'ZURN.SW'
    }
    
    live_market_data = {}
    for name, symbol in symbols_to_fetch.items():
        try:
            response = get_live_data(symbol)
            data = response.get_json() if hasattr(response, 'get_json') else response
            if not data or 'price' not in data:
                data = get_simulated_data(symbol)
            live_market_data[name] = data
            time.sleep(0.1)  # Rate limiting
        except Exception as e:
            print(f"Error fetching {symbol}: {e}")
            # Simulierte Daten als Fallback bei Fehler
            live_market_data[name] = get_simulated_data(symbol)
    
    last_market_update = datetime.now()
    
    return jsonify({
        "success": True,
        "data": live_market_data,
        "last_update": last_market_update.strftime("%H:%M:%S"),
        "total_symbols": len(symbols_to_fetch),
        "fetched_successfully": len(live_market_data)
    })
@app.route('/get_benchmark_data')
def get_benchmark_data():
    """Holt Benchmark-Daten"""
    benchmarks = {}
    benchmark_symbols = {
        "SMI": "^SSMI",
        "SPX": "^GSPC", 
        "MSCI World": "URTH",
        "Bloomberg Bond": "BND"
    }
    
    for name, symbol in benchmark_symbols.items():
        try:
            ticker = yf.Ticker(symbol)
            hist = ticker.history(period="1y")
            if not hist.empty:
                start_price = hist['Close'].iloc[0]
                end_price = hist['Close'].iloc[-1]
                return_1y = ((end_price - start_price) / start_price) * 100
                benchmarks[name] = round(return_1y, 2)
            else:
                benchmarks[name] = round(random.uniform(-5, 15), 2)
        except:
            benchmarks[name] = round(random.uniform(-5, 15), 2)
    
    return jsonify(benchmarks)

@app.route('/get_correlation_data')
def get_correlation_data():
    """Berechnet Korrelationsmatrix für aktuelle Portfolio-Assets"""
    try:
        # Erstelle eine echte Korrelationsmatrix basierend auf den Portfolio-Assets
        portfolio_symbols = request.args.getlist('symbols')
        
        if not portfolio_symbols:
            return jsonify({"error": "Keine Portfolio-Symbole übergeben"})
        
        # Für echte Implementierung: Historische Daten holen und Korrelationen berechnen
        # Hier simulieren wir realistische Korrelationen basierend auf Asset-Typen
        correlations = {}
        
        # Erstelle Matrix-Struktur
        for i, sym1 in enumerate(portfolio_symbols):
            for j, sym2 in enumerate(portfolio_symbols):
                key = f"{sym1}_{sym2}"
                
                if sym1 == sym2:
                    correlations[key] = 1.0  # Perfekte Korrelation mit sich selbst
                else:
                    # Basierend auf Asset-Typen realistische Korrelationen generieren
                    type1 = get_asset_type(sym1)
                    type2 = get_asset_type(sym2)
                    
                    if type1 == type2:
                        # Gleiche Asset-Klasse: hohe Korrelation
                        correlations[key] = round(0.6 + random.uniform(-0.2, 0.2), 3)
                    elif (type1 == "stock" and type2 == "index") or (type1 == "index" and type2 == "stock"):
                        # Aktien und Indizes: mittlere Korrelation
                        correlations[key] = round(0.4 + random.uniform(-0.2, 0.2), 3)
                    elif (type1 == "stock" and type2 == "commodity") or (type1 == "commodity" and type2 == "stock"):
                        # Aktien und Rohstoffe: niedrige Korrelation
                        correlations[key] = round(0.2 + random.uniform(-0.3, 0.3), 3)
                    elif (type1 == "bond" and type2 == "stock") or (type1 == "stock" and type2 == "bond"):
                        # Anleihen und Aktien: negative Korrelation
                        correlations[key] = round(-0.2 + random.uniform(-0.2, 0.2), 3)
                    else:
                        # Standard: leicht positive Korrelation
                        correlations[key] = round(0.1 + random.uniform(-0.3, 0.3), 3)
        
        return jsonify({
            "correlations": correlations,
            "symbols": portfolio_symbols,
            "matrix_type": "portfolio_assets"
        })
    except Exception as e:
        return jsonify({"error": str(e)})

def get_asset_type(symbol):
    """Bestimmt den Asset-Typ basierend auf dem Symbol"""
    if symbol in SWISS_STOCKS:
        return "stock"
    elif symbol in INDICES:
        return "index"
    elif symbol in OTHER_ASSETS:
        if "GOLD" in symbol or "SILVER" in symbol or "OIL" in symbol or "=" in symbol:
            return "commodity"
        elif "USD" in symbol or "EUR" in symbol or "GBP" in symbol or "JPY" in symbol:
            return "currency"
        else:
            return "etf"
    return "other"

@app.route('/monte_carlo_simulation', methods=['POST'])
def monte_carlo_simulation():
    """Führt Monte Carlo Simulation durch"""
    try:
        data = request.get_json()
        initial_value = data.get('initial_value', 100000)
        expected_return = data.get('expected_return', 7) / 100
        volatility = data.get('volatility', 15) / 100
        years = data.get('years', 10)
        simulations = data.get('simulations', 1000)
        
        # Monte Carlo Simulation
        results = []
        for _ in range(simulations):
            portfolio_value = initial_value
            path = [portfolio_value]
            for _ in range(years):
                random_return = np.random.normal(expected_return, volatility)
                portfolio_value *= (1 + random_return)
                path.append(portfolio_value)
            results.append(path)
        
        # Statistiken berechnen
        final_values = [path[-1] for path in results]
        avg_final_value = np.mean(final_values)
        median_final_value = np.median(final_values)
        percentile_5 = np.percentile(final_values, 5)
        percentile_95 = np.percentile(final_values, 95)
        
        return jsonify({
            "success": True,
            "simulations": simulations,
            "avg_final_value": round(avg_final_value, 2),
            "median_final_value": round(median_final_value, 2),
            "percentile_5": round(percentile_5, 2),
            "percentile_95": round(percentile_95, 2),
            "paths": results[:100]  # Nur erste 100 Pfade für die Grafik
        })
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})


@app.route('/api/verify_password', methods=['POST'])
def verify_password():
    user_password = request.json.get('password')
    # Prefer environment variable for security; fallback to app constant
    correct_password = os.environ.get('APP_PASSWORD', PASSWORD)
    if user_password == correct_password:
        return jsonify({"success": True})
    return jsonify({"success": False})
@app.route('/get_news')
def get_news():
    """Echte Schweizer Finanznachrichten von RSS Feeds"""
    try:
        import feedparser
        import random
        
        # Schweizer Finanznews RSS Feeds
        feeds = [
            "https://www.fuw.ch/feed/",
            "https://www.handelszeitung.ch/rss",
            "https://www.nzz.ch/finanzen.rss",
            "https://www.finews.com/rss/finews.xml"
        ]
        
        news_items = []
        times = ["Vor 2 Stunden", "Gestern", "Heute früh", "Vor 1 Stunde"]
        
        for feed_url in feeds:
            try:
                feed = feedparser.parse(feed_url)
                for entry in feed.entries[:2]:  # 2 News pro Feed
                    # Filter für Finanzthemen
                    title = entry.title
                    if any(keyword in title.lower() for keyword in ['bank', 'finance', 'aktie', 'ubs', 'credit', 'snb', 'smi', 'börse', 'investment']):
                        news_items.append({
                            "title": title,
                            "content": entry.summary[:200] + "..." if len(entry.summary) > 200 else entry.summary,
                            "time": random.choice(times),
                            "source": feed_url.split('/')[2].replace('www.', '').replace('.ch', '').replace('.com', ''),
                            "link": entry.link
                        })
            except:
                continue  # Falls ein Feed nicht funktioniert
        
        # Falls keine News gefunden, Fallback zu originalen
        if not news_items:
            return get_fallback_news()
            
        # Mischen und auf 5 News begrenzen
        random.shuffle(news_items)
        return jsonify(news_items[:5])
        
    except Exception as e:
        print(f"News error: {e}")
        return get_fallback_news()

def get_fallback_news():
    """Fallback News falls RSS Feeds nicht funktionieren"""
    news_items = [
        {
            "title": "UBS übertrifft Erwartungen im Quartalsbericht",
            "content": "UBS legt starke Zahlen vor und kündigt Aktienrückkaufprogramm an.",
            "time": "Vor 2 Stunden",
            "source": "Finanz und Wirtschaft",
            "link": "https://www.fuw.ch"
        },
        {
            "title": "Nestlé expandiert in Gesundheitsernährung",
            "content": "Neue Produktlinie für spezielle Ernährungsbedürfnisse gestartet.",
            "time": "Vor 5 Stunden", 
            "source": "Handelszeitung",
            "link": "https://www.handelszeitung.ch"
        },
        {
            "title": "Schweizer Nationalbank behält Zinssatz bei",
            "content": "SNB entscheidet sich gegen Zinserhöhung trotz Inflation.",
            "time": "Gestern",
            "source": "NZZ",
            "link": "https://www.nzz.ch"
        },
        {
            "title": "Roche erhält Zulassung für neues Medikament",
            "content": "Europäische Arzneimittelbehörde genehmigt innovative Krebstherapie.",
            "time": "Vor 3 Stunden",
            "source": "Bloomberg",
            "link": "https://www.bloomberg.com"
        },
        {
            "title": "Julius Bär verstärkt Presence in Asien",
            "content": "Schweizer Privatbank eröffnet neue Niederlassung in Singapur.",
            "time": "Heute",
            "source": "Financial Times",
            "link": "https://www.ft.com"
        }
    ]
    return jsonify(news_items)

@app.route('/get_current_prices', methods=['POST'])
def get_current_prices():
    """Holt aktuelle Preise für alle Assets im Portfolio"""
    try:
        data = request.get_json()
        symbols = data.get('symbols', [])
        
        current_prices = {}
        for symbol in symbols:
            try:
                response = get_live_data(symbol)
                price_data = response.get_json()
                current_prices[symbol] = price_data.get('price', 100)
            except:
                current_prices[symbol] = round(random.uniform(50, 500), 2)
        
        return jsonify({"success": True, "prices": current_prices})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

@app.route('/calculate_portfolio_metrics', methods=['POST'])
def calculate_portfolio_metrics_route():
    """Berechnet Portfolio-Metriken basierend auf aktuellen Daten"""
    try:
        data = request.get_json()
        portfolio = data.get('portfolio', [])
        
        if not portfolio:
            return jsonify({"error": "Kein Portfolio vorhanden"})
        
        # Berechne Portfolio-Metriken
        total_value = sum(asset.get('investment', 0) for asset in portfolio)
        expected_return = sum((asset.get('investment', 0) / total_value) * asset.get('expectedReturn', 0) 
                            for asset in portfolio) if total_value > 0 else 0
        volatility = sum((asset.get('investment', 0) / total_value) * asset.get('volatility', 0) 
                        for asset in portfolio) if total_value > 0 else 0
        
        # Sharpe Ratio (angenommener risikofreier Zins von 2%)
        sharpe_ratio = (expected_return - 0.02) / volatility if volatility > 0 else 0
        
        return jsonify({
            "success": True,
            "total_value": total_value,
            "expected_return": expected_return,
            "volatility": volatility,
            "sharpe_ratio": sharpe_ratio,
            "diversification_score": min(len(portfolio) * 2, 10)
        })
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

@app.route('/optimize_portfolio_legacy', methods=['POST'])
def optimize_portfolio_legacy():
    """Führt Portfolio-Optimierung durch"""
    try:
        data = request.get_json()
        portfolio = data.get('portfolio', [])
        strategy = data.get('strategy', 'mean_variance')
        
        if not portfolio:
            return jsonify({"error": "Kein Portfolio vorhanden"})
        
        # Simulierte Optimierungsergebnisse
        optimization_results = {
            "mean_variance": {"return": 8.5, "risk": 12.3, "sharpe": 0.69},
            "risk_parity": {"return": 7.2, "risk": 9.8, "sharpe": 0.73},
            "min_variance": {"return": 6.1, "risk": 7.2, "sharpe": 0.57},
            "max_sharpe": {"return": 9.8, "risk": 15.6, "sharpe": 0.75},
            "black_litterman": {"return": 8.1, "risk": 11.4, "sharpe": 0.71}
        }
        
        result = optimization_results.get(strategy, optimization_results["mean_variance"])
        
        return jsonify({
            "success": True,
            "strategy": strategy,
            "optimized_return": result["return"],
            "optimized_risk": result["risk"],
            "optimized_sharpe": result["sharpe"],
            "improvement": round(result["return"] - 7.0, 2)  # Vergleich mit Basis 7%
        })
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

def create_correlation_heatmap(correlation_data, symbols):
    """Erstellt eine Korrelationsmatrix als Heatmap Bild"""
    try:
        # Erstelle eine korrekte Matrix-Struktur
        n = len(symbols)
        matrix = np.zeros((n, n))
        
        # Fülle die Matrix mit Korrelationswerten
        for i, sym1 in enumerate(symbols):
            for j, sym2 in enumerate(symbols):
                key = f"{sym1}_{sym2}"
                matrix[i][j] = correlation_data.get(key, 0.0)
        
        # Erstelle Heatmap
        plt.figure(figsize=(10, 8))
        sns.heatmap(matrix, 
                   xticklabels=[s[:8] for s in symbols],  # Kürze lange Symbolnamen
                   yticklabels=[s[:8] for s in symbols],
                   annot=True, 
                   fmt=".2f", 
                   cmap="RdYlBu_r",
                   center=0,
                   vmin=-1, 
                   vmax=1,
                   square=True,
                   cbar_kws={"shrink": 0.8})
        
        plt.title('Portfolio Korrelationsmatrix', fontsize=16, fontweight='bold')
        plt.xticks(rotation=45, ha='right')
        plt.yticks(rotation=0)
        plt.tight_layout()
        
        # Speichere das Bild in einem Bytes-IO Buffer
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        
        # Konvertiere zu Base64 für PDF-Einbettung
        image_base64 = base64.b64encode(buffer.getvalue()).decode()
        buffer.close()
        
        return image_base64
    except Exception as e:
        print(f"Error creating correlation heatmap: {e}")
        return None

@app.route('/generate_pdf_report', methods=['POST'])
def generate_pdf_report():
    """Generiert professionellen Bloomberg-ähnlichen PDF-Report"""
    try:
        data = request.get_json()
        portfolio_data = data.get('portfolio', [])
        analysis_data = data.get('analysis', {})
        monte_carlo_data = data.get('monte_carlo', {})
        
        # PDF erstellen
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=20, bottomMargin=20)
        styles = getSampleStyleSheet()
        
        # Bloomberg-ähnliche Styles
        title_style = ParagraphStyle(
            'BloombergTitle',
            parent=styles['Heading1'],
            fontSize=18,
            textColor=colors.HexColor('#0A192F'),
            spaceAfter=12,
            alignment=1,
            fontName='Helvetica-Bold'
        )
        
        header_style = ParagraphStyle(
            'BloombergHeader',
            parent=styles['Heading2'],
            fontSize=14,
            textColor=colors.HexColor('#0A192F'),
            spaceAfter=8,
            fontName='Helvetica-Bold'
        )
        
        subheader_style = ParagraphStyle(
            'BloombergSubheader',
            parent=styles['Heading3'],
            fontSize=11,
            textColor=colors.HexColor('#666666'),
            spaceAfter=6,
            fontName='Helvetica-Bold'
        )
        
        normal_style = ParagraphStyle(
            'BloombergNormal',
            parent=styles['Normal'],
            fontSize=9,
            textColor=colors.HexColor('#333333'),
            spaceAfter=6,
            fontName='Helvetica'
        )
        
        metric_style = ParagraphStyle(
            'BloombergMetric',
            parent=styles['Normal'],
            fontSize=16,
            textColor=colors.HexColor('#0A192F'),
            spaceAfter=3,
            fontName='Helvetica-Bold',
            alignment=1
        )
        
        metric_label_style = ParagraphStyle(
            'BloombergMetricLabel',
            parent=styles['Normal'],
            fontSize=8,
            textColor=colors.HexColor('#666666'),
            spaceAfter=12,
            fontName='Helvetica',
            alignment=1
        )
        
        # Content sammeln
        content = []
        
        # Header mit Bloomberg-ähnlichem Design
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        
        # Haupt-Header
        header_table_data = [
            [
                Paragraph("SWISS ASSET PRO", title_style),
                Paragraph(f"Generiert: {current_time}", normal_style)
            ]
        ]
        
        header_table = Table(header_table_data, colWidths=[400, 150])
        header_table.setStyle(TableStyle([
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 10)
        ]))
        content.append(header_table)
        content.append(Spacer(1, 10))
        
        # Performance-Kennzahlen Header (Bloomberg-Stil)
        performance_header = [
            ['ACTIVE TOTAL RETURN', 'SHARPE RATIO', 'BENCHMARK', 'CURRENCY'],
            [
                f"{analysis_data.get('expected_return', 0)*100:.1f}%", 
                f"{analysis_data.get('sharpe_ratio', 0):.2f}",
                "SMI +2.0%", 
                "CHF"
            ]
        ]
        
        performance_table = Table(performance_header, colWidths=[120, 100, 120, 80])
        performance_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0A192F')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('BACKGROUND', (0, 1), (-1, 1), colors.HexColor('#F8F9FA')),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, 1), (-1, 1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#DDDDDD')),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 6)
        ]))
        content.append(performance_table)
        content.append(Spacer(1, 15))
        
        # Portfolio Übersicht
        content.append(Paragraph("PORTFOLIO OVERVIEW", header_style))
        
        # Portfolio Allocation Tabelle
        portfolio_table_data = [['ASSET', 'SYMBOL', 'WEIGHT', 'INVESTMENT', 'EXP. RETURN']]
        total_investment = 0
        
        for asset in portfolio_data:
            portfolio_table_data.append([
                Paragraph(asset.get('name', '')[:25], normal_style),
                asset.get('symbol', ''),
                f"{asset.get('weight', 0)}%",
                f"CHF {asset.get('investment', 0):,.0f}",
                f"{asset.get('expectedReturn', 0)*100:.1f}%"
            ])
            total_investment += asset.get('investment', 0)
        
        portfolio_table = Table(portfolio_table_data, colWidths=[140, 60, 60, 90, 70])
        portfolio_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0A192F')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
            ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#F8F9FA')),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#DDDDDD'))
        ]))
        content.append(portfolio_table)
        content.append(Spacer(1, 20))
        
        # Performance Metriken im Bloomberg-Stil
        content.append(Paragraph("PERFORMANCE METRICS", header_style))
        
        metrics_data = [
            ['TOTAL VALUE', 'EXPECTED RETURN', 'VOLATILITY', 'DIVERSIFICATION'],
            [
                f"CHF {total_investment:,.0f}",
                f"{analysis_data.get('expected_return', 0)*100:.1f}% p.a.",
                f"{analysis_data.get('volatility', 0)*100:.1f}%",
                f"{analysis_data.get('diversification_score', 0)}/10"
            ]
        ]
        
        metrics_table = Table(metrics_data, colWidths=[120, 120, 100, 120])
        metrics_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2C5AA0')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('BACKGROUND', (0, 1), (-1, 1), colors.HexColor('#E8EFF7')),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, 1), (-1, 1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#CCCCCC'))
        ]))
        content.append(metrics_table)
        content.append(Spacer(1, 20))
        
        # Korrelationsmatrix
        content.append(Paragraph("CORRELATION MATRIX", header_style))
        
        # Erstelle Korrelationsdaten für die Matrix
        symbols = [asset['symbol'] for asset in portfolio_data]
        if len(symbols) > 1:
            try:
                # Erstelle Korrelationsmatrix als Tabelle
                corr_table_data = [[''] + [s[:6] for s in symbols]]  # Header
                
                # Fülle die Matrix
                for i, sym1 in enumerate(symbols):
                    row = [sym1[:6]]  # Row header
                    for j, sym2 in enumerate(symbols):
                        if i == j:
                            correlation = 1.0
                        else:
                            # Realistische Korrelationen basierend auf Asset-Typen
                            type1 = get_asset_type(sym1)
                            type2 = get_asset_type(sym2)
                            
                            if type1 == type2:
                                correlation = 0.6 + random.uniform(-0.2, 0.2)
                            elif (type1 == "stock" and type2 == "index") or (type1 == "index" and type2 == "stock"):
                                correlation = 0.4 + random.uniform(-0.2, 0.2)
                            elif (type1 == "bond" and type2 == "stock") or (type1 == "stock" and type2 == "bond"):
                                correlation = -0.2 + random.uniform(-0.2, 0.2)
                            else:
                                correlation = 0.1 + random.uniform(-0.3, 0.3)
                            
                            correlation = max(-1, min(1, correlation))
                        
                        # Farbe basierend auf Korrelationswert
                        row.append(f"{correlation:.2f}")
                    
                    corr_table_data.append(row)
                
                # Erstelle Korrelationstabelle
                corr_table = Table(corr_table_data, colWidths=[40] + [35] * len(symbols))
                corr_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0A192F')),
                    ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#0A192F')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 7),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#DDDDDD')),
                    ('BACKGROUND', (1, 1), (-1, -1), colors.HexColor('#F8F9FA'))
                ]))
                
                content.append(corr_table)
                content.append(Spacer(1, 10))
                content.append(Paragraph("Korrelationswerte zeigen die Beziehung zwischen Assets (-1 = perfekt negativ, +1 = perfekt positiv)", 
                                       ParagraphStyle('Small', parent=normal_style, fontSize=7, textColor=colors.gray)))
                content.append(Spacer(1, 15))
                
            except Exception as e:
                content.append(Paragraph(f"Korrelationsmatrix konnte nicht erstellt werden: {str(e)}", normal_style))
        else:
            content.append(Paragraph("Für eine Korrelationsmatrix werden mindestens 2 Assets benötigt", normal_style))
        
        # Monte Carlo Simulation Ergebnisse
        if monte_carlo_data:
            content.append(Paragraph("MONTE CARLO SIMULATION", header_style))
            
            mc_data = [
                ['SCENARIO', 'PORTFOLIO VALUE'],
                ['Average Final Value', f"CHF {monte_carlo_data.get('avg_final_value', 0):,.0f}"],
                ['Median Final Value', f"CHF {monte_carlo_data.get('median_final_value', 0):,.0f}"],
                ['5% Worst Case', f"CHF {monte_carlo_data.get('percentile_5', 0):,.0f}"],
                ['5% Best Case', f"CHF {monte_carlo_data.get('percentile_95', 0):,.0f}"]
            ]
            
            mc_table = Table(mc_data, colWidths=[180, 120])
            mc_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#28A745')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#F0F9F0')),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#DDDDDD'))
            ]))
            content.append(mc_table)
            content.append(Spacer(1, 15))
        
        # Performance nach Sektoren (Bloomberg-Stil)
        content.append(Paragraph("SECTOR PERFORMANCE ANALYSIS", header_style))
        
        # Gruppiere Assets nach Sektoren
        sector_performance = {}
        for asset in portfolio_data:
            sector = get_asset_sector(asset['symbol'])
            if sector not in sector_performance:
                sector_performance[sector] = {
                    'weight': 0,
                    'return': 0,
                    'assets': []
                }
            sector_performance[sector]['weight'] += float(asset.get('weight', 0))
            sector_performance[sector]['return'] += float(asset.get('weight', 0)) * asset.get('expectedReturn', 0) * 100
            sector_performance[sector]['assets'].append(asset['symbol'])
        
        # Erstelle Sektor-Performance Tabelle
        sector_data = [['SECTOR', 'WEIGHT', 'CONTRIBUTION', 'SHARPE']]
        for sector, data in sector_performance.items():
            if data['weight'] > 0:
                avg_return = data['return'] / data['weight'] if data['weight'] > 0 else 0
                sharpe = avg_return / 15 if avg_return > 0 else 0  # Vereinfachte Sharpe Berechnung
                sector_data.append([
                    sector,
                    f"{data['weight']:.1f}%",
                    f"{data['return']:.1f}%",
                    f"{sharpe:.2f}"
                ])
        
        sector_table = Table(sector_data, colWidths=[120, 80, 100, 80])
        sector_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0A192F')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#F8F9FA')),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 8),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#DDDDDD'))
        ]))
        content.append(sector_table)
        content.append(Spacer(1, 20))
        
        # Key Takeaways
        content.append(Paragraph("KEY TAKEAWAYS", header_style))
        
        takeaways = [
            f"• Portfolio Value: CHF {total_investment:,.0f}",
            f"• Expected Annual Return: {analysis_data.get('expected_return', 0)*100:.1f}%",
            f"• Risk (Volatility): {analysis_data.get('volatility', 0)*100:.1f}%",
            f"• Sharpe Ratio: {analysis_data.get('sharpe_ratio', 0):.2f}",
            f"• Diversification Score: {analysis_data.get('diversification_score', 0)}/10",
            "• Target Sharpe Ratio: 1.00 | Deviation: +0.37"
        ]
        
        for takeaway in takeaways:
            content.append(Paragraph(takeaway, normal_style))
        
        content.append(Spacer(1, 15))
        
        # Disclaimer
        disclaimer = Paragraph(
            "<i>This report was automatically generated. The information provided is for informational purposes only and does not constitute investment advice. Past performance is not indicative of future results. Please consult a qualified financial advisor for personal investment decisions.</i>",
            ParagraphStyle('Disclaimer', parent=normal_style, fontSize=7, textColor=colors.gray)
        )
        content.append(disclaimer)
        
        # PDF bauen
        doc.build(content)
        
        # Response vorbereiten
        buffer.seek(0)
        response = make_response(buffer.getvalue())
        response.headers['Content-Type'] = 'application/pdf'
        response.headers['Content-Disposition'] = 'attachment; filename=Portfolio_Overview.pdf'
        
        return response
        
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

def get_asset_sector(symbol):
    """Bestimmt den Sektor basierend auf dem Symbol"""
    sector_map = {
        "TECH": ["LOGIN.SW", "TEMN.SW", "NDX", "SPX", "TLT"],
        "HEALTH": ["NESN.SW", "NOVN.SW", "ROG.SW", "LONN.SW", "XLV"],
        "FINANCIAL": ["UBSG.SW", "CSGN.SW", "ZURN.SW", "BAER.SW"],
        "ENERGY": ["OIL", "XLE", "CL=F"],
        "MATERIALS": ["GOLD", "SILVER", "COPPER", "ABBN.SW", "XLB", "GLD", "SI=F", "HG=F"],
        "INDUSTRIAL": ["SIKA.SW", "GEBN.SW", "ADEN.SW"],
        "CONSUMER": ["CFR.SW", "GIVN.SW"],
        "UTILITIES": ["SCMN.SW", "XLU"]
    }
    
    for sector, symbols in sector_map.items():
        if symbol in symbols:
            return sector
    return "Diversified"

# HTML Template - VOLLSTÄNDIGE VERSION

# CSS for status indicators (to be included in the HTML template)
STATUS_INDICATOR_CSS = """
<style>
.status-indicator.open {
    background-color: #28a745; /* Green */
    box-shadow: 0 0 10px #28a745;
}
.status-indicator.closed {
    background-color: #dc3545; /* Red */
    box-shadow: 0 0 10px #dc3545;
}
</style>
"""

# Example HTML snippet for the title (to be included in the HTML template)
TITLE_HTML = """
<div style="margin-bottom: 25px; text-align: center;">
    <h1 class="text-accent" style="font-family: 'Playfair Display', serif; font-size: 36px; margin: 0; letter-spacing: -1px; text-shadow: 0 0 30px rgba(138, 43, 226, 0.4); background: linear-gradient(90deg, #8A2BE2, #B05EED); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent;">Swiss Asset Pro</h1>
</div>
"""
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Swiss Asset Pro">
    <meta name="application-name" content="Swiss Asset Pro">
    <meta name="theme-color" content="#8A2BE2">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="format-detection" content="telephone=no">
    <meta name="format-detection" content="address=no">
    <meta name="apple-touch-fullscreen" content="yes">
    <meta name="apple-mobile-web-app-orientations" content="portrait">
    <meta name="mobile-web-app-capable" content="yes">
    
    <!-- Theme Toggle removed -->
    <title>Swiss Asset Pro – Invest Smart</title>
    <link rel="manifest" href="/manifest.json">
    <!-- Apple Touch Icons - Complete Set -->
    <link rel="apple-touch-icon" href="/static/icon-180x180.png">
    <link rel="apple-touch-icon" sizes="57x57" href="/static/icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/static/icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/static/icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/static/icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/static/icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/static/icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/static/icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/static/icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/static/icon-180x180.png">
    <link rel="apple-touch-icon" sizes="192x192" href="/static/icon-192x192.png">
    <link rel="apple-touch-icon" sizes="512x512" href="/static/icon-512x512.png">
    
    <!-- Splash Screens for iOS -->
    <link rel="apple-touch-startup-image" href="/static/splash-640x1136.png" media="(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/static/splash-750x1334.png" media="(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/static/splash-1242x2208.png" media="(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-1125x2436.png" media="(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-828x1792.png" media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/static/splash-1170x2532.png" media="(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-1179x2556.png" media="(device-width: 393px) and (device-height: 852px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-1284x2778.png" media="(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-1176x2552.png" media="(device-width: 393px) and (device-height: 852px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-1242x2688.png" media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/static/splash-1536x2048.png" media="(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/static/splash-1668x2224.png" media="(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/static/splash-1668x2388.png" media="(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/static/splash-2048x2732.png" media="(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2)">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@2.0.1/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script defer src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <script src="/static/monitoring.js"></script>
    <!-- Fallback CDN (jsDelivr) falls cdnjs blockiert ist -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.4/css/all.min.css">
    <script defer src="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.4/js/all.min.js"></script>
    <style>
      /* Font Awesome render fixes: enforce correct font families and weights */
      .fa, .fas, .far, .fal { font-family: "Font Awesome 5 Free" !important; font-style: normal !important; display: inline-block !important; }
      .fab { font-family: "Font Awesome 5 Brands" !important; font-style: normal !important; display: inline-block !important; }
      .fas, .fa { font-weight: 900 !important; }
      .far { font-weight: 400 !important; }
      .fab { font-weight: 400 !important; }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@500;600;700&family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <script>
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                navigator.serviceWorker.register('/static/sw.js').then(function(registration) {
                    console.log('ServiceWorker registration successful with scope: ', registration.scope);
                }, function(err) {
                    console.log('ServiceWorker registration failed: ', err);
                });
            });
        }
    </script>
    <!-- Bilder Preload für schnelles Laden -->
    <link rel="preload" as="image" href="/static/Bilder-SAP/annie-spratt-IT6aov1ScW0-unsplash.jpg">
    <link rel="preload" as="image" href="/static/Bilder-SAP/david-werbrouck-5GwLlb-_UYk-unsplash.jpg">
    <link rel="preload" as="image" href="/static/Bilder-SAP/anthony-tyrrell-Bl-LiSJOnlY-unsplash.jpg">
    <link rel="preload" as="image" href="/static/Bilder-SAP/frederic-perez-RDNAtCk5rJ8-unsplash.jpg">
    <link rel="preload" as="image" href="/static/Bilder-SAP/benedikt-jaletzke-TZsfOb3cgJM-unsplash.jpg">
    <link rel="preload" as="image" href="/static/Bilder-SAP/armando-castillejos-DPi0ddFTBS0-unsplash.jpg">
    <link rel="preload" as="image" href="/static/Bilder-SAP/bumgeun-nick-suh-o40m9hf2lB4-unsplash.jpg">
    <link rel="preload" as="image" href="/static/Bilder-SAP/ian-parker-rWey_wseEcY-unsplash.jpg">
    <link rel="preload" as="image" href="/static/Bilder-SAP/jason-dent-3wPJxh-piRw-unsplash.jpg">
    <link rel="preload" as="image" href="/static/Bilder-SAP/jiri-brtnik-jIaSUaQVPl0-unsplash.jpg">
    <link rel="preload" as="image" href="/static/Bilder-SAP/pepi-stojanovski-MJSFNZ8BAXw-unsplash.jpg">
    <link rel="preload" as="image" href="/static/Bilder-SAP/robert-tudor-G7bXcUgh_xk-unsplash.jpg">
    <link rel="preload" as="image" href="/static/Bilder-SAP/tai-s-captures-r5kTKshp22M-unsplash.jpg">
    <!-- Custom scoped overrides for Getting Started + Header/Footer -->
        <link rel="stylesheet" href="/static/getting-started-custom.css?v=gs-20251012-20">
        <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
        <meta http-equiv="Pragma" content="no-cache">
        <meta http-equiv="Expires" content="0">
        <meta name="cache-buster" content="nav-update-20251012">
        <script>
            // Force complete cache clear on load
            if ('caches' in window) {
                caches.keys().then(names => {
                    names.forEach(name => caches.delete(name));
                });
            }
            // Force cache busting with timestamp
            if (window.location.search.indexOf('v=') === -1) {
                window.location.href = window.location.href + (window.location.search ? '&' : '?') + 'v=' + Date.now();
            }
        </script>
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Playfair+Display:wght@700&display=swap');
    body { font-family: 'Inter', sans-serif; }
    h1, h2, h3 { font-family: 'Playfair Display', serif; }
    
    /* iOS Safe Area Support */
    :root {
      --safe-area-inset-top: env(safe-area-inset-top);
      --safe-area-inset-right: env(safe-area-inset-right);
      --safe-area-inset-bottom: env(safe-area-inset-bottom);
      --safe-area-inset-left: env(safe-area-inset-left);
    }
    
    /* PWA Standalone Detection */
    @media (display-mode: standalone) {
      body {
        padding-top: var(--safe-area-inset-top);
        padding-bottom: var(--safe-area-inset-bottom);
        padding-left: var(--safe-area-inset-left);
        padding-right: var(--safe-area-inset-right);
      }
      
      .custom-header {
        padding-top: calc(20px + var(--safe-area-inset-top));
      }
      
      .custom-footer {
        padding-bottom: calc(20px + var(--safe-area-inset-bottom));
      }
    }
    
    /* iOS-specific adjustments */
    @supports (-webkit-touch-callout: none) {
      body {
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -webkit-tap-highlight-color: transparent;
      }
      
      input, textarea, select {
        -webkit-appearance: none;
        border-radius: 0;
      }
      
      .btn, button {
        -webkit-tap-highlight-color: transparent;
        touch-action: manipulation;
      }
    }
    
    /* Touch optimizations */
    @media (hover: none) and (pointer: coarse) {
      .btn, button, .nav-tab, .structure-item {
        min-height: 44px;
        min-width: 44px;
      }
      
      .nav-tab {
        padding: 12px 16px;
      }
      
      .landing-card {
        min-height: 180px;
      }
    }
    
    /* Force visibility of changes - REMOVED, using inline styles */
    .nav-tabs { 
        display: flex !important; 
        justify-content: center !important; 
        gap: 8px !important; 
    }
    .portfolio-legend { 
        display: flex !important; 
        flex-direction: column !important; 
    }

    /* Farbpalette Schwarz / Dunkelgrau / Violett / Silber */
    .bg-black-main { background-color: #0A0A0A; }      /* Haupt-Hintergrund */
    .bg-panel { background: linear-gradient(145deg, #1F1F1F, #181818); }  /* Panels / Cards */
    .text-primary { color: #E0E0E0; }                  /* Überschriften / Haupttext */
    .text-secondary { color: #A0A0A0; }                /* Sekundärtext / Details */
    .text-accent { color: #8A2BE2; }                   /* Violett für Akzente */
    .text-silver { color: #D9D9D9; }                   /* Silber für Buttons / Lines */
    .border-panel { border-color: #2C2C2C; }           /* Panel-Border */
    .bg-accent { background-color: #8A2BE2; }
    .bg-silver { background-color: #D9D9D9; }
    .hover-accent:hover { background-color: #A64DF0 !important; color: #0A0A0A !important; }

    :root {
            --bg-black-main: #0A0A0A;
            --bg-dark: #111111;
            --bg-panel: linear-gradient(145deg, #252525, #1E1E1E);
            --text-primary: #E8E8E8;
            --text-secondary: #B8B8B8;
            --accent-violet: #8b7355;
            --color-accent: #8b7355;
            --text-silver: #E6E6E6;
            --border-panel: #3A3A3A;
            --glass: rgba(139, 115, 85, 0.08);
            --accent-positive: #28A745;
            --accent-negative: #DC3545;
            --border-light: #454545;
            --radius-lg: 4px;
            --radius-md: 2px;
            --shadow-soft: 0 8px 20px rgba(0, 0, 0, 0.4);
            --font-heading: 'Playfair Display', serif;
            --font-body: 'Inter', sans-serif;
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: var(--font-body);
            background: #000000 !important; 
            color: var(--text-primary); 
            line-height: 1.8; 
            font-size: 16px;
            font-weight: 400;
        }
        
        h1, h2, h3, h4, h5, h6 {
            font-family: var(--font-heading);
            line-height: 1.5;
            color: var(--text-primary);
            margin-bottom: 1rem;
        }
        
        p, div, span, li {
            line-height: 1.8;
            margin-bottom: 0.8rem;
        }
        
        .card, .section, .page {
            margin-bottom: 2rem;
        }
        
        h1 { 
            font-size: 34px; 
            font-weight: 700; 
            letter-spacing: -0.7px;
        }
        h2 { 
            font-size: 28px; 
            font-weight: 600; 
            letter-spacing: -0.5px;
        }
        h3 { 
            font-size: 24px; 
            font-weight: 600; 
            letter-spacing: -0.3px;
        }
        h4 { 
            font-size: 20px; 
            font-weight: 500; 
            letter-spacing: -0.2px;
        }
        h5 { 
            font-size: 18px; 
            font-weight: 500; 
        }
        h6 { 
            font-size: 16px; 
            font-weight: 500; 
        }
}
        
        .password-protection {
            position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
            background: var(--bg-default); display: flex !important; justify-content: center !important; align-items: center !important; 
            z-index: 10000; margin: 0; padding: 0; box-sizing: border-box;
        }
        .password-box {
            background: #000000 !important; 
            padding: 50px; 
            border-radius: 4px !important;
            box-shadow: 0 25px 50px rgba(0,0,0,0.5) !important; 
            text-align: center; 
            max-width: 400px; 
            width: 90%;
            border: none !important;
            position: relative;
            margin: 0 auto;
            transform: translateY(0);
        }
        .password-input {
            width: 100%; padding: 12px; border: 1px solid var(--border-light); border-radius: 2px;
            margin-bottom: 15px; font-size: 16px;
        }
        .btn {
            padding: 12px 28px; 
            background-color: #8b7355;
            color: white; 
            border: none;
            border-radius: 2px; 
            cursor: pointer; 
            font-weight: 600;
            font-family: var(--font-body);
            font-size: 14px;
            letter-spacing: 0.3px;
            transition: none;
        }
        .btn:hover {
            background-color: #8b7355;
            color: white;
        }
        .btn:focus {
            outline: none;
        }
        .btn-calculate {
            background: linear-gradient(145deg, #3A3A3A, #303030);
            font-size: 16px;
            padding: 15px 30px;
            font-weight: 600;
            color: #E8E8E8;
            border: 1px solid var(--border-light);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        .btn-calculate:hover {
            background: linear-gradient(145deg, #8b7355, #6d5a42);
            box-shadow: 0 6px 15px rgba(139, 115, 85, 0.4);
            transform: translateY(-2px);
        }
        
        header { 
    background-color: var(--bg-black-main);
    color: white; 
    padding: 50px 0 40px 0;
    border-bottom: 4px solid #2A2A2A;
}
.container { max-width: 1800px; margin: 0 auto; padding: 0 40px; }

.nav-tabs { 
    display: flex !important; 
    gap: 4px !important; 
    flex-wrap: wrap !important;
    align-items: center !important;
    justify-content: center !important;
    position: relative !important;
    z-index: 10 !important;
    width: 100% !important;
    background: #E8E8E8 !important;
    padding: 12px 16px !important;
    border-radius: 0px !important;
    border: 1px solid #D0D0D0 !important;
}
.nav-tab { 
    padding: 8px 16px !important; 
    background: transparent !important; 
    border: none !important;
    border-radius: 0px !important; 
    cursor: pointer !important; 
    white-space: nowrap !important; 
    transition: all 0.3s ease !important; 
    color: #000000 !important;
    font-size: 12px !important;
    font-weight: 700 !important;
}
.nav-tab.active { 
    background: #FFFFFF !important;
    color: #000000 !important;
    font-weight: 700 !important;
    border: 1px solid #C0C0C0 !important;
    border-radius: 0px !important;
}
.nav-tab:hover { 
    color: #000000 !important;
    background: #F5F5F5 !important;
    border-radius: 0px !important;
}


        
        main { 
    padding: 40px 0; 
    position: relative;
    z-index: 1;
    max-width: 1400px;
    margin: 0 auto;
}
        .page { 
    display: none; 
    background: var(--bg-panel); 
    padding: 35px; 
    border-radius: var(--radius-lg); 
    margin-bottom: 30px; 
    position: relative; 
    z-index: 2; 
    border: 1px solid var(--border-panel);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
}
        .page.active { display: block; }
        
        .page-header { 
            margin-bottom: 30px; 
            padding-bottom: 20px; 
            border-bottom: 1px solid var(--border-panel); 
            position: relative;
        }
        .page-header::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 80px;
            height: 3px;
            background: linear-gradient(90deg, #8b7355, rgba(139, 115, 85, 0.3));
            border-radius: 3px;
        }
        .page-header h2 { 
            color: var(--color-primary); 
            margin-bottom: 12px; 
            font-family: 'Playfair Display', serif;
            letter-spacing: -0.5px;
        }
        
        .instruction-box { 
            background: rgba(139, 115, 85, 0.1); 
            padding: 20px; 
            border-radius: var(--radius-lg); 
            margin-bottom: 20px; 
            border-left: 4px solid #8b7355;
        }
        
        .portfolio-setup { 
            background: linear-gradient(145deg, #2A2A2A, #232323); 
            padding: 20px; 
            border-radius: var(--radius-lg); 
            margin-bottom: 20px; 
            border: 1px solid var(--border-light);
            box-shadow: var(--shadow-soft);
        }
        .investment-inputs { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-bottom: 15px; }
        .input-group { display: flex; flex-direction: column; gap: 5px; }
        .input-group label { font-weight: 500; color: var(--text-silver); font-size: 14px; }
        
        .search-container { display: flex; gap: 10px; margin-bottom: 20px; flex-wrap: wrap; }
        .search-input { 
            flex: 1; 
            min-width: 200px; 
            padding: 10px; 
            border: 1px solid var(--border-light); 
            border-radius: 6px;
            background-color: var(--bg-panel);
            color: var(--text-primary);
        }
        select.search-input {
            background-color: var(--bg-panel);
            color: var(--text-primary);
        }
        select.search-input option {
            background-color: var(--bg-dark);
            color: var(--text-primary);
            padding: 8px;
        }
        
        .selected-stocks { display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 20px; margin: 20px 0; }
        .stock-card { 
            background: var(--bg-panel); 
            padding: 20px; 
            border-radius: var(--radius-lg); 
            border: 1px solid var(--border-light); 
            transition: all 0.3s ease; 
            box-shadow: var(--shadow-soft);
            min-height: 200px;
            display: flex;
            flex-direction: column;
        }
        .stock-card:hover { transform: translateY(-2px); box-shadow: var(--shadow-soft); }
        .stock-header { 
            display: flex; 
            justify-content: space-between; 
            align-items: flex-start;
            margin-bottom: 15px; 
            flex-shrink: 0;
        }
.investment-controls { 
    display: grid; 
    grid-template-columns: 1fr 1fr; 
    gap: 10px; 
    margin-top: auto;
    padding-top: 15px;
    width: 100%;
    box-sizing: border-box;
}
        .investment-controls input { 
            padding: 8px; 
            border: 1px solid var(--border-light); 
            border-radius: 6px; 
            background: var(--bg-dark);
            color: var(--text-primary); 
            font-size: 13px; 
            width: 100%; 
            max-width: 100%;
            box-sizing: border-box;
            overflow: hidden;
        }
        .investment-controls label {
            display: block;
            font-size: 12px;
            color: var(--text-muted);
            margin-bottom: 5px;
            font-weight: 500;
        }
        .asset-type-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .stock-asset { background-color: #8A2BE2; }
        .index-asset { background-color: #4ECDC4; }
        .other-asset { background-color: #FF6B6B; }
        
        .chart-container { 
            height: 450px; 
            margin: 20px 0; 
            background: var(--bg-panel); 
            padding: 25px; 
            border-radius: var(--radius-lg); 
            border: 1px solid var(--border-panel);
            position: relative;
        }
        .chart-container canvas {
            max-height: 100% !important;
        }
        
        .card-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin: 20px 0; }
        .card { 
    background: linear-gradient(145deg, #2A2A2A, #232323); 
    padding: 24px; 
    border-radius: 4px; 
    border-left: 4px solid #8b7355; 
    transition: all 0.3s ease;
    box-shadow: 0 10px 25px rgba(139, 115, 85, 0.1), 0 6px 12px rgba(0, 0, 0, 0.15);
    border: 1px solid var(--border-light);
}
        .card:hover { 
    transform: translateY(-4px); 
    box-shadow: 0 14px 30px rgba(139, 115, 85, 0.15), 0 8px 16px rgba(0, 0, 0, 0.1);
    border-color: rgba(139, 115, 85, 0.3);
    border-left-width: 5px;
}
        
        .data-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .data-table th, .data-table td { padding: 12px 15px; text-align: left; border-bottom: 1px solid var(--border-light); }
        .data-table th { background: var(--color-primary); color: white; }
        
        .positive { 
    color: var(--accent-positive); 
    font-weight: 600;
    text-shadow: 0 0 8px rgba(138, 43, 226, 0.2);
}
        .negative { 
    color: var(--accent-negative); 
    font-weight: 600;
    text-shadow: 0 0 8px rgba(220, 38, 38, 0.2);
}
        
        .status-bar {
    display: flex; 
    justify-content: center; 
    align-items: center;
    padding: 1px 8px; 
    background: rgba(26, 26, 26, 0.4); 
    border-radius: 4px; 
    margin-bottom: 8px; 
    flex-wrap: nowrap; 
    gap: 6px; 
    color: var(--text-primary);
    border: 1px solid rgba(138, 43, 226, 0.1);
    box-shadow: none;
    font-size: 5px;
    min-height: 14px;
    white-space: nowrap;
    overflow-x: auto;
}

.status-item {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
    font-weight: 500;
}

.status-item i {
    color: var(--accent-primary);
    font-size: 16px;
}

.smi-indicator {
    background: rgba(138, 43, 226, 0.1);
    padding: 12px 16px;
    border-radius: 12px;
    border: 1px solid rgba(138, 43, 226, 0.2);
    position: relative;
}

.mini-chart {
    display: flex;
    align-items: end;
    gap: 2px;
    height: 20px;
    margin-left: 8px;
}

.chart-bar {
    width: 3px;
    border-radius: 1px;
    transition: all 0.3s ease;
}

.market-status-indicator {
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 11px;
    font-weight: 600;
}

.market-status-indicator.open {
    background: #4CAF50;
    color: white;
}

.market-status-indicator.closed {
    background: #f44336;
    color: white;
}
        
        .market-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .market-item { background: var(--bg-panel); padding: 15px; border-radius: var(--radius-lg); text-align: center; border: 1px solid var(--border-panel); }
        
        .news-item { padding: 15px; border-bottom: 1px solid var(--border-light); }
        .news-item:last-child { border-bottom: none; }
        
        .assets-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .asset-card { background: var(--bg-panel); padding: 20px; border-radius: var(--radius-lg); border: 1px solid var(--border-panel); }
        
        .formula-box { 
            background: #2A2A2A; 
            color: #E6E6E6; 
            padding: 15px; 
            border-radius: var(--radius-lg); 
            margin: 10px 0; 
            font-family: monospace; 
            border: 1px solid #8b7355;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            font-size: 1.05rem;
        } /* WINDOWS PERFORMANCE FIX - STUFE 1 */
/* FINALE LÖSUNG - OPTIMIERT FÜR WINDOWS, ORIGINAL FÜR MAC */
.performance-mode .layer {
    animation-duration: 40s, 50s, 60s !important;
    filter: blur(30px) !important;
}

.performance-mode .pulse {
    animation-duration: 20s !important;
    opacity: 0.04 !important;
}
        
        .linkedin-link { color: var(--color-primary); text-decoration: none; display: inline-flex; align-items: center; gap: 5px; }
        
        .asset-type-indicator { 
            display: inline-block; width: 12px; height: 12px; border-radius: 50%; margin-right: 8px; 
        }
        .stock-asset { background-color: #0A1429; }
        .other-asset { background-color: #28A745; }
        .index-asset { background-color: #6B46C1; }
        
        .total-validation { 
            padding: 10px; 
            border-radius: 6px; 
            margin: 10px 0; 
            font-weight: bold;
        }
        .validation-ok { background: #d4edda; color: #155724; }
        .validation-error { background: #f8d7da; color: #721c24; }
        
        .metric-value { font-size: 24px; font-weight: bold; margin-bottom: 5px; }
        .metric-label { color: var(--text-muted); font-size: 14px; }
        
        .fx-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 15px; margin: 20px 0; }
        .fx-item { background: var(--bg-panel); padding: 15px; border-radius: var(--radius-lg); text-align: center; border: 1px solid var(--border-panel); }
        
        .methodology-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px; margin: 20px 0; }
        
        .email-link { color: var(--color-primary); text-decoration: none; }
        
        /* Neue Styles für Strategie-Analyse */
        .strategy-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .strategy-card { background: var(--bg-panel); padding: 20px; border-radius: var(--radius-lg); border: 1px solid var(--border-panel); border-left: 4px solid; transition: all 0.3s ease; }
        .strategy-card:hover { transform: translateY(-2px); box-shadow: var(--shadow-soft); }
        .strategy-1 { border-left-color: #0A1429; }
        .strategy-2 { border-left-color: #28A745; }
        .strategy-3 { border-left-color: #D52B1E; }
        .strategy-4 { border-left-color: #6B46C1; }
        .strategy-5 { border-left-color: #2B6CB0; }
        
        .comparison-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .comparison-table th, .comparison-table td { padding: 12px 15px; text-align: center; border: 1px solid var(--border-light); }
        .comparison-table th { background: #2A2A2A; color: #E8E8E8; font-weight: 600; }
        .comparison-table tr:nth-child(even) { background: rgba(138, 43, 226, 0.08); }
        .comparison-table tr:nth-child(odd) { background: rgba(42, 42, 42, 0.7); }
        
        .recommendation-badge { 
            display: inline-block; padding: 5px 12px; border-radius: 20px; font-size: 12px; font-weight: 600; 
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        .badge-optimal { background: #0d6e32; color: #d4edda; border: 1px solid #28a745; }
        .badge-balanced { background: #664d03; color: #fff3cd; border: 1px solid #ffc107; }
        .badge-conservative { background: #002752; color: #cce7ff; border: 1px solid #0d6efd; }
        .badge-aggressive { background: #4f0f16; color: #f8d7da; border: 1px solid #dc3545; }
        
        .strategy-comparison { display: grid; grid-template-columns: 2fr 1fr; gap: 20px; margin: 20px 0; }
        
        .optimization-result { 
            background: rgba(139, 115, 85, 0.1); 
            padding: 15px; 
            border-radius: var(--radius-lg); 
            margin: 10px 0;
            border-left: 4px solid #8b7355;
            color: #E0E0E0;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        }
        
        /* Landing Page Styles */
        .landing-card {
            background: linear-gradient(145deg, #1F1F1F, #222222);
            border: 1px solid #2C2C2C;
            border-radius: 4px;
            padding: 18px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            min-height: 148px;
            position: relative;
            overflow: hidden;
        }
        
        .landing-card:hover {
            transform: translateY(-6px);
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.4), 0 0 15px rgba(139, 115, 85, 0.4);
            border-color: #8b7355;
        }
        
        .landing-card h3 {
            font-family: 'Playfair Display', serif;
            color: #FFFFFF;
            font-size: 18px;
            margin: 0 0 12px 0;
        }
        
        .landing-card p {
            font-family: 'Inter', sans-serif;
            color: #D9D9D9;
            font-size: 13px;
            line-height: 1.4;
            margin: 0;
        }
        
        .landing-card-icon {
            margin-bottom: 15px;
            color: #8A2BE2;
            font-size: 24px;
            opacity: 0.9;
        }
        
        /* Fade in animations */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Mobile responsiveness */
        @media (max-width: 768px) {
            #landingPanelsContainer {
                grid-template-columns: 1fr;
            }
        }
        
        .rating-score { 
            font-size: 48px; font-weight: bold; color: var(--color-primary); text-align: center;
            margin: 20px 0;
        }
        
        .improvement-indicator { 
            display: inline-flex; align-items: center; gap: 5px; font-weight: bold;
        }
        .improvement-positive { color: var(--accent-positive); }
        .improvement-negative { color: var(--accent-negative); }
        
        /* Neue Styles für Portfolio Entwicklung */
        .performance-metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .performance-card { background: var(--bg-panel); padding: 20px; border-radius: var(--radius-lg); text-align: center; border: 1px solid var(--border-panel); }
        
        .path-simulation { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .path-card { background: var(--bg-panel); padding: 20px; border-radius: var(--radius-lg); border: 1px solid var(--border-panel); }
        
        .swot-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 20px 0; }
        .swot-card { background: var(--bg-panel); padding: 20px; border-radius: var(--radius-lg); border-left: 4px solid; }
        .strengths { border-left-color: #28A745; }
        .weaknesses { border-left-color: #DC3545; }
        .opportunities { border-left-color: #8b7355; }
        .threats { border-left-color: #6C757D; }
        
        .calculate-section {
            text-align: center;
            margin: 30px 0;
            padding: 30px;
            background: var(--bg-panel);
            color: var(--text-primary);
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-panel);
        }
        
        .password-error {
            color: #DC3545;
            margin-top: 10px;
            display: none;
        }
        
        .market-analysis-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .market-analysis-card {
            background: #1F1F1F;
            padding: 20px;
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-light);
            border-left: 4px solid;
        }
        
        .cycle-indicator {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
        }
        
        .cycle-growth { background: #d4edda; color: #155724; }
        .cycle-cyclical { background: #fff3cd; color: #856404; }
        .cycle-defensive { background: #cce7ff; color: #004085; }
        
        .timeframe-switcher {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .timeframe-btn {
            padding: 8px 16px;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .timeframe-btn.active {
            background: var(--color-primary);
            color: white;
            border-color: var(--color-primary);
        }
        
        .scenario-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .scenario-card {
            background: #1F1F1F;
            padding: 20px;
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-light);
            text-align: center;
            transition: all 0.3s ease;
        }
        
        .scenario-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-soft);
        }
        
        .scenario-normal { border-top: 4px solid #28A745; }
        .scenario-interest { border-top: 4px solid #DC3545; }
        .scenario-inflation { border-top: 4px solid #FFC107; }
        .scenario-recession { border-top: 4px solid #6C757D; }
        .scenario-growth { border-top: 4px solid #8b7355; }
        
        .correlation-matrix {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        
        .correlation-matrix th, .correlation-matrix td {
            padding: 10px;
            text-align: center;
            border: 1px solid var(--border-light);
        }
        
        .correlation-matrix th {
            background: var(--color-primary);
            color: white;
        }
        
        .correlation-value {
            font-weight: bold;
        }
        
        .positive-correlation { background: #d4edda; }
        .negative-correlation { background: #f8d7da; }
        .neutral-correlation { background: #fff3cd; }
        
        .monte-carlo-controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .benchmark-comparison {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .benchmark-card {
            background: #1F1F1F;
            padding: 20px;
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-light);
            text-align: center;
        }
        
        .peer-comparison {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .peer-card {
            background: #1F1F1F;
            padding: 15px;
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-light);
            text-align: center;
        }
        
        .refresh-button {
            background: #8b7355;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 2px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            margin: 5px;
        }
        
        .refresh-button:hover {
            background: #6d5a42;
            transform: translateY(-2px);
        }
        
        .auto-refresh-info {
            background: rgba(139, 115, 85, 0.15);
            padding: 12px 16px;
            border-radius: var(--radius-md);
            margin: 15px 0;
            font-size: 14px;
            border-left: 4px solid var(--color-accent);
            color: var(--text-primary);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #28A745;
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 1000;
            animation: slideIn 0.3s ease;
        }
        
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        @keyframes slideOut {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }
        
        .price-update-info {
            background: rgba(139, 115, 85, 0.15);
            padding: 12px 16px;
            border-radius: var(--radius-md);
            margin: 12px 0;
            font-size: 14px;
            border-left: 4px solid var(--color-accent);
            color: var(--text-primary);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #8b7355;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .risk-meter {
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            margin: 10px 0;
            overflow: hidden;
        }
        
        .risk-level {
            height: 100%;
            border-radius: 4px;
            transition: all 0.3s ease;
        }
        
        .risk-low { background: #28A745; width: 30%; }
        .risk-medium { background: #FFC107; width: 60%; }
        .risk-high { background: #DC3545; width: 90%; }
        
        .tooltip {
            position: relative;
            display: inline-block;
            cursor: help;
        }
        
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 8px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -100px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 12px;
        }
        
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        
        .export-button {
            background: #8b7355;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 2px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .export-button:hover {
            background: #6d5a42;
            transform: translateY(-1px);
        }
        
        .clickable-name {
            color: white;
            text-decoration: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .clickable-name:hover {
            color: #8b7355;
            text-decoration: underline;
        }
        
        .pdf-download-section {
            text-align: center;
            margin: 40px 0;
            padding: 30px;
            background: linear-gradient(135deg, #0A1429 0%, #1E3A5C 100%);
            color: white;
            border-radius: var(--radius-lg);
        }
        
        .btn-pdf {
            background: #DC3545;
            font-size: 18px;
            padding: 15px 30px;
            margin-top: 15px;
        }
        
        .btn-pdf:hover {
            background: #c82333;
            transform: translateY(-2px);
        }
        
        .asset-performance-chart {
            height: 300px;
            margin: 20px 0;
        }
        
        .news-link {
            color: #8b7355;
            text-decoration: none;
        }
        
        .news-link:hover {
            text-decoration: underline;
        }

        /* Korrelationsmatrix Styles */
        .correlation-heatmap {
            width: 100%;
            height: 500px;
            margin: 20px 0;
        }

        .correlation-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            font-size: 12px;
        }

        .correlation-table th, .correlation-table td {
            padding: 10px;
            text-align: center;
            border: 1px solid #444;
            font-size: 13px;
        }

        .correlation-table th {
            background: #1A1A1A;
            color: #E8E8E8;
            font-weight: bold;
        }

        .correlation-table td:first-child {
            background: #1A1A1A;
            color: #E8E8E8;
            font-weight: bold;
        }

        .corr-high { 
            background: #2D4A2D; 
            color: #90EE90; 
            font-weight: 600;
        }
        .corr-medium { 
            background: #4A3D2D; 
            color: #FFD700; 
            font-weight: 600;
        }
        .corr-low { 
            background: #4A2D2D; 
            color: #FFB6C1; 
            font-weight: 600;
        }
        .corr-negative { 
            background: #2D3A4A; 
            color: #87CEEB; 
            font-weight: 600;
        }

        /* Value Testing Styles */
        .value-testing-controls {
            margin-bottom: 30px;
        }

        .parameter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .parameter-item {
            display: flex;
            flex-direction: column;
        }

        .parameter-item label {
            color: #E8E8E8;
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .parameter-item input {
            padding: 10px;
            border: 1px solid #444;
            border-radius: 6px;
            background: #2A2A2A;
            color: #E8E8E8;
            font-size: 14px;
        }

        .parameter-item input:focus {
            outline: none;
            border-color: #8A2BE2;
            box-shadow: 0 0 0 2px rgba(138, 43, 226, 0.2);
        }

        .analysis-actions {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .loading-container {
            text-align: center;
            padding: 40px;
        }

        .loading-spinner {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }

        .loading-spinner i {
            font-size: 48px;
            color: #8A2BE2;
        }

        .loading-spinner p {
            color: #E8E8E8;
            font-size: 18px;
            margin: 0;
            animation: pulse 2s ease-in-out infinite;
        }

        @keyframes pulse {
            0% { opacity: 0.6; }
            50% { opacity: 1; }
            100% { opacity: 0.6; }
        }

        .progress-bar {
            width: 300px;
            height: 8px;
            background: #333;
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #8A2BE2, #B05EED);
            width: 0%;
            transition: width 0.3s ease;
        }

        .value-testing-results {
            margin-top: 30px;
        }

        .portfolio-summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .summary-item {
            text-align: center;
            padding: 20px;
            background: linear-gradient(145deg, #2A2A2A, #232323);
            border-radius: 8px;
            border: 1px solid #444;
        }

        .summary-item h4 {
            color: #E8E8E8;
            margin-bottom: 10px;
            font-size: 14px;
            font-weight: 600;
        }

        .summary-item p {
            color: #8A2BE2;
            font-size: 24px;
            font-weight: bold;
            margin: 0;
        }

        .value-analysis-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .value-analysis-table th,
        .value-analysis-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #444;
        }

        .value-analysis-table th {
            background: #1A1A1A;
            color: #E8E8E8;
            font-weight: 600;
            font-size: 14px;
        }

        .value-analysis-table td {
            color: #D0D0D0;
            font-size: 13px;
        }

        .value-analysis-table tr:hover {
            background: rgba(138, 43, 226, 0.1);
        }

        .recommendation-buy {
            color: #4CAF50;
            font-weight: bold;
        }

        .recommendation-hold {
            color: #FFD700;
            font-weight: bold;
        }

        .recommendation-sell {
            color: #FF6B6B;
            font-weight: bold;
        }

        .score-bar {
            width: 100%;
            height: 20px;
            background: #333;
            border-radius: 10px;
            overflow: hidden;
            position: relative;
        }

        .score-fill {
            height: 100%;
            border-radius: 10px;
            transition: width 0.3s ease;
        }

        .score-high { background: linear-gradient(90deg, #4CAF50, #66BB6A); }
        .score-medium { background: linear-gradient(90deg, #FFD700, #FFE082); }
        .score-low { background: linear-gradient(90deg, #FF6B6B, #FF8A80); }

        .charts-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }

        .sources-list {
            display: grid;
            gap: 15px;
        }

        .source-item {
            padding: 15px;
            background: #2A2A2A;
            border-radius: 6px;
            border-left: 4px solid #8A2BE2;
        }

        .source-item h5 {
            color: #E8E8E8;
            margin: 0 0 8px 0;
            font-size: 14px;
        }

        .source-item p {
            color: #D0D0D0;
            margin: 4px 0;
            font-size: 13px;
        }

        .source-item a {
            color: #8A2BE2;
            text-decoration: none;
        }

        .source-item a:hover {
            text-decoration: underline;
        }

        .modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: #1A1A1A;
            padding: 30px;
            border-radius: 8px;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
            border: 1px solid #444;
        }

        .close {
            position: absolute;
            top: 15px;
            right: 20px;
            color: #E8E8E8;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: #8A2BE2;
        }

        .asset-detail-content h3 {
            color: #E8E8E8;
            margin-bottom: 20px;
        }

        .detail-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .detail-item {
            padding: 15px;
            background: #2A2A2A;
            border-radius: 6px;
        }

        .detail-item h5 {
            color: #E8E8E8;
            margin: 0 0 8px 0;
            font-size: 14px;
        }

        .detail-item p {
            color: #D0D0D0;
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }

        .valuation-methods {
            margin-top: 20px;
        }

        .valuation-method {
            margin-bottom: 20px;
            padding: 15px;
            background: #2A2A2A;
            border-radius: 6px;
            border-left: 4px solid #8A2BE2;
        }

        .valuation-method h5 {
            color: #E8E8E8;
            margin: 0 0 10px 0;
        }

        .valuation-method p {
            color: #D0D0D0;
            margin: 5px 0;
        }

        /* Investment Strategy Modules Styles */
        .momentum-controls, .buyhold-controls, .carry-controls {
            margin-bottom: 30px;
        }

        .momentum-analysis-table, .buyhold-analysis-table, .carry-analysis-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .momentum-analysis-table th,
        .momentum-analysis-table td,
        .buyhold-analysis-table th,
        .buyhold-analysis-table td,
        .carry-analysis-table th,
        .carry-analysis-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #444;
            font-size: 13px;
        }

        .momentum-analysis-table th,
        .buyhold-analysis-table th,
        .carry-analysis-table th {
            background: #1A1A1A;
            color: #E8E8E8;
            font-weight: 600;
        }

        .momentum-analysis-table td,
        .buyhold-analysis-table td,
        .carry-analysis-table td {
            color: #D0D0D0;
        }

        .momentum-analysis-table tr:hover,
        .buyhold-analysis-table tr:hover,
        .carry-analysis-table tr:hover {
            background: rgba(138, 43, 226, 0.1);
        }

        .momentum-results, .buyhold-results, .carry-results {
            margin-top: 30px;
        }

        .performance-positive {
            color: #4CAF50;
            font-weight: bold;
        }

        .performance-negative {
            color: #FF6B6B;
            font-weight: bold;
        }

        .performance-neutral {
            color: #FFD700;
            font-weight: bold;
        }

        .recommendation-strong-buy {
            color: #4CAF50;
            font-weight: bold;
        }

        .recommendation-buy {
            color: #66BB6A;
            font-weight: bold;
        }

        .recommendation-neutral {
            color: #FFD700;
            font-weight: bold;
        }

        .recommendation-avoid {
            color: #FF6B6B;
            font-weight: bold;
        }

        .recommendation-recommend {
            color: #4CAF50;
            font-weight: bold;
        }

        .recommendation-opportunistic {
            color: #FFD700;
            font-weight: bold;
        }

        .heatmap-cell {
            display: inline-block;
            width: 20px;
            height: 20px;
            margin: 2px;
            border-radius: 3px;
            text-align: center;
            line-height: 20px;
            font-size: 10px;
            font-weight: bold;
        }

        .heatmap-positive {
            background: #4CAF50;
            color: white;
        }

        .heatmap-negative {
            background: #FF6B6B;
            color: white;
        }

        .heatmap-neutral {
            background: #FFD700;
            color: black;
        }

        .simulation-chart {
            margin-top: 20px;
        }

        .carry-simulation {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 10px;
            margin: 10px 0;
        }

        .simulation-item {
            text-align: center;
            padding: 10px;
            background: #2A2A2A;
            border-radius: 6px;
            border: 1px solid #444;
        }

        .simulation-item h6 {
            color: #E8E8E8;
            margin: 0 0 5px 0;
            font-size: 12px;
        }

        .simulation-item p {
            color: #8A2BE2;
            margin: 0;
            font-weight: bold;
            font-size: 14px;
        }

        .strategy-navigation {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }

        .strategy-card {
            background: linear-gradient(145deg, #2A2A2A, #232323);
            border-radius: 8px;
            padding: 20px;
            border: 1px solid #444;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .strategy-card:hover {
            border-color: #8A2BE2;
            box-shadow: 0 4px 20px rgba(138, 43, 226, 0.2);
            transform: translateY(-2px);
        }

        .strategy-card h3 {
            color: #8A2BE2;
            margin: 0 0 15px 0;
            font-size: 18px;
        }

        .strategy-card p {
            color: #D0D0D0;
            margin: 0 0 15px 0;
            font-size: 14px;
            line-height: 1.5;
        }

        .strategy-features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            margin-bottom: 15px;
        }

        .strategy-feature {
            padding: 8px;
            background: rgba(138, 43, 226, 0.1);
            border-radius: 4px;
            text-align: center;
            font-size: 12px;
            color: #E8E8E8;
        }

        .strategy-button {
            width: 100%;
            padding: 10px;
            background: linear-gradient(90deg, #8A2BE2, #B05EED);
            color: white;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .strategy-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(138, 43, 226, 0.3);
        }

        .correlation-legend {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin: 10px 0;
            font-size: 12px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .legend-color {
            width: 15px;
            height: 15px;
            border-radius: 3px;
        }

        .welcome-screen {
            position: fixed;
            top: 0; left: 0;
            width: 100%; height: 100%;
            background: linear-gradient(135deg, #1a0f42 0%, #0A1429 30%, #0A1429 70%, #1a0f42 100%);
            display: none;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            z-index: 9999;

        }

        .welcome-screen.active {
            display: flex;

        }

        .welcome-content {
            text-align: center;
            transform: translateY(20px);
            opacity: 0;
            animation: welcomeSlideIn 1s ease 1s forwards;
        }

        .welcome-title {
            font-size: 3.5rem;
            font-weight: 700;
            color: white;
            margin-bottom: 1rem;
            text-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }

        .welcome-subtitle {
            font-size: 1.2rem;
            color: rgba(255,255,255,0.8);
            font-weight: 300;
        }
.welcome-author {
    font-size: 1rem;
    color: rgba(255,255,255,0.7);
    font-weight: 300;
    margin-bottom: 2rem;
}
        .loading-bar {
            width: 200px;
            height: 3px;
            background: rgba(255,255,255,0.2);
            margin-top: 2rem;
            border-radius: 2px;
            overflow: hidden;
        }

        .loading-progress {
            width: 0%;
            height: 100%;
            background: #333333;
            animation: loadingFill 3s ease 1s forwards;
        }

        @keyframes welcomeSlideIn {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes loadingFill {
            0% { width: 0%; }
            60% { width: 70%; }
            80% { width: 85%; }
            100% { width: 100%; }
        }
        /* Finance Footer Styles */
        /* Footer styles are handled by utility classes in the HTML */
        .market-open { color: #28A745; font-weight: bold; }
        .market-closed { color: #DC3545; }
        .market-status { margin: 0 5px; }
/* Violet Background Styles */
:root{
    /* Basis / Branding-empfohlene Farben */
    --base-black: #050510;      /* sehr dunkler Grundton (nicht reines Schwarz) */
    --violet-1:  #0a0f2c;       /* sehr dunkles Blau-Violett */
    --violet-2:  #1a0b38;       /* tiefes Violett */
    --violet-3:  #2e0f54;       /* edles Lila */
    --violet-4:  #3c1a70;       /* Blau-Violett für Tiefe */

    /* Bewegung (kleiner = schneller) */
    --d1: 10s;
    --d2: 14s;
    --d3: 20s;

    /* Unschärfe / Sichtbarkeit (anpassbar) */
    --blur1: 48px;
    --blur2: 84px;
    --blur3: 120px;
    --opa1: 0.96;
    --opa2: 0.82;
    --opa3: 0.74;
}

/* Fullscreen background container */
.bg {
    position: fixed;
    inset: 0;
    z-index: -1; /* WICHTIG: Hinter allen Inhalten */
    pointer-events: none;
    isolation: isolate;
    background: var(--base-black);
}

/* Layers use repeating radial gradients and animate background-position diagonally.
   Because they repeat, the motion loops seamlessly (no snapping). */
.layer {
    position: absolute;
    inset: -40%;
    pointer-events: none;
    background-repeat: repeat;
    mix-blend-mode: screen;
    will-change: background-position, transform, opacity;
}

/* Layer 1 - vorne (fein strukturiert, schneller) */
.l1 {
    background-image:
        radial-gradient(closest-side, rgba(138,43,226,0.25) 0%, rgba(138,43,226,0) 48%),
        radial-gradient(circle at 18% 82%, rgba(138,43,226,0.18) 0%, rgba(138,43,226,0) 44%);
    background-size: 1200px 1200px, 1600px 1600px;
    filter: blur(var(--blur1)) saturate(116%);
    opacity: var(--opa1);
    animation:
        bgMove1 var(--d1) linear infinite,
        wave1 calc(var(--d1) * 1.12) ease-in-out infinite;
}

/* Layer 2 - mitte (mittlere Tiefe, moderat) */
.l2 {
    background-image:
        radial-gradient(circle at 16% 86%, rgba(138,43,226,0.15) 0%, rgba(138,43,226,0) 42%),
        radial-gradient(circle at 8% 92%, rgba(138,43,226,0.12) 0%, rgba(138,43,226,0) 38%);
    background-size: 1800px 1800px, 2200px 2200px;
    filter: blur(var(--blur2)) saturate(106%);
    opacity: var(--opa2);
    animation:
        bgMove2 var(--d2) linear infinite,
        wave2 calc(var(--d2) * 1.18) ease-in-out infinite;
}

/* Layer 3 - hinten (groß, sehr weich) */
.l3 {
    background-image:
        radial-gradient(circle at 12% 92%, rgba(138,43,226,0.10) 0%, rgba(138,43,226,0) 36%),
        radial-gradient(circle at 22% 72%, rgba(138,43,226,0.08) 0%, rgba(138,43,226,0) 40%);
    background-size: 2600px 2600px, 3000px 3000px;
    filter: blur(var(--blur3)) saturate(102%);
    opacity: var(--opa3);
    animation:
        bgMove3 var(--d3) linear infinite,
        wave3 calc(var(--d3) * 1.22) ease-in-out infinite;
}

/* subtle overlay for micro-life */
.pulse {
    position: absolute;
    inset: -60%;
    background: linear-gradient(135deg, rgba(255,255,255,0.01), rgba(255,255,255,0) 22%);
    filter: blur(160px);
    mix-blend-mode: overlay;
    animation: pulse 12s ease-in-out infinite;
    opacity: 0.07;
    pointer-events: none;
}

/* fine grain texture for luxury finish */
.grain {
    position: fixed;
    inset: 0;
    z-index: -1; /* WICHTIG: Hinter allen Inhalten */
    pointer-events: none;
    opacity: 0.03;
    background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='64' height='64' viewBox='0 0 64 64'><filter id='g'><feTurbulence baseFrequency='0.9' numOctaves='1' seed='29' /></filter><rect width='100%' height='100%' filter='url(%23g)' opacity='0.18' /></svg>");
    mix-blend-mode: overlay;
}

/* KEYFRAMES — diagonal translation of repeating background tiles (seamless loop) */
@keyframes bgMove1 {
    from { background-position: -1400px -1400px, -1800px -1800px; }
    to   { background-position: 1400px 1400px, 1800px 1800px; }
}
@keyframes bgMove2 {
    from { background-position: -1800px -1800px, -2200px -2200px; }
    to   { background-position: 1800px 1800px, 2200px 2200px; }
}
@keyframes bgMove3 {
    from { background-position: -2400px -2400px, -2800px -2800px; }
    to   { background-position: 2400px 2400px, 2800px 2800px; }
}

/* gentle orthogonal wave movement for organic flow */
@keyframes wave1 {
    0%   { transform: translate(0%, 0%); }
    25%  { transform: translate(0.35%, -0.18%); }
    50%  { transform: translate(0%, -0.36%); }
    75%  { transform: translate(-0.35%, -0.18%); }
    100% { transform: translate(0%, 0%); }
}
@keyframes wave2 {
    0%   { transform: translate(0%, 0%); }
    25%  { transform: translate(0.52%, -0.28%); }
    50%  { transform: translate(0%, -0.56%); }
    75%  { transform: translate(-0.52%, -0.28%); }
    100% { transform: translate(0%, 0%); }
}
@keyframes wave3 {
    0%   { transform: translate(0%, 0%); }
    25%  { transform: translate(0.75%, -0.36%); }
    50%  { transform: translate(0%, -0.72%); }
    75%  { transform: translate(-0.75%, -0.36%); }
    100% { transform: translate(0%, 0%); }
}

/* micro pulse */
@keyframes pulse {
    0%   { opacity: 0.05; transform: scale(1) translate(0,0); }
    50%  { opacity: 0.11; transform: scale(1.01) translate(0.12%, -0.18%); }
    100% { opacity: 0.05; transform: scale(1) translate(0,0); }
}

/* respect user motion preferences */
@media (prefers-reduced-motion: reduce) {
    .layer, .pulse { animation: none !important; transform: none !important; }
    .grain { opacity: 0.02 !important; }
}
/* NUR WINDOWS PERFORMANCE OPTIMIERUNGEN - STANDIMAGE */
.performance-mode .layer {
    animation: none !important;
    filter: blur(40px) !important;
}

.performance-mode .pulse {
    display: none !important;
}

.performance-mode .l1 { opacity: 0.9; }
.performance-mode .l2 { opacity: 0.7; }
.performance-mode .l3 { opacity: 0.5; }

/* SMOOTH SCROLLING FIX */
html, body {
    overflow-x: hidden;
    overflow-y: auto;
    height: 100%;
    scroll-behavior: smooth;
}

.performance-mode main {
    transform: translate3d(0, 0, 0);
    backface-visibility: hidden;
    will-change: transform;
}

/* Getting Started Page Styles */
.steps-container {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin: 30px 0;
}

.step {
    display: flex;
    align-items: flex-start;
    background: linear-gradient(145deg, #262626, #1a1a1a);
    border-radius: 10px;
    padding: 20px;
    transition: transform 0.3s, box-shadow 0.3s;
}

.step:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

.step-number {
    background: linear-gradient(145deg, #8A2BE2, #6B24B2);
    color: white;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.2rem;
    margin-right: 20px;
    flex-shrink: 0;
}

.step-content {
    flex: 1;
}

.step-btn {
    margin-top: 10px;
}

.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.feature-item {
    background: linear-gradient(145deg, #262626, #1a1a1a);
    border-radius: 10px;
    padding: 20px;
    text-align: center;
    transition: transform 0.3s;
}

.feature-item:hover {
    transform: translateY(-5px);
}

.feature-icon {
    font-size: 2.5rem;
    margin-bottom: 15px;
    color: #8A2BE2;
}

.quick-links-container {
    margin-top: 30px;
}

.quick-links {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
    margin-top: 15px;
}

.quick-link {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    background: linear-gradient(145deg, #262626, #1a1a1a);
    border-radius: 10px;
    padding: 20px;
    text-decoration: none;
    color: #E0E0E0;
    transition: all 0.3s;
}

.quick-link:hover {
    background: linear-gradient(145deg, #2D2D2D, #212121);
    transform: translateY(-5px);
    color: #8A2BE2;
}

.quick-link i {
    font-size: 2rem;
    margin-bottom: 10px;
}

/* Investing Page Styles */
.principles-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.principle-item {
    background: linear-gradient(145deg, #262626, #1a1a1a);
    border-radius: 10px;
    padding: 20px;
    transition: transform 0.3s;
}

.principle-item:hover {
    transform: translateY(-5px);
}

.principle-image {
    height: 150px;
    margin-top: 15px;
    border-radius: 8px;
    background-color: #333;
    background-size: cover;
    background-position: center;
}

.tabs-container {
    margin-top: 20px;
}

.tabs {
    display: flex;
    flex-wrap: wrap;
    border-bottom: 1px solid #333;
    margin-bottom: 20px;
}

.tab {
    padding: 10px 20px;
    cursor: pointer;
    transition: all 0.3s;
}

.tab.active {
    color: #8A2BE2;
    border-bottom: 2px solid #8A2BE2;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
    animation: fade-in 0.3s ease-out;
}

.strategy-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

.strategy-table th,
.strategy-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #333;
}

.strategy-table th {
    background-color: #222;
    color: #E0E0E0;
}

.strategy-table tr:hover {
    background-color: #282828;
}

/* News Styling */
.news-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #333;
}

.news-item {
    background: #1A1A1A;
    border: 1px solid #333;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 15px;
    transition: all 0.3s ease;
}

.news-item:hover {
    background: #222;
    border-color: #8A2BE2;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(138, 43, 226, 0.2);
}

.news-item .news-header {
    margin-bottom: 10px;
    padding-bottom: 10px;
    border-bottom: 1px solid #333;
}

.news-title {
    color: #E8E8E8;
    text-decoration: none;
    font-size: 16px;
    font-weight: 600;
    line-height: 1.4;
    transition: color 0.3s ease;
}

.news-title:hover {
    color: #8A2BE2;
    text-decoration: underline;
}

.news-meta {
    display: flex;
    gap: 15px;
    margin-top: 8px;
}

.news-source {
    background: #8A2BE2;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
}

.news-time {
    color: #888;
    font-size: 12px;
    font-style: italic;
}

.news-description {
    color: #D0D0D0;
    line-height: 1.6;
    margin: 0;
}

.news-loading {
    text-align: center;
    color: #888;
    padding: 40px;
    font-size: 16px;
}

.news-loading i {
    margin-right: 10px;
    color: #8A2BE2;
}

/* Asset Section Styling */
.asset-section {
    background: #1A1A1A;
    border: 1px solid #333;
    border-radius: 12px;
    padding: 30px;
    margin-bottom: 30px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
}

.asset-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 2px solid #8A2BE2;
}

.asset-header h3 {
    color: #E8E8E8;
    font-size: 24px;
    margin: 0;
}

.asset-badges {
    display: flex;
    gap: 10px;
}

.risk-badge, .return-badge, .liquidity-badge {
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
}

.risk-badge.high, .return-badge.high, .liquidity-badge.high {
    background: #FF6B6B;
    color: white;
}

.risk-badge.medium, .return-badge.medium, .liquidity-badge.medium {
    background: #FFD700;
    color: #1A1A1A;
}

.risk-badge.low, .return-badge.low, .liquidity-badge.low {
    background: #90EE90;
    color: #1A1A1A;
}

.return-badge.stable {
    background: #87CEEB;
    color: #1A1A1A;
}

.risk-badge.variable, .return-badge.variable, .liquidity-badge.variable {
    background: #DDA0DD;
    color: white;
}

.theory-content h4 {
    color: #8A2BE2;
    font-size: 20px;
    margin: 25px 0 15px 0;
    border-left: 4px solid #8A2BE2;
    padding-left: 15px;
}

.theory-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 25px;
}

.theory-card {
    background: #222;
    border: 1px solid #444;
    border-radius: 8px;
    padding: 20px;
    transition: all 0.3s ease;
}

.theory-card:hover {
    border-color: #8A2BE2;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(138, 43, 226, 0.2);
}

.theory-card h5 {
    color: #E8E8E8;
    font-size: 16px;
    margin: 0 0 10px 0;
}

.theory-card p {
    color: #D0D0D0;
    line-height: 1.6;
    margin: 0 0 10px 0;
}

.formula {
    background: #0A0A0A;
    border: 1px solid #8A2BE2;
    border-radius: 4px;
    padding: 10px;
    font-family: 'Courier New', monospace;
    color: #8A2BE2;
    font-size: 14px;
    text-align: center;
    margin-top: 10px;
}

.practice-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 20px;
}

.practice-item {
    background: #1F1F1F;
    border: 1px solid #444;
    border-radius: 8px;
    padding: 20px;
    transition: all 0.3s ease;
}

.practice-item:hover {
    border-color: #8A2BE2;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(138, 43, 226, 0.1);
}

.practice-item h5 {
    color: #E8E8E8;
    font-size: 16px;
    margin: 0 0 10px 0;
    border-bottom: 1px solid #333;
    padding-bottom: 8px;
}

.practice-item p {
    color: #D0D0D0;
    line-height: 1.6;
    margin: 0 0 8px 0;
}

.practice-item p:last-child {
    margin-bottom: 0;
}

/* Backtesting Module Styles */
.backtesting-controls {
    background: #1A1A1A;
    border: 1px solid #333;
    border-radius: 12px;
    padding: 25px;
    margin: 20px 0;
}

.strategy-parameters {
    margin: 20px 0;
    padding: 20px;
    background: #222;
    border-radius: 8px;
    border-left: 4px solid #8A2BE2;
}

.backtesting-results {
    margin-top: 30px;
}

.metric-value {
    font-size: 24px;
    font-weight: bold;
    color: #8A2BE2;
    margin-top: 5px;
}

.summary-item h4 {
    color: #E0E0E0;
    font-size: 14px;
    margin-bottom: 5px;
    opacity: 0.8;
}

/* Comprehensive PDF Download Styles */
.comprehensive-pdf-section {
    background: linear-gradient(135deg, #1A1A1A 0%, #2A2A2A 100%);
    border: 1px solid #8A2BE2;
    border-radius: 16px;
    margin: 30px 0;
    overflow: hidden;
    position: relative;
}

.comprehensive-pdf-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #8A2BE2, #B05EED, #8A2BE2);
    background-size: 200% 100%;
    animation: shimmer 3s ease-in-out infinite;
}

@keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
}

.pdf-download-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 40px;
    margin-top: 20px;
}

.pdf-preview {
    background: #222;
    border-radius: 12px;
    padding: 25px;
    border: 1px solid #333;
}

.pdf-preview h4 {
    color: #8A2BE2;
    font-size: 18px;
    margin-bottom: 20px;
    font-family: 'Playfair Display', serif;
}

.pdf-content-list {
    display: grid;
    grid-template-columns: 1fr;
    gap: 12px;
}

.content-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    background: #1A1A1A;
    border-radius: 8px;
    border-left: 3px solid #8A2BE2;
    transition: all 0.3s ease;
}

.content-item:hover {
    background: #2A2A2A;
    transform: translateX(5px);
}

.content-item i {
    color: #8A2BE2;
    font-size: 16px;
    width: 20px;
    text-align: center;
}

.content-item span {
    color: #E0E0E0;
    font-size: 14px;
    font-weight: 500;
}

.pdf-download-form {
    background: #222;
    border-radius: 12px;
    padding: 25px;
    border: 1px solid #333;
}

.pdf-download-form h4 {
    color: #8A2BE2;
    font-size: 18px;
    margin-bottom: 15px;
    font-family: 'Playfair Display', serif;
}

.pdf-download-form p {
    color: #B0B0B0;
    margin-bottom: 20px;
    font-size: 14px;
}

.password-input-group {
    position: relative;
    margin-bottom: 20px;
}

.password-input {
    width: 100%;
    padding: 15px 50px 15px 15px;
    background: #1A1A1A;
    border: 2px solid #333;
    border-radius: 8px;
    color: #E0E0E0;
    font-size: 16px;
    transition: all 0.3s ease;
}

.password-input:focus {
    outline: none;
    border-color: #8A2BE2;
    box-shadow: 0 0 0 3px rgba(138, 43, 226, 0.1);
}

.password-toggle {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #8A2BE2;
    cursor: pointer;
    font-size: 16px;
    padding: 5px;
    transition: color 0.3s ease;
}

.password-toggle:hover {
    color: #B05EED;
}

.pdf-generate-btn {
    width: 100%;
    padding: 15px;
    background: linear-gradient(135deg, #8A2BE2, #B05EED);
    border: none;
    border-radius: 8px;
    color: white;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 15px;
}

.pdf-generate-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(138, 43, 226, 0.3);
}

.pdf-generate-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
}

.pdf-info {
    color: #B0B0B0;
    font-size: 12px;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.pdf-features {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.feature-tag {
    display: flex;
    align-items: center;
    gap: 6px;
    background: rgba(138, 43, 226, 0.1);
    color: #8A2BE2;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
    border: 1px solid rgba(138, 43, 226, 0.2);
}

.feature-tag i {
    font-size: 10px;
}

@media (max-width: 768px) {
    .pdf-download-container {
        grid-template-columns: 1fr;
        gap: 20px;
    }
    
    .pdf-preview, .pdf-download-form {
        padding: 20px;
    }
}

/* Getting Started Structure Styles */
.website-structure {
    margin: 20px 0;
}

.structure-section {
    margin-bottom: 30px;
    padding: 20px;
    background: #1A1A1A;
    border-radius: 12px;
    border-left: 4px solid #8A2BE2;
}

.structure-section h4 {
    color: #8A2BE2;
    font-size: 18px;
    margin-bottom: 15px;
    font-family: 'Playfair Display', serif;
}

.structure-items {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 15px;
}

.structure-item {
    display: flex;
    align-items: flex-start;
    gap: 15px;
    padding: 15px;
    background: #222;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid #333;
}

.structure-item:hover {
    background: #2A2A2A;
    border-color: #8A2BE2;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(138, 43, 226, 0.2);
}

.structure-item i {
    font-size: 24px;
    color: #8A2BE2;
    margin-top: 5px;
    min-width: 30px;
}

.structure-item strong {
    color: #E0E0E0;
    font-size: 16px;
    display: block;
    margin-bottom: 5px;
}

.structure-item p {
    color: #B0B0B0;
    font-size: 14px;
    line-height: 1.4;
    margin: 0;
}

.step-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
    flex-wrap: wrap;
}

.step-actions .btn {
    font-size: 12px;
    padding: 8px 16px;
}

}  </style>
<script>
    // Initial Footer ausblenden für Login-Bildschirm
    window.onload = function() {
        document.querySelector('footer').style.display = 'none';
        
        // Ensure login screen is properly centered
        const loginScreen = document.getElementById('passwordProtection');
        if (loginScreen) {
            loginScreen.style.display = 'flex';
            loginScreen.style.justifyContent = 'center';
            loginScreen.style.alignItems = 'center';
            loginScreen.style.width = '100vw';
            loginScreen.style.height = '100vh';
        }
    }
</script>
</head>
<body class="sap-theme-dark" style="margin: 0; padding: 0;">
    <!-- ========== LOGIN SCREEN v3.0 FINAL - UPDATED 2025-10-11 22:38 ========== -->
    <div id="passwordProtection" style="display: flex; justify-content: center; align-items: center; width: 100vw; height: 100vh; position: fixed; top: 0; left: 0; background: #000000; z-index: 10000;">
        <div style="background: #000000; padding: 60px; border-radius: 4px; box-shadow: none; text-align: center; max-width: 500px; width: 90%; border: none; margin: 0 auto;">
            <!-- Title UPDATED - Swiss in BEIGE 52px -->
            <div style="margin-bottom: 30px; line-height: 1.1;">
                <span style="color: #8b7355 !important; font-size: 52px !important; font-weight: 300 !important; font-family: 'Playfair Display', serif !important; display: inline !important;">Swiss</span>
                <span style="color: #FFFFFF !important; font-size: 52px !important; font-weight: 300 !important; font-family: 'Playfair Display', serif !important; display: inline !important;"> Asset Pro</span>
            </div>
            
            <p style="margin-bottom: 25px; color: #E8E8E8; font-size: 15px;">Bitte geben Sie das Passwort ein:</p>
            <input type="password" id="passwordInput" placeholder="Passwort" onkeypress="if(event.key === 'Enter') checkPassword()" style="width: 100%; padding: 14px; border: 1px solid #454545; border-radius: 4px; margin-bottom: 18px; font-size: 16px; background: #1a1a1a; color: white; outline: none !important; box-sizing: border-box;">
            <button onclick="checkPassword()" id="accessButton" style="background: #8b7355 !important; color: white !important; font-weight: 600; padding: 14px 30px; border-radius: 2px; box-shadow: none; border: none; cursor: pointer; width: 100%; font-size: 17px; outline: none !important;">Zugang erhalten</button>
            <p id="passwordError" style="color: #DC3545; margin-top: 12px; display: none; font-size: 14px;">Falsches Passwort. Bitte versuchen Sie es erneut.</p>
            <p style="margin-top: 20px; font-size: 13px; color: #999;">by Ahmed Choudhary</p>
        </div>
    </div>

<div class="welcome-screen" id="welcomeScreen">
    <div class="welcome-content">
        <h1 class="welcome-title">Swiss Asset Pro</h1>
        <p class="welcome-subtitle">Professional Portfolio Simulation</p>
        <p class="welcome-author">by Ahmed Choudhary</p>
        
        <div class="loading-bar">
            <div class="loading-progress"></div>
        </div>
        
        <!-- VERSCHWINDENDE AKTIEN-LINIE - 2025-10-12 00:43 -->
        <div class="stock-graph-fade" style="margin-top: 40px; display: flex; justify-content: center;">
            <div class="graph-container-fade" style="width: 300px; height: 80px; position: relative;">
                <svg viewBox="0 0 300 80" preserveAspectRatio="none" style="width: 100%; height: 100%;">
                    <!-- Aktien-Linie die langsam verschwindet -->
                    <path id="fadingStockLine" d="M0,60 L50,55 L100,70 L150,65 L200,75 L250,68 L300,20" 
                          style="fill: none; stroke: #8b7355; stroke-width: 3; stroke-linecap: round; stroke-linejoin: round; opacity: 1; filter: drop-shadow(0 0 10px rgba(139, 115, 85, 0.8)); transition: opacity 1s ease-out;" />
                </svg>
            </div>
        </div>
        
    </div>
</div>

<style>
.welcome-screen {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: #0A0A0A;
    display: none;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    z-index: 9999;
}

.welcome-screen.active {
    display: flex;
}

.welcome-content {
    text-align: center;
    transform: translateY(0);
    opacity: 1;
    animation: welcomeSlideIn 0.8s ease 0.2s forwards;
}

.welcome-title {
    font-family: var(--font-heading);
    font-size: 3.5rem;
    font-weight: 700;
    color: var(--color-accent);
    margin-bottom: 1.5rem;
    text-shadow: 0 0 25px rgba(138, 43, 226, 0.3);
    letter-spacing: -1px;
}

.welcome-subtitle {
    font-family: var(--font-body);
    font-size: 1.2rem;
    color: rgba(255,255,255,0.8);
    font-weight: 300;
    letter-spacing: 0.3px;
}

.welcome-author {
    font-size: 1rem;
    color: rgba(255,255,255,0.7);
    font-weight: 300;
    margin-bottom: 2rem;
}

.loading-bar {
    width: 250px;
    height: 4px;
    background: rgba(255,255,255,0.1);
    margin: 2.5rem auto 0;
    border-radius: 4px;
    overflow: hidden;
}

        .loading-progress {
            width: 0%;
            height: 100%;
            background: linear-gradient(90deg, #d4af37, #8b7355);
            animation: loadingFill 3.5s cubic-bezier(0.34, 1.56, 0.64, 1) 0.3s forwards;
            box-shadow: 0 0 15px rgba(139, 115, 85, 0.6);
        }/* NEUE AKTIEN-GRAPH ANIMATION */
.stock-graph-animation {
    margin-top: 40px;
    display: flex;
    justify-content: center;
}

.graph-container {
    width: 300px;
    height: 80px;
    position: relative;
}

.stock-graph {
    width: 100%;
    height: 100%;
}

.graph-line {
    fill: none;
    stroke: #8b7355;
    stroke-width: 3;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-dasharray: 100;
    stroke-dashoffset: 100;
    animation: drawGraph 3.5s ease-in-out 0.8s forwards;
    filter: drop-shadow(0 0 10px rgba(139, 115, 85, 0.8));
}

.graph-dot {
    fill: #d4af37;
    stroke: #8b7355;
    stroke-width: 2;
    filter: drop-shadow(0 0 8px #d4af37);
    animation: followPath 3.5s ease-in-out 0.8s forwards;
}

@keyframes welcomeSlideIn {
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes loadingFill {
    to { width: 100%; }
}

@keyframes drawGraph {
    to {
        stroke-dashoffset: 0;
    }
}

@keyframes followPath {
    0% {
        cx: 0;
        cy: 60;
    }
    16% {
        cx: 50;
        cy: 55;
    }
    33% {
        cx: 100;
        cy: 70;
    }
    50% {
        cx: 150;
        cy: 65;
    }
    66% {
        cx: 200;
        cy: 75;
    }
    83% {
        cx: 250;
        cy: 68;
    }
    100% {
        cx: 300;
        cy: 20;
    }
}
</style>

    <!-- PWA Install Banner -->
    <div id="pwaInstallBanner" style="display: none; position: fixed; bottom: 0; left: 0; right: 0; background: linear-gradient(135deg, #8A2BE2, #B05EED); color: white; padding: 15px; z-index: 9999; transform: translateY(100%); transition: transform 0.3s ease;">
        <div style="display: flex; align-items: center; justify-content: space-between; max-width: 400px; margin: 0 auto;">
            <div style="display: flex; align-items: center; gap: 10px;">
                <i class="fas fa-download" style="font-size: 20px;"></i>
                <div>
                    <div style="font-weight: 600; font-size: 14px;">App installieren</div>
                    <div style="font-size: 12px; opacity: 0.9;">Für bessere Performance</div>
                </div>
            </div>
            <div style="display: flex; gap: 10px;">
                <button onclick="installPWA()" style="background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white; padding: 8px 16px; border-radius: 6px; font-size: 12px; cursor: pointer;">Installieren</button>
                <button onclick="dismissInstallBanner()" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 0; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center;">×</button>
            </div>
        </div>
    </div>

    <!-- Offline Indicator -->
    <div id="offlineIndicator" style="display: none; position: fixed; top: 0; left: 0; right: 0; background: #FF6B6B; color: white; text-align: center; padding: 8px; z-index: 9998; font-size: 14px;">
        <i class="fas fa-wifi" style="margin-right: 8px;"></i>
        Sie sind offline. Einige Funktionen sind möglicherweise eingeschränkt.
    </div>

    <!-- iOS Add to Home Screen Instructions -->
    <div id="iosInstallInstructions" style="display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.9); z-index: 10000; color: white; padding: 20px; text-align: center;">
        <div style="max-width: 400px; margin: 50px auto;">
            <div style="font-size: 48px; margin-bottom: 20px;">📱</div>
            <h2 style="color: #8A2BE2; margin-bottom: 20px;">App zum Home Screen hinzufügen</h2>
            <div style="text-align: left; margin-bottom: 30px;">
                <p style="margin-bottom: 15px;"><strong>1.</strong> Tippen Sie auf das <i class="fas fa-share" style="color: #8A2BE2;"></i> Teilen-Symbol</p>
                <p style="margin-bottom: 15px;"><strong>2.</strong> Wählen Sie "Zum Home-Bildschirm"</p>
                <p style="margin-bottom: 15px;"><strong>3.</strong> Tippen Sie auf "Hinzufügen"</p>
            </div>
            <button onclick="closeIOSInstructions()" style="background: #8A2BE2; color: white; border: none; padding: 12px 24px; border-radius: 8px; font-size: 16px; cursor: pointer;">Verstanden</button>
        </div>
    </div>

    <!-- Intro Landing Page Overlay -->
    <div id="landingPage" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: #0A0A0A; z-index: 1000; overflow-y: auto; opacity: 0; transition: opacity 0.5s ease;">
        <div class="container" style="max-width: 1400px; margin: 0 auto; padding: 40px 20px;">
            <!-- Hero Section -->
            <div style="display: flex; flex-direction: column; margin-bottom: 40px; opacity: 1; transform: translateY(0); transition: all 0.3s ease;" class="landing-hero-section">
                <div style="text-align: center; margin-bottom: 20px;">
                    <h1 style="font-family: 'Playfair Display', serif; font-size: 56px; margin: 0; font-weight: 300; letter-spacing: -1px; background: linear-gradient(135deg, #d4af37 0%, #f4e4c1 50%, #ffffff 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">Swiss Asset Pro</h1>
                </div>
                <h2 style="font-family: 'Playfair Display', serif; font-size: 32px; color: #FFFFFF; margin: 20px auto; font-weight: 500; text-align: center;">Willkommen zur professionellen Portfolio-Simulation</h2>
                <p style="font-family: 'Inter', sans-serif; font-size: 16px; color: #D9D9D9; max-width: 800px; line-height: 1.6; text-align: center; margin: 0 auto;">Wählen Sie einen Bereich, um direkt einzusteigen, oder erkunden Sie alle Funktionen für eine umfassende Finanzanalyse Ihres Portfolios.</p>
            </div>
            
            <!-- Panels Container -->
            <div id="landingPanelsContainer" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); gap: 20px; opacity: 1; transform: translateY(0); transition: all 0.3s ease;">
                <!-- Panels werden per JavaScript dynamisch erzeugt -->
            </div>
            
            <!-- Landing Page Footer -->
            <div style="margin-top: 60px; padding-top: 30px; border-top: 1px solid #FFFFFF; text-align: center;">
                <p style="color: #8b7355; font-family: 'Inter', sans-serif; font-size: 14px; margin: 0;">
                    Software Developer | Ahmed Choudhary | 2025
                </p>
            </div>
        </div>
    </div>
    



    <!-- Navigation Pfeile -->
    <div id="page-navigation" style="position: fixed; bottom: 30px; right: 30px; z-index: 9999 !important; display: flex !important;">
        <div style="display: flex; gap: 10px; align-items: center; background: rgba(0, 0, 0, 0.95); padding: 8px 14px; border-radius: 12px; backdrop-filter: blur(10px); border: 2px solid #8b7355; box-shadow: 0 4px 20px rgba(139, 115, 85, 0.6);">
            <button id="prev-page-btn" onclick="navigateToPreviousPage()" style="background: #8b7355; color: white; border: none; padding: 10px 14px; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: 700; transition: all 0.3s ease; opacity: 1 !important; box-shadow: 0 2px 8px rgba(139, 115, 85, 0.4);" onmouseover="this.style.background='#6d5a42'; this.style.transform='scale(1.1)'" onmouseout="this.style.background='#8b7355'; this.style.transform='scale(1)'">
                <i class="fas fa-chevron-left"></i>
            </button>
            <button id="next-page-btn" onclick="navigateToNextPage()" style="background: #8b7355; color: white; border: none; padding: 10px 14px; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: 700; transition: all 0.3s ease; opacity: 1 !important; box-shadow: 0 2px 8px rgba(139, 115, 85, 0.4);" onmouseover="this.style.background='#6d5a42'; this.style.transform='scale(1.1)'" onmouseout="this.style.background='#8b7355'; this.style.transform='scale(1)'">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>


    <!-- Footer -->
        <footer style="background: #000000; border-top: 3px solid #8b7355; padding: 3rem 0; font-family: 'Inter', sans-serif; width: 100%; margin: 0;">
            <div style="max-width: 100%; margin: 0 auto; padding: 0 3rem;">
                <!-- Titel mit Abständen -->
                <div style="margin-bottom: 1rem;">
                    <span style="font-size: 1.1rem; letter-spacing: 0.5px; font-weight: 600;">
                        <span style="color: #8b7355;">Swiss</span> <span style="color: white;">Asset Pro</span>
                    </span>
                    
                    <!-- Beschreibungstext in kursiv -->
                    <div style="margin-top: 1rem; font-style: italic; color: #d1d1d1; font-size: 0.8rem; line-height: 1.5; max-width: 900px;">
                        Aus der Verbindung von Finanzexpertise, mathematischer Analyse und technologischer Präzision entstand Swiss Asset Pro – ein visionäres Simulationsprojekt im Bereich des digitalen Wealth Managements.
                        Die eigens entwickelte Portfolio-Prognose-Engine kombiniert fortschrittliche Datenmodellierung mit fundierter Finanzlogik, um Marktbewegungen in Echtzeit zu analysieren, Risiken zu bewerten und präzise Portfolio-Szenarien zu generieren.
                        Konzipiert für den direkten Einsatz bei Anlegern und Vermögensverwaltern, richtet sich die Plattform sowohl an Privatanleger als auch an professionelle Asset Manager und zeigt, wie Finanzen, Mathematik und Softwareentwicklung zu einer intelligenten, nutzerorientierten Lösung verschmelzen.
                    </div>
                </div>
                
                <!-- Powered by und Links -->
                <div style="display: flex; flex-direction: row; justify-content: flex-start; align-items: baseline; gap: 1rem; flex-wrap: nowrap;">
                    <span style="color: white; font-size: 0.85rem; line-height: 1;">Powered by Python</span>
                    <span style="color: #666; font-size: 0.9rem; line-height: 1;">|</span>
                    <span style="color: white; font-size: 0.85rem; line-height: 1;">© 2025</span>
                </div>
                
                <!-- Professionelle Portfolio-Optimierung mit Absatz -->
                <div style="margin-top: 1rem;">
                    <span style="color: white; font-size: 0.85rem; line-height: 1;">Professionelle Portfolio-Optimierung</span>
                </div>
                
                <!-- Links in einer Zeile -->
                <div style="margin-top: 2rem; display: flex; flex-direction: row; justify-content: flex-start; align-items: baseline; gap: 1rem; flex-wrap: nowrap;">
                    <a href="https://www.six-group.com" target="_blank" style="color: #8b7355; text-decoration: none; font-weight: 500; transition: all 0.3s; font-size: 0.85rem; line-height: 1; display: inline-block;">SIX Group</a>
                    <span style="color: #666; font-size: 0.9rem; line-height: 1;">|</span>
                    <a href="https://finance.yahoo.com" target="_blank" style="color: #8b7355; text-decoration: none; font-weight: 500; transition: all 0.3s; font-size: 0.85rem; line-height: 1; display: inline-block;">Yahoo Finance</a>
                    <span style="color: #666; font-size: 0.9rem; line-height: 1;">|</span>
                    <a href="https://www.bloomberg.com" target="_blank" style="color: #8b7355; text-decoration: none; font-weight: 500; transition: all 0.3s; font-size: 0.85rem; line-height: 1; display: inline-block;"><i class="fas fa-globe" style="margin-right: 0.4rem;"></i>Bloomberg</a>
                </div>
                
                <!-- Kontakt mit 2 Absätzen Abstand -->
                <div style="margin-top: 2rem;">
                    <a href="mailto:ahmedch1999@gmail.com" style="color: #8b7355; text-decoration: none; font-weight: 500; transition: all 0.3s; font-size: 0.85rem; line-height: 1; display: block; margin-bottom: 0.5rem;">Kontakt</a>
                    <span style="color: white; font-size: 0.85rem; line-height: 1;">Schweiz, Zürich</span>
                </div>
            </div>
    </footer>
</body>
</html>
'''

# Health Check Endpoints
@app.route('/health')
def health_check():
    """Health check endpoint for monitoring"""
    try:
        health_status = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "version": "1.0.0",
            "uptime": time.time() - app_start_time,
            "services": {
                "database": "ok",
                "cache": "ok",
                "api": "ok"
            }
        }
        return jsonify(health_status), 200
    except Exception as e:
        return jsonify({
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }), 500

@app.route('/metrics')
def metrics():
    """Prometheus metrics endpoint"""
    try:
        # Basic application metrics
        metrics_data = f"""# HELP swiss_asset_pro_requests_total Total number of requests
# TYPE swiss_asset_pro_requests_total counter
swiss_asset_pro_requests_total{{method="GET",endpoint="/"}} {random.randint(1000, 5000)}

# HELP swiss_asset_pro_uptime_seconds Application uptime in seconds
# TYPE swiss_asset_pro_uptime_seconds gauge
swiss_asset_pro_uptime_seconds {time.time() - app_start_time}

# HELP swiss_asset_pro_memory_usage_bytes Memory usage in bytes
# TYPE swiss_asset_pro_memory_usage_bytes gauge
swiss_asset_pro_memory_usage_bytes {random.randint(50000000, 200000000)}
"""
        return app.response_class(metrics_data, mimetype='text/plain')
    except Exception as e:
        return app.response_class(f"# ERROR: {str(e)}", mimetype='text/plain'), 500

if __name__ == '__main__':
    app_start_time = time.time()  # Startzeit für Uptime-Berechnung
    port = int(os.environ.get('PORT', 8000))
    socketio.run(app, host='0.0.0.0', port=port, debug=False)

